// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActuatorCyclic.proto

#include "ActuatorCyclic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_ActuatorCyclic_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ActuatorCyclic_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MessageId;
}  // namespace protobuf_ActuatorCyclic_2eproto
namespace Kinova {
namespace Api {
namespace ActuatorCyclic {
class MessageIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MessageId>
      _instance;
} _MessageId_default_instance_;
class CommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Command>
      _instance;
} _Command_default_instance_;
class FeedbackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Feedback>
      _instance;
} _Feedback_default_instance_;
class CustomDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomData>
      _instance;
} _CustomData_default_instance_;
}  // namespace ActuatorCyclic
}  // namespace Api
}  // namespace Kinova
namespace protobuf_ActuatorCyclic_2eproto {
static void InitDefaultsMessageId() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorCyclic::_MessageId_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorCyclic::MessageId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorCyclic::MessageId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MessageId =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMessageId}, {}};

static void InitDefaultsCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorCyclic::_Command_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorCyclic::Command();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorCyclic::Command::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Command =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCommand}, {
      &protobuf_ActuatorCyclic_2eproto::scc_info_MessageId.base,}};

static void InitDefaultsFeedback() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorCyclic::_Feedback_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorCyclic::Feedback();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorCyclic::Feedback::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Feedback =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFeedback}, {
      &protobuf_ActuatorCyclic_2eproto::scc_info_MessageId.base,}};

static void InitDefaultsCustomData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorCyclic::_CustomData_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorCyclic::CustomData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorCyclic::CustomData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CustomData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCustomData}, {
      &protobuf_ActuatorCyclic_2eproto::scc_info_MessageId.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MessageId.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Command.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Feedback.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CustomData.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::MessageId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::MessageId, identifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Command, command_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Command, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Command, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Command, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Command, torque_joint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Command, current_motor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Feedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Feedback, feedback_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Feedback, status_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Feedback, jitter_comm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Feedback, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Feedback, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Feedback, torque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Feedback, current_motor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Feedback, voltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Feedback, temperature_motor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Feedback, temperature_core_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Feedback, fault_bank_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Feedback, fault_bank_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Feedback, warning_bank_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::Feedback, warning_bank_b_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::CustomData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::CustomData, custom_data_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::CustomData, custom_data_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::CustomData, custom_data_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::CustomData, custom_data_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::CustomData, custom_data_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::CustomData, custom_data_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::CustomData, custom_data_5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::CustomData, custom_data_6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::CustomData, custom_data_7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::CustomData, custom_data_8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::CustomData, custom_data_9_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::CustomData, custom_data_10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::CustomData, custom_data_11_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::CustomData, custom_data_12_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::CustomData, custom_data_13_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::CustomData, custom_data_14_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorCyclic::CustomData, custom_data_15_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Kinova::Api::ActuatorCyclic::MessageId)},
  { 6, -1, sizeof(::Kinova::Api::ActuatorCyclic::Command)},
  { 17, -1, sizeof(::Kinova::Api::ActuatorCyclic::Feedback)},
  { 36, -1, sizeof(::Kinova::Api::ActuatorCyclic::CustomData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorCyclic::_MessageId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorCyclic::_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorCyclic::_Feedback_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorCyclic::_CustomData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ActuatorCyclic.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024ActuatorCyclic.proto\022\031Kinova.Api.Actua"
      "torCyclic\032\014Common.proto\"\037\n\tMessageId\022\022\n\n"
      "identifier\030\001 \001(\007\"\243\001\n\007Command\0228\n\ncommand_"
      "id\030\001 \001(\0132$.Kinova.Api.ActuatorCyclic.Mes"
      "sageId\022\r\n\005flags\030\002 \001(\007\022\020\n\010position\030\003 \001(\002\022"
      "\020\n\010velocity\030\004 \001(\002\022\024\n\014torque_joint\030\005 \001(\002\022"
      "\025\n\rcurrent_motor\030\006 \001(\002\"\335\002\n\010Feedback\0229\n\013f"
      "eedback_id\030\001 \001(\0132$.Kinova.Api.ActuatorCy"
      "clic.MessageId\022\024\n\014status_flags\030\002 \001(\007\022\023\n\013"
      "jitter_comm\030\003 \001(\007\022\020\n\010position\030\004 \001(\002\022\020\n\010v"
      "elocity\030\005 \001(\002\022\016\n\006torque\030\006 \001(\002\022\025\n\rcurrent"
      "_motor\030\007 \001(\002\022\017\n\007voltage\030\010 \001(\002\022\031\n\021tempera"
      "ture_motor\030\t \001(\002\022\030\n\020temperature_core\030\n \001"
      "(\002\022\024\n\014fault_bank_a\030\013 \001(\007\022\024\n\014fault_bank_b"
      "\030\014 \001(\007\022\026\n\016warning_bank_a\030\r \001(\007\022\026\n\016warnin"
      "g_bank_b\030\016 \001(\007\"\300\003\n\nCustomData\022<\n\016custom_"
      "data_id\030\001 \001(\0132$.Kinova.Api.ActuatorCycli"
      "c.MessageId\022\025\n\rcustom_data_0\030\002 \001(\007\022\025\n\rcu"
      "stom_data_1\030\003 \001(\007\022\025\n\rcustom_data_2\030\004 \001(\007"
      "\022\025\n\rcustom_data_3\030\005 \001(\007\022\025\n\rcustom_data_4"
      "\030\006 \001(\007\022\025\n\rcustom_data_5\030\007 \001(\007\022\025\n\rcustom_"
      "data_6\030\010 \001(\007\022\025\n\rcustom_data_7\030\t \001(\007\022\025\n\rc"
      "ustom_data_8\030\n \001(\007\022\025\n\rcustom_data_9\030\013 \001("
      "\007\022\026\n\016custom_data_10\030\014 \001(\007\022\026\n\016custom_data"
      "_11\030\r \001(\007\022\026\n\016custom_data_12\030\016 \001(\007\022\026\n\016cus"
      "tom_data_13\030\017 \001(\007\022\026\n\016custom_data_14\030\020 \001("
      "\007\022\026\n\016custom_data_15\030\021 \001(\007*5\n\016ServiceVers"
      "ion\022\016\n\nRESERVED_0\020\000\022\023\n\017CURRENT_VERSION\020\001"
      "*\323\001\n\014CommandFlags\022\016\n\nNO_COMMAND\020\000\022\020\n\014SER"
      "VO_ENABLE\020\001\022\021\n\rBRAKE_DISABLE\020\002\022\025\n\021CLEAR_"
      "MAJOR_FAULT\020\004\022\025\n\021CLEAR_MINOR_FAULT\020\010\022\023\n\017"
      "PROTECTIVE_STOP\020\020\022\027\n\023FORCE_BRAKE_RELEASE"
      "\020 \022\n\n\006IGNORE\020@\022\016\n\tLOW_GAINS\020\200\001\022\n\n\005LED_0\020"
      "\200\002\022\n\n\005LED_1\020\200\004*\231\004\n\013StatusFlags\022\022\n\016UNKNOW"
      "N_STATUS\020\000\022\016\n\nSTABILIZED\020\020\022\021\n\rMOTOR_INDE"
      "XED\020 \022\022\n\016MOTOR_INDEXING\020@\022\022\n\rJOINT_INDEX"
      "ED\020\200\001\022\023\n\016JOINT_INDEXING\020\200\002\022\023\n\016HIGH_PRECI"
      "SION\020\200\004\022\014\n\007BRAKING\020\200\010\022\r\n\010SERVOING\020\200\020\022\020\n\013"
      "MAJOR_FAULT\020\200 \022\020\n\013MINOR_FAULT\020\200@\022\027\n\021CALI"
      "BRATED_TORQUE\020\200\200\001\022\033\n\025CALIBRATED_MAG_SENS"
      "OR\020\200\200\002\022\025\n\017CALIBRATED_ZERO\020\200\200\004\022\014\n\006GPIO_0\020"
      "\200\200\010\022\014\n\006GPIO_1\020\200\200\020\022\035\n\027CS_QUASI_STATIC_CON"
      "TACT\020\200\200 \022\032\n\024CS_TRANSIENT_CONTACT\020\200\200@\022\024\n\r"
      "VFD_HALL_SYNC\020\200\200\200\001\022\022\n\013VFD_INDEXED\020\200\200\200\002\022\030"
      "\n\021DRIVE_BOARD_READY\020\200\200\200\004\022\031\n\022CALIBRATED_C"
      "URRENT\020\200\200\200\010\022\027\n\020CALIBRATED_MOTOR\020\200\200\200\020\022\021\n\n"
      "SW0_ACTIVE\020\200\200\200 \022\021\n\nSW1_ACTIVE\020\200\200\200@2\364\002\n\016A"
      "ctuatorCyclic\022R\n\007Refresh\022\".Kinova.Api.Ac"
      "tuatorCyclic.Command\032#.Kinova.Api.Actuat"
      "orCyclic.Feedback\022N\n\016RefreshCommand\022\".Ki"
      "nova.Api.ActuatorCyclic.Command\032\030.Kinova"
      ".Api.Common.Empty\022\\\n\017RefreshFeedback\022$.K"
      "inova.Api.ActuatorCyclic.MessageId\032#.Kin"
      "ova.Api.ActuatorCyclic.Feedback\022`\n\021Refre"
      "shCustomData\022$.Kinova.Api.ActuatorCyclic"
      ".MessageId\032%.Kinova.Api.ActuatorCyclic.C"
      "ustomDataP\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2259);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ActuatorCyclic.proto", &protobuf_RegisterTypes);
  ::protobuf_Common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ActuatorCyclic_2eproto
namespace Kinova {
namespace Api {
namespace ActuatorCyclic {
const ::google::protobuf::EnumDescriptor* ServiceVersion_descriptor() {
  protobuf_ActuatorCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ActuatorCyclic_2eproto::file_level_enum_descriptors[0];
}
bool ServiceVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CommandFlags_descriptor() {
  protobuf_ActuatorCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ActuatorCyclic_2eproto::file_level_enum_descriptors[1];
}
bool CommandFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatusFlags_descriptor() {
  protobuf_ActuatorCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ActuatorCyclic_2eproto::file_level_enum_descriptors[2];
}
bool StatusFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
    case 134217728:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MessageId::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageId::kIdentifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageId::MessageId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorCyclic_2eproto::scc_info_MessageId.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorCyclic.MessageId)
}
MessageId::MessageId(const MessageId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  identifier_ = from.identifier_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorCyclic.MessageId)
}

void MessageId::SharedCtor() {
  identifier_ = 0u;
}

MessageId::~MessageId() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorCyclic.MessageId)
  SharedDtor();
}

void MessageId::SharedDtor() {
}

void MessageId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MessageId::descriptor() {
  ::protobuf_ActuatorCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorCyclic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MessageId& MessageId::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorCyclic_2eproto::scc_info_MessageId.base);
  return *internal_default_instance();
}


void MessageId::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorCyclic.MessageId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifier_ = 0u;
  _internal_metadata_.Clear();
}

bool MessageId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorCyclic.MessageId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorCyclic.MessageId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorCyclic.MessageId)
  return false;
#undef DO_
}

void MessageId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorCyclic.MessageId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 identifier = 1;
  if (this->identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->identifier(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorCyclic.MessageId)
}

::google::protobuf::uint8* MessageId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorCyclic.MessageId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 identifier = 1;
  if (this->identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->identifier(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorCyclic.MessageId)
  return target;
}

size_t MessageId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorCyclic.MessageId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // fixed32 identifier = 1;
  if (this->identifier() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorCyclic.MessageId)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorCyclic.MessageId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorCyclic.MessageId)
    MergeFrom(*source);
  }
}

void MessageId::MergeFrom(const MessageId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorCyclic.MessageId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.identifier() != 0) {
    set_identifier(from.identifier());
  }
}

void MessageId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorCyclic.MessageId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageId::CopyFrom(const MessageId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorCyclic.MessageId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageId::IsInitialized() const {
  return true;
}

void MessageId::Swap(MessageId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageId::InternalSwap(MessageId* other) {
  using std::swap;
  swap(identifier_, other->identifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MessageId::GetMetadata() const {
  protobuf_ActuatorCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorCyclic_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Command::InitAsDefaultInstance() {
  ::Kinova::Api::ActuatorCyclic::_Command_default_instance_._instance.get_mutable()->command_id_ = const_cast< ::Kinova::Api::ActuatorCyclic::MessageId*>(
      ::Kinova::Api::ActuatorCyclic::MessageId::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kCommandIdFieldNumber;
const int Command::kFlagsFieldNumber;
const int Command::kPositionFieldNumber;
const int Command::kVelocityFieldNumber;
const int Command::kTorqueJointFieldNumber;
const int Command::kCurrentMotorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorCyclic_2eproto::scc_info_Command.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorCyclic.Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_command_id()) {
    command_id_ = new ::Kinova::Api::ActuatorCyclic::MessageId(*from.command_id_);
  } else {
    command_id_ = NULL;
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_motor_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(current_motor_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorCyclic.Command)
}

void Command::SharedCtor() {
  ::memset(&command_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_motor_) -
      reinterpret_cast<char*>(&command_id_)) + sizeof(current_motor_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorCyclic.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != internal_default_instance()) delete command_id_;
}

void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  ::protobuf_ActuatorCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorCyclic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Command& Command::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorCyclic_2eproto::scc_info_Command.base);
  return *internal_default_instance();
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorCyclic.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && command_id_ != NULL) {
    delete command_id_;
  }
  command_id_ = NULL;
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_motor_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(current_motor_));
  _internal_metadata_.Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorCyclic.Command)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.ActuatorCyclic.MessageId command_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_command_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float torque_joint = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &torque_joint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float current_motor = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_motor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorCyclic.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorCyclic.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorCyclic.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorCyclic.MessageId command_id = 1;
  if (this->has_command_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_command_id(), output);
  }

  // fixed32 flags = 2;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->flags(), output);
  }

  // float position = 3;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->position(), output);
  }

  // float velocity = 4;
  if (this->velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->velocity(), output);
  }

  // float torque_joint = 5;
  if (this->torque_joint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->torque_joint(), output);
  }

  // float current_motor = 6;
  if (this->current_motor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->current_motor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorCyclic.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorCyclic.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorCyclic.MessageId command_id = 1;
  if (this->has_command_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_command_id(), deterministic, target);
  }

  // fixed32 flags = 2;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->flags(), target);
  }

  // float position = 3;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->position(), target);
  }

  // float velocity = 4;
  if (this->velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->velocity(), target);
  }

  // float torque_joint = 5;
  if (this->torque_joint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->torque_joint(), target);
  }

  // float current_motor = 6;
  if (this->current_motor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->current_motor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorCyclic.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorCyclic.Command)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.ActuatorCyclic.MessageId command_id = 1;
  if (this->has_command_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *command_id_);
  }

  // fixed32 flags = 2;
  if (this->flags() != 0) {
    total_size += 1 + 4;
  }

  // float position = 3;
  if (this->position() != 0) {
    total_size += 1 + 4;
  }

  // float velocity = 4;
  if (this->velocity() != 0) {
    total_size += 1 + 4;
  }

  // float torque_joint = 5;
  if (this->torque_joint() != 0) {
    total_size += 1 + 4;
  }

  // float current_motor = 6;
  if (this->current_motor() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorCyclic.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorCyclic.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorCyclic.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorCyclic.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_command_id()) {
    mutable_command_id()->::Kinova::Api::ActuatorCyclic::MessageId::MergeFrom(from.command_id());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.velocity() != 0) {
    set_velocity(from.velocity());
  }
  if (from.torque_joint() != 0) {
    set_torque_joint(from.torque_joint());
  }
  if (from.current_motor() != 0) {
    set_current_motor(from.current_motor());
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorCyclic.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorCyclic.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  using std::swap;
  swap(command_id_, other->command_id_);
  swap(flags_, other->flags_);
  swap(position_, other->position_);
  swap(velocity_, other->velocity_);
  swap(torque_joint_, other->torque_joint_);
  swap(current_motor_, other->current_motor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_ActuatorCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorCyclic_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Feedback::InitAsDefaultInstance() {
  ::Kinova::Api::ActuatorCyclic::_Feedback_default_instance_._instance.get_mutable()->feedback_id_ = const_cast< ::Kinova::Api::ActuatorCyclic::MessageId*>(
      ::Kinova::Api::ActuatorCyclic::MessageId::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feedback::kFeedbackIdFieldNumber;
const int Feedback::kStatusFlagsFieldNumber;
const int Feedback::kJitterCommFieldNumber;
const int Feedback::kPositionFieldNumber;
const int Feedback::kVelocityFieldNumber;
const int Feedback::kTorqueFieldNumber;
const int Feedback::kCurrentMotorFieldNumber;
const int Feedback::kVoltageFieldNumber;
const int Feedback::kTemperatureMotorFieldNumber;
const int Feedback::kTemperatureCoreFieldNumber;
const int Feedback::kFaultBankAFieldNumber;
const int Feedback::kFaultBankBFieldNumber;
const int Feedback::kWarningBankAFieldNumber;
const int Feedback::kWarningBankBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feedback::Feedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorCyclic_2eproto::scc_info_Feedback.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorCyclic.Feedback)
}
Feedback::Feedback(const Feedback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_feedback_id()) {
    feedback_id_ = new ::Kinova::Api::ActuatorCyclic::MessageId(*from.feedback_id_);
  } else {
    feedback_id_ = NULL;
  }
  ::memcpy(&status_flags_, &from.status_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&warning_bank_b_) -
    reinterpret_cast<char*>(&status_flags_)) + sizeof(warning_bank_b_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorCyclic.Feedback)
}

void Feedback::SharedCtor() {
  ::memset(&feedback_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&warning_bank_b_) -
      reinterpret_cast<char*>(&feedback_id_)) + sizeof(warning_bank_b_));
}

Feedback::~Feedback() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorCyclic.Feedback)
  SharedDtor();
}

void Feedback::SharedDtor() {
  if (this != internal_default_instance()) delete feedback_id_;
}

void Feedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Feedback::descriptor() {
  ::protobuf_ActuatorCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorCyclic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Feedback& Feedback::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorCyclic_2eproto::scc_info_Feedback.base);
  return *internal_default_instance();
}


void Feedback::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorCyclic.Feedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && feedback_id_ != NULL) {
    delete feedback_id_;
  }
  feedback_id_ = NULL;
  ::memset(&status_flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&warning_bank_b_) -
      reinterpret_cast<char*>(&status_flags_)) + sizeof(warning_bank_b_));
  _internal_metadata_.Clear();
}

bool Feedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorCyclic.Feedback)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.ActuatorCyclic.MessageId feedback_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_feedback_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 status_flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &status_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 jitter_comm = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &jitter_comm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float velocity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float torque = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float current_motor = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_motor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float voltage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float temperature_motor = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_motor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float temperature_core = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_core_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 fault_bank_a = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fault_bank_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 fault_bank_b = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fault_bank_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 warning_bank_a = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &warning_bank_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 warning_bank_b = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &warning_bank_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorCyclic.Feedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorCyclic.Feedback)
  return false;
#undef DO_
}

void Feedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorCyclic.Feedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorCyclic.MessageId feedback_id = 1;
  if (this->has_feedback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_feedback_id(), output);
  }

  // fixed32 status_flags = 2;
  if (this->status_flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->status_flags(), output);
  }

  // fixed32 jitter_comm = 3;
  if (this->jitter_comm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->jitter_comm(), output);
  }

  // float position = 4;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->position(), output);
  }

  // float velocity = 5;
  if (this->velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->velocity(), output);
  }

  // float torque = 6;
  if (this->torque() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->torque(), output);
  }

  // float current_motor = 7;
  if (this->current_motor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->current_motor(), output);
  }

  // float voltage = 8;
  if (this->voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->voltage(), output);
  }

  // float temperature_motor = 9;
  if (this->temperature_motor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->temperature_motor(), output);
  }

  // float temperature_core = 10;
  if (this->temperature_core() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->temperature_core(), output);
  }

  // fixed32 fault_bank_a = 11;
  if (this->fault_bank_a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->fault_bank_a(), output);
  }

  // fixed32 fault_bank_b = 12;
  if (this->fault_bank_b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(12, this->fault_bank_b(), output);
  }

  // fixed32 warning_bank_a = 13;
  if (this->warning_bank_a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(13, this->warning_bank_a(), output);
  }

  // fixed32 warning_bank_b = 14;
  if (this->warning_bank_b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(14, this->warning_bank_b(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorCyclic.Feedback)
}

::google::protobuf::uint8* Feedback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorCyclic.Feedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorCyclic.MessageId feedback_id = 1;
  if (this->has_feedback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_feedback_id(), deterministic, target);
  }

  // fixed32 status_flags = 2;
  if (this->status_flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->status_flags(), target);
  }

  // fixed32 jitter_comm = 3;
  if (this->jitter_comm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->jitter_comm(), target);
  }

  // float position = 4;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->position(), target);
  }

  // float velocity = 5;
  if (this->velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->velocity(), target);
  }

  // float torque = 6;
  if (this->torque() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->torque(), target);
  }

  // float current_motor = 7;
  if (this->current_motor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->current_motor(), target);
  }

  // float voltage = 8;
  if (this->voltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->voltage(), target);
  }

  // float temperature_motor = 9;
  if (this->temperature_motor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->temperature_motor(), target);
  }

  // float temperature_core = 10;
  if (this->temperature_core() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->temperature_core(), target);
  }

  // fixed32 fault_bank_a = 11;
  if (this->fault_bank_a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(11, this->fault_bank_a(), target);
  }

  // fixed32 fault_bank_b = 12;
  if (this->fault_bank_b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(12, this->fault_bank_b(), target);
  }

  // fixed32 warning_bank_a = 13;
  if (this->warning_bank_a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(13, this->warning_bank_a(), target);
  }

  // fixed32 warning_bank_b = 14;
  if (this->warning_bank_b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(14, this->warning_bank_b(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorCyclic.Feedback)
  return target;
}

size_t Feedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorCyclic.Feedback)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.ActuatorCyclic.MessageId feedback_id = 1;
  if (this->has_feedback_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *feedback_id_);
  }

  // fixed32 status_flags = 2;
  if (this->status_flags() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 jitter_comm = 3;
  if (this->jitter_comm() != 0) {
    total_size += 1 + 4;
  }

  // float position = 4;
  if (this->position() != 0) {
    total_size += 1 + 4;
  }

  // float velocity = 5;
  if (this->velocity() != 0) {
    total_size += 1 + 4;
  }

  // float torque = 6;
  if (this->torque() != 0) {
    total_size += 1 + 4;
  }

  // float current_motor = 7;
  if (this->current_motor() != 0) {
    total_size += 1 + 4;
  }

  // float voltage = 8;
  if (this->voltage() != 0) {
    total_size += 1 + 4;
  }

  // float temperature_motor = 9;
  if (this->temperature_motor() != 0) {
    total_size += 1 + 4;
  }

  // float temperature_core = 10;
  if (this->temperature_core() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 fault_bank_a = 11;
  if (this->fault_bank_a() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 fault_bank_b = 12;
  if (this->fault_bank_b() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 warning_bank_a = 13;
  if (this->warning_bank_a() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 warning_bank_b = 14;
  if (this->warning_bank_b() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Feedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorCyclic.Feedback)
  GOOGLE_DCHECK_NE(&from, this);
  const Feedback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Feedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorCyclic.Feedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorCyclic.Feedback)
    MergeFrom(*source);
  }
}

void Feedback::MergeFrom(const Feedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorCyclic.Feedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_feedback_id()) {
    mutable_feedback_id()->::Kinova::Api::ActuatorCyclic::MessageId::MergeFrom(from.feedback_id());
  }
  if (from.status_flags() != 0) {
    set_status_flags(from.status_flags());
  }
  if (from.jitter_comm() != 0) {
    set_jitter_comm(from.jitter_comm());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.velocity() != 0) {
    set_velocity(from.velocity());
  }
  if (from.torque() != 0) {
    set_torque(from.torque());
  }
  if (from.current_motor() != 0) {
    set_current_motor(from.current_motor());
  }
  if (from.voltage() != 0) {
    set_voltage(from.voltage());
  }
  if (from.temperature_motor() != 0) {
    set_temperature_motor(from.temperature_motor());
  }
  if (from.temperature_core() != 0) {
    set_temperature_core(from.temperature_core());
  }
  if (from.fault_bank_a() != 0) {
    set_fault_bank_a(from.fault_bank_a());
  }
  if (from.fault_bank_b() != 0) {
    set_fault_bank_b(from.fault_bank_b());
  }
  if (from.warning_bank_a() != 0) {
    set_warning_bank_a(from.warning_bank_a());
  }
  if (from.warning_bank_b() != 0) {
    set_warning_bank_b(from.warning_bank_b());
  }
}

void Feedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorCyclic.Feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feedback::CopyFrom(const Feedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorCyclic.Feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feedback::IsInitialized() const {
  return true;
}

void Feedback::Swap(Feedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feedback::InternalSwap(Feedback* other) {
  using std::swap;
  swap(feedback_id_, other->feedback_id_);
  swap(status_flags_, other->status_flags_);
  swap(jitter_comm_, other->jitter_comm_);
  swap(position_, other->position_);
  swap(velocity_, other->velocity_);
  swap(torque_, other->torque_);
  swap(current_motor_, other->current_motor_);
  swap(voltage_, other->voltage_);
  swap(temperature_motor_, other->temperature_motor_);
  swap(temperature_core_, other->temperature_core_);
  swap(fault_bank_a_, other->fault_bank_a_);
  swap(fault_bank_b_, other->fault_bank_b_);
  swap(warning_bank_a_, other->warning_bank_a_);
  swap(warning_bank_b_, other->warning_bank_b_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Feedback::GetMetadata() const {
  protobuf_ActuatorCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorCyclic_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CustomData::InitAsDefaultInstance() {
  ::Kinova::Api::ActuatorCyclic::_CustomData_default_instance_._instance.get_mutable()->custom_data_id_ = const_cast< ::Kinova::Api::ActuatorCyclic::MessageId*>(
      ::Kinova::Api::ActuatorCyclic::MessageId::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomData::kCustomDataIdFieldNumber;
const int CustomData::kCustomData0FieldNumber;
const int CustomData::kCustomData1FieldNumber;
const int CustomData::kCustomData2FieldNumber;
const int CustomData::kCustomData3FieldNumber;
const int CustomData::kCustomData4FieldNumber;
const int CustomData::kCustomData5FieldNumber;
const int CustomData::kCustomData6FieldNumber;
const int CustomData::kCustomData7FieldNumber;
const int CustomData::kCustomData8FieldNumber;
const int CustomData::kCustomData9FieldNumber;
const int CustomData::kCustomData10FieldNumber;
const int CustomData::kCustomData11FieldNumber;
const int CustomData::kCustomData12FieldNumber;
const int CustomData::kCustomData13FieldNumber;
const int CustomData::kCustomData14FieldNumber;
const int CustomData::kCustomData15FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomData::CustomData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorCyclic_2eproto::scc_info_CustomData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorCyclic.CustomData)
}
CustomData::CustomData(const CustomData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_custom_data_id()) {
    custom_data_id_ = new ::Kinova::Api::ActuatorCyclic::MessageId(*from.custom_data_id_);
  } else {
    custom_data_id_ = NULL;
  }
  ::memcpy(&custom_data_0_, &from.custom_data_0_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_data_15_) -
    reinterpret_cast<char*>(&custom_data_0_)) + sizeof(custom_data_15_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorCyclic.CustomData)
}

void CustomData::SharedCtor() {
  ::memset(&custom_data_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_data_15_) -
      reinterpret_cast<char*>(&custom_data_id_)) + sizeof(custom_data_15_));
}

CustomData::~CustomData() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorCyclic.CustomData)
  SharedDtor();
}

void CustomData::SharedDtor() {
  if (this != internal_default_instance()) delete custom_data_id_;
}

void CustomData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CustomData::descriptor() {
  ::protobuf_ActuatorCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorCyclic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomData& CustomData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorCyclic_2eproto::scc_info_CustomData.base);
  return *internal_default_instance();
}


void CustomData::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorCyclic.CustomData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && custom_data_id_ != NULL) {
    delete custom_data_id_;
  }
  custom_data_id_ = NULL;
  ::memset(&custom_data_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_data_15_) -
      reinterpret_cast<char*>(&custom_data_0_)) + sizeof(custom_data_15_));
  _internal_metadata_.Clear();
}

bool CustomData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorCyclic.CustomData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.ActuatorCyclic.MessageId custom_data_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_data_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_0 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_3 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_4 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_5 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_6 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_7 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_8 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_9 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_9_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_10 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_11 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_11_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_12 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_12_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_13 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_13_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_14 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_14_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_15 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_15_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorCyclic.CustomData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorCyclic.CustomData)
  return false;
#undef DO_
}

void CustomData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorCyclic.CustomData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorCyclic.MessageId custom_data_id = 1;
  if (this->has_custom_data_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_custom_data_id(), output);
  }

  // fixed32 custom_data_0 = 2;
  if (this->custom_data_0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->custom_data_0(), output);
  }

  // fixed32 custom_data_1 = 3;
  if (this->custom_data_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->custom_data_1(), output);
  }

  // fixed32 custom_data_2 = 4;
  if (this->custom_data_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->custom_data_2(), output);
  }

  // fixed32 custom_data_3 = 5;
  if (this->custom_data_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->custom_data_3(), output);
  }

  // fixed32 custom_data_4 = 6;
  if (this->custom_data_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->custom_data_4(), output);
  }

  // fixed32 custom_data_5 = 7;
  if (this->custom_data_5() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->custom_data_5(), output);
  }

  // fixed32 custom_data_6 = 8;
  if (this->custom_data_6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->custom_data_6(), output);
  }

  // fixed32 custom_data_7 = 9;
  if (this->custom_data_7() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->custom_data_7(), output);
  }

  // fixed32 custom_data_8 = 10;
  if (this->custom_data_8() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->custom_data_8(), output);
  }

  // fixed32 custom_data_9 = 11;
  if (this->custom_data_9() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->custom_data_9(), output);
  }

  // fixed32 custom_data_10 = 12;
  if (this->custom_data_10() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(12, this->custom_data_10(), output);
  }

  // fixed32 custom_data_11 = 13;
  if (this->custom_data_11() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(13, this->custom_data_11(), output);
  }

  // fixed32 custom_data_12 = 14;
  if (this->custom_data_12() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(14, this->custom_data_12(), output);
  }

  // fixed32 custom_data_13 = 15;
  if (this->custom_data_13() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(15, this->custom_data_13(), output);
  }

  // fixed32 custom_data_14 = 16;
  if (this->custom_data_14() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(16, this->custom_data_14(), output);
  }

  // fixed32 custom_data_15 = 17;
  if (this->custom_data_15() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(17, this->custom_data_15(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorCyclic.CustomData)
}

::google::protobuf::uint8* CustomData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorCyclic.CustomData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorCyclic.MessageId custom_data_id = 1;
  if (this->has_custom_data_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_custom_data_id(), deterministic, target);
  }

  // fixed32 custom_data_0 = 2;
  if (this->custom_data_0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->custom_data_0(), target);
  }

  // fixed32 custom_data_1 = 3;
  if (this->custom_data_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->custom_data_1(), target);
  }

  // fixed32 custom_data_2 = 4;
  if (this->custom_data_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->custom_data_2(), target);
  }

  // fixed32 custom_data_3 = 5;
  if (this->custom_data_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->custom_data_3(), target);
  }

  // fixed32 custom_data_4 = 6;
  if (this->custom_data_4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->custom_data_4(), target);
  }

  // fixed32 custom_data_5 = 7;
  if (this->custom_data_5() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->custom_data_5(), target);
  }

  // fixed32 custom_data_6 = 8;
  if (this->custom_data_6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->custom_data_6(), target);
  }

  // fixed32 custom_data_7 = 9;
  if (this->custom_data_7() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->custom_data_7(), target);
  }

  // fixed32 custom_data_8 = 10;
  if (this->custom_data_8() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->custom_data_8(), target);
  }

  // fixed32 custom_data_9 = 11;
  if (this->custom_data_9() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(11, this->custom_data_9(), target);
  }

  // fixed32 custom_data_10 = 12;
  if (this->custom_data_10() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(12, this->custom_data_10(), target);
  }

  // fixed32 custom_data_11 = 13;
  if (this->custom_data_11() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(13, this->custom_data_11(), target);
  }

  // fixed32 custom_data_12 = 14;
  if (this->custom_data_12() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(14, this->custom_data_12(), target);
  }

  // fixed32 custom_data_13 = 15;
  if (this->custom_data_13() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(15, this->custom_data_13(), target);
  }

  // fixed32 custom_data_14 = 16;
  if (this->custom_data_14() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(16, this->custom_data_14(), target);
  }

  // fixed32 custom_data_15 = 17;
  if (this->custom_data_15() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(17, this->custom_data_15(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorCyclic.CustomData)
  return target;
}

size_t CustomData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorCyclic.CustomData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.ActuatorCyclic.MessageId custom_data_id = 1;
  if (this->has_custom_data_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *custom_data_id_);
  }

  // fixed32 custom_data_0 = 2;
  if (this->custom_data_0() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_1 = 3;
  if (this->custom_data_1() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_2 = 4;
  if (this->custom_data_2() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_3 = 5;
  if (this->custom_data_3() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_4 = 6;
  if (this->custom_data_4() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_5 = 7;
  if (this->custom_data_5() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_6 = 8;
  if (this->custom_data_6() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_7 = 9;
  if (this->custom_data_7() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_8 = 10;
  if (this->custom_data_8() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_9 = 11;
  if (this->custom_data_9() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_10 = 12;
  if (this->custom_data_10() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_11 = 13;
  if (this->custom_data_11() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_12 = 14;
  if (this->custom_data_12() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_13 = 15;
  if (this->custom_data_13() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_14 = 16;
  if (this->custom_data_14() != 0) {
    total_size += 2 + 4;
  }

  // fixed32 custom_data_15 = 17;
  if (this->custom_data_15() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorCyclic.CustomData)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorCyclic.CustomData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorCyclic.CustomData)
    MergeFrom(*source);
  }
}

void CustomData::MergeFrom(const CustomData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorCyclic.CustomData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_custom_data_id()) {
    mutable_custom_data_id()->::Kinova::Api::ActuatorCyclic::MessageId::MergeFrom(from.custom_data_id());
  }
  if (from.custom_data_0() != 0) {
    set_custom_data_0(from.custom_data_0());
  }
  if (from.custom_data_1() != 0) {
    set_custom_data_1(from.custom_data_1());
  }
  if (from.custom_data_2() != 0) {
    set_custom_data_2(from.custom_data_2());
  }
  if (from.custom_data_3() != 0) {
    set_custom_data_3(from.custom_data_3());
  }
  if (from.custom_data_4() != 0) {
    set_custom_data_4(from.custom_data_4());
  }
  if (from.custom_data_5() != 0) {
    set_custom_data_5(from.custom_data_5());
  }
  if (from.custom_data_6() != 0) {
    set_custom_data_6(from.custom_data_6());
  }
  if (from.custom_data_7() != 0) {
    set_custom_data_7(from.custom_data_7());
  }
  if (from.custom_data_8() != 0) {
    set_custom_data_8(from.custom_data_8());
  }
  if (from.custom_data_9() != 0) {
    set_custom_data_9(from.custom_data_9());
  }
  if (from.custom_data_10() != 0) {
    set_custom_data_10(from.custom_data_10());
  }
  if (from.custom_data_11() != 0) {
    set_custom_data_11(from.custom_data_11());
  }
  if (from.custom_data_12() != 0) {
    set_custom_data_12(from.custom_data_12());
  }
  if (from.custom_data_13() != 0) {
    set_custom_data_13(from.custom_data_13());
  }
  if (from.custom_data_14() != 0) {
    set_custom_data_14(from.custom_data_14());
  }
  if (from.custom_data_15() != 0) {
    set_custom_data_15(from.custom_data_15());
  }
}

void CustomData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorCyclic.CustomData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomData::CopyFrom(const CustomData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorCyclic.CustomData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomData::IsInitialized() const {
  return true;
}

void CustomData::Swap(CustomData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomData::InternalSwap(CustomData* other) {
  using std::swap;
  swap(custom_data_id_, other->custom_data_id_);
  swap(custom_data_0_, other->custom_data_0_);
  swap(custom_data_1_, other->custom_data_1_);
  swap(custom_data_2_, other->custom_data_2_);
  swap(custom_data_3_, other->custom_data_3_);
  swap(custom_data_4_, other->custom_data_4_);
  swap(custom_data_5_, other->custom_data_5_);
  swap(custom_data_6_, other->custom_data_6_);
  swap(custom_data_7_, other->custom_data_7_);
  swap(custom_data_8_, other->custom_data_8_);
  swap(custom_data_9_, other->custom_data_9_);
  swap(custom_data_10_, other->custom_data_10_);
  swap(custom_data_11_, other->custom_data_11_);
  swap(custom_data_12_, other->custom_data_12_);
  swap(custom_data_13_, other->custom_data_13_);
  swap(custom_data_14_, other->custom_data_14_);
  swap(custom_data_15_, other->custom_data_15_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CustomData::GetMetadata() const {
  protobuf_ActuatorCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorCyclic_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ActuatorCyclic
}  // namespace Api
}  // namespace Kinova
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorCyclic::MessageId* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorCyclic::MessageId >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorCyclic::MessageId >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorCyclic::Command* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorCyclic::Command >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorCyclic::Command >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorCyclic::Feedback* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorCyclic::Feedback >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorCyclic::Feedback >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorCyclic::CustomData* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorCyclic::CustomData >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorCyclic::CustomData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
