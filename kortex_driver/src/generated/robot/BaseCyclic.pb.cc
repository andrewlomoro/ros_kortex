// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BaseCyclic.proto

#include "BaseCyclic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseCyclic_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseCyclic_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActuatorCommand;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseCyclic_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActuatorCustomData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseCyclic_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActuatorFeedback;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseCyclic_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BaseFeedback;
}  // namespace protobuf_BaseCyclic_2eproto
namespace protobuf_InterconnectCyclicMessage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_InterconnectCyclicMessage_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Command;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_InterconnectCyclicMessage_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CustomData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_InterconnectCyclicMessage_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Feedback;
}  // namespace protobuf_InterconnectCyclicMessage_2eproto
namespace Kinova {
namespace Api {
namespace BaseCyclic {
class ActuatorCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActuatorCommand>
      _instance;
} _ActuatorCommand_default_instance_;
class ActuatorFeedbackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActuatorFeedback>
      _instance;
} _ActuatorFeedback_default_instance_;
class ActuatorCustomDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActuatorCustomData>
      _instance;
} _ActuatorCustomData_default_instance_;
class BaseFeedbackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BaseFeedback>
      _instance;
} _BaseFeedback_default_instance_;
class CustomDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomData>
      _instance;
} _CustomData_default_instance_;
class CommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Command>
      _instance;
} _Command_default_instance_;
class FeedbackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Feedback>
      _instance;
} _Feedback_default_instance_;
}  // namespace BaseCyclic
}  // namespace Api
}  // namespace Kinova
namespace protobuf_BaseCyclic_2eproto {
static void InitDefaultsActuatorCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::BaseCyclic::_ActuatorCommand_default_instance_;
    new (ptr) ::Kinova::Api::BaseCyclic::ActuatorCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::BaseCyclic::ActuatorCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActuatorCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActuatorCommand}, {}};

static void InitDefaultsActuatorFeedback() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::BaseCyclic::_ActuatorFeedback_default_instance_;
    new (ptr) ::Kinova::Api::BaseCyclic::ActuatorFeedback();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::BaseCyclic::ActuatorFeedback::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActuatorFeedback =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActuatorFeedback}, {}};

static void InitDefaultsActuatorCustomData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::BaseCyclic::_ActuatorCustomData_default_instance_;
    new (ptr) ::Kinova::Api::BaseCyclic::ActuatorCustomData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::BaseCyclic::ActuatorCustomData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActuatorCustomData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActuatorCustomData}, {}};

static void InitDefaultsBaseFeedback() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::BaseCyclic::_BaseFeedback_default_instance_;
    new (ptr) ::Kinova::Api::BaseCyclic::BaseFeedback();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::BaseCyclic::BaseFeedback::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BaseFeedback =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBaseFeedback}, {}};

static void InitDefaultsCustomData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::BaseCyclic::_CustomData_default_instance_;
    new (ptr) ::Kinova::Api::BaseCyclic::CustomData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::BaseCyclic::CustomData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CustomData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCustomData}, {
      &protobuf_BaseCyclic_2eproto::scc_info_ActuatorCustomData.base,
      &protobuf_InterconnectCyclicMessage_2eproto::scc_info_CustomData.base,}};

static void InitDefaultsCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::BaseCyclic::_Command_default_instance_;
    new (ptr) ::Kinova::Api::BaseCyclic::Command();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::BaseCyclic::Command::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Command =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCommand}, {
      &protobuf_BaseCyclic_2eproto::scc_info_ActuatorCommand.base,
      &protobuf_InterconnectCyclicMessage_2eproto::scc_info_Command.base,}};

static void InitDefaultsFeedback() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::BaseCyclic::_Feedback_default_instance_;
    new (ptr) ::Kinova::Api::BaseCyclic::Feedback();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::BaseCyclic::Feedback::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Feedback =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsFeedback}, {
      &protobuf_BaseCyclic_2eproto::scc_info_BaseFeedback.base,
      &protobuf_BaseCyclic_2eproto::scc_info_ActuatorFeedback.base,
      &protobuf_InterconnectCyclicMessage_2eproto::scc_info_Feedback.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ActuatorCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActuatorFeedback.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActuatorCustomData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BaseFeedback.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CustomData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Command.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Feedback.base);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCommand, command_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCommand, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCommand, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCommand, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCommand, torque_joint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCommand, current_motor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorFeedback, command_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorFeedback, status_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorFeedback, jitter_comm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorFeedback, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorFeedback, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorFeedback, torque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorFeedback, current_motor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorFeedback, voltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorFeedback, temperature_motor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorFeedback, temperature_core_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorFeedback, fault_bank_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorFeedback, fault_bank_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorFeedback, warning_bank_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorFeedback, warning_bank_b_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCustomData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCustomData, command_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCustomData, custom_data_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCustomData, custom_data_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCustomData, custom_data_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCustomData, custom_data_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCustomData, custom_data_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCustomData, custom_data_5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCustomData, custom_data_6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCustomData, custom_data_7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCustomData, custom_data_8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCustomData, custom_data_9_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCustomData, custom_data_10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCustomData, custom_data_11_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCustomData, custom_data_12_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCustomData, custom_data_13_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCustomData, custom_data_14_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::ActuatorCustomData, custom_data_15_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, active_state_connection_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, active_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, arm_voltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, arm_current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, temperature_cpu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, temperature_ambient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, imu_acceleration_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, imu_acceleration_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, imu_acceleration_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, imu_angular_velocity_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, imu_angular_velocity_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, imu_angular_velocity_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, tool_pose_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, tool_pose_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, tool_pose_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, tool_pose_theta_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, tool_pose_theta_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, tool_pose_theta_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, tool_twist_linear_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, tool_twist_linear_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, tool_twist_linear_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, tool_twist_angular_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, tool_twist_angular_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, tool_twist_angular_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, tool_external_wrench_force_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, tool_external_wrench_force_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, tool_external_wrench_force_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, tool_external_wrench_torque_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, tool_external_wrench_torque_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, tool_external_wrench_torque_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, fault_bank_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, fault_bank_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, warning_bank_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, warning_bank_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, commanded_tool_pose_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, commanded_tool_pose_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, commanded_tool_pose_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, commanded_tool_pose_theta_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, commanded_tool_pose_theta_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::BaseFeedback, commanded_tool_pose_theta_z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::CustomData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::CustomData, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::CustomData, custom_data_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::CustomData, custom_data_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::CustomData, custom_data_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::CustomData, custom_data_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::CustomData, custom_data_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::CustomData, custom_data_5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::CustomData, custom_data_6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::CustomData, custom_data_7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::CustomData, actuators_custom_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::CustomData, interconnect_custom_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::Command, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::Command, actuators_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::Command, interconnect_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::Feedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::Feedback, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::Feedback, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::Feedback, actuators_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::BaseCyclic::Feedback, interconnect_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Kinova::Api::BaseCyclic::ActuatorCommand)},
  { 11, -1, sizeof(::Kinova::Api::BaseCyclic::ActuatorFeedback)},
  { 30, -1, sizeof(::Kinova::Api::BaseCyclic::ActuatorCustomData)},
  { 52, -1, sizeof(::Kinova::Api::BaseCyclic::BaseFeedback)},
  { 97, -1, sizeof(::Kinova::Api::BaseCyclic::CustomData)},
  { 113, -1, sizeof(::Kinova::Api::BaseCyclic::Command)},
  { 121, -1, sizeof(::Kinova::Api::BaseCyclic::Feedback)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::BaseCyclic::_ActuatorCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::BaseCyclic::_ActuatorFeedback_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::BaseCyclic::_ActuatorCustomData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::BaseCyclic::_BaseFeedback_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::BaseCyclic::_CustomData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::BaseCyclic::_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::BaseCyclic::_Feedback_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "BaseCyclic.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020BaseCyclic.proto\022\025Kinova.Api.BaseCycli"
      "c\032\014Common.proto\032\037InterconnectCyclicMessa"
      "ge.proto\"\205\001\n\017ActuatorCommand\022\022\n\ncommand_"
      "id\030\001 \001(\007\022\r\n\005flags\030\002 \001(\007\022\020\n\010position\030\003 \001("
      "\002\022\020\n\010velocity\030\004 \001(\002\022\024\n\014torque_joint\030\005 \001("
      "\002\022\025\n\rcurrent_motor\030\006 \001(\002\"\276\002\n\020ActuatorFee"
      "dback\022\022\n\ncommand_id\030\001 \001(\007\022\024\n\014status_flag"
      "s\030\002 \001(\007\022\023\n\013jitter_comm\030\003 \001(\007\022\020\n\010position"
      "\030\004 \001(\002\022\020\n\010velocity\030\005 \001(\002\022\016\n\006torque\030\006 \001(\002"
      "\022\025\n\rcurrent_motor\030\007 \001(\002\022\017\n\007voltage\030\010 \001(\002"
      "\022\031\n\021temperature_motor\030\t \001(\002\022\030\n\020temperatu"
      "re_core\030\n \001(\002\022\024\n\014fault_bank_a\030\013 \001(\007\022\024\n\014f"
      "ault_bank_b\030\014 \001(\007\022\026\n\016warning_bank_a\030\r \001("
      "\007\022\026\n\016warning_bank_b\030\016 \001(\007\"\236\003\n\022ActuatorCu"
      "stomData\022\022\n\ncommand_id\030\001 \001(\007\022\025\n\rcustom_d"
      "ata_0\030\002 \001(\007\022\025\n\rcustom_data_1\030\003 \001(\007\022\025\n\rcu"
      "stom_data_2\030\004 \001(\007\022\025\n\rcustom_data_3\030\005 \001(\007"
      "\022\025\n\rcustom_data_4\030\006 \001(\007\022\025\n\rcustom_data_5"
      "\030\007 \001(\007\022\025\n\rcustom_data_6\030\010 \001(\007\022\025\n\rcustom_"
      "data_7\030\t \001(\007\022\025\n\rcustom_data_8\030\n \001(\007\022\025\n\rc"
      "ustom_data_9\030\013 \001(\007\022\026\n\016custom_data_10\030\014 \001"
      "(\007\022\026\n\016custom_data_11\030\r \001(\007\022\026\n\016custom_dat"
      "a_12\030\016 \001(\007\022\026\n\016custom_data_13\030\017 \001(\007\022\026\n\016cu"
      "stom_data_14\030\020 \001(\007\022\026\n\016custom_data_15\030\021 \001"
      "(\007\"\321\t\n\014BaseFeedback\022*\n\"active_state_conn"
      "ection_identifier\030\001 \001(\r\0221\n\014active_state\030"
      "\002 \001(\0162\033.Kinova.Api.Common.ArmState\022\023\n\013ar"
      "m_voltage\030\003 \001(\002\022\023\n\013arm_current\030\004 \001(\002\022\027\n\017"
      "temperature_cpu\030\005 \001(\002\022\033\n\023temperature_amb"
      "ient\030\006 \001(\002\022\032\n\022imu_acceleration_x\030\007 \001(\002\022\032"
      "\n\022imu_acceleration_y\030\010 \001(\002\022\032\n\022imu_accele"
      "ration_z\030\t \001(\002\022\036\n\026imu_angular_velocity_x"
      "\030\n \001(\002\022\036\n\026imu_angular_velocity_y\030\013 \001(\002\022\036"
      "\n\026imu_angular_velocity_z\030\014 \001(\002\022\023\n\013tool_p"
      "ose_x\030\r \001(\002\022\023\n\013tool_pose_y\030\016 \001(\002\022\023\n\013tool"
      "_pose_z\030\017 \001(\002\022\031\n\021tool_pose_theta_x\030\020 \001(\002"
      "\022\031\n\021tool_pose_theta_y\030\021 \001(\002\022\031\n\021tool_pose"
      "_theta_z\030\022 \001(\002\022\033\n\023tool_twist_linear_x\030\023 "
      "\001(\002\022\033\n\023tool_twist_linear_y\030\024 \001(\002\022\033\n\023tool"
      "_twist_linear_z\030\025 \001(\002\022\034\n\024tool_twist_angu"
      "lar_x\030\026 \001(\002\022\034\n\024tool_twist_angular_y\030\027 \001("
      "\002\022\034\n\024tool_twist_angular_z\030\030 \001(\002\022$\n\034tool_"
      "external_wrench_force_x\030\031 \001(\002\022$\n\034tool_ex"
      "ternal_wrench_force_y\030\032 \001(\002\022$\n\034tool_exte"
      "rnal_wrench_force_z\030\033 \001(\002\022%\n\035tool_extern"
      "al_wrench_torque_x\030\034 \001(\002\022%\n\035tool_externa"
      "l_wrench_torque_y\030\035 \001(\002\022%\n\035tool_external"
      "_wrench_torque_z\030\036 \001(\002\022\024\n\014fault_bank_a\030\037"
      " \001(\007\022\024\n\014fault_bank_b\030  \001(\007\022\026\n\016warning_ba"
      "nk_a\030! \001(\007\022\026\n\016warning_bank_b\030\" \001(\007\022\035\n\025co"
      "mmanded_tool_pose_x\030# \001(\002\022\035\n\025commanded_t"
      "ool_pose_y\030$ \001(\002\022\035\n\025commanded_tool_pose_"
      "z\030% \001(\002\022#\n\033commanded_tool_pose_theta_x\030&"
      " \001(\002\022#\n\033commanded_tool_pose_theta_y\030\' \001("
      "\002\022#\n\033commanded_tool_pose_theta_z\030( \001(\002\"\355"
      "\002\n\nCustomData\022\020\n\010frame_id\030\001 \001(\007\022\025\n\rcusto"
      "m_data_0\030\002 \001(\007\022\025\n\rcustom_data_1\030\003 \001(\007\022\025\n"
      "\rcustom_data_2\030\004 \001(\007\022\025\n\rcustom_data_3\030\005 "
      "\001(\007\022\025\n\rcustom_data_4\030\006 \001(\007\022\025\n\rcustom_dat"
      "a_5\030\007 \001(\007\022\025\n\rcustom_data_6\030\010 \001(\007\022\025\n\rcust"
      "om_data_7\030\t \001(\007\022H\n\025actuators_custom_data"
      "\030\n \003(\0132).Kinova.Api.BaseCyclic.ActuatorC"
      "ustomData\022K\n\030interconnect_custom_data\030\013 "
      "\001(\0132).Kinova.Api.InterconnectCyclic.Cust"
      "omData\"\224\001\n\007Command\022\020\n\010frame_id\030\001 \001(\007\0229\n\t"
      "actuators\030\002 \003(\0132&.Kinova.Api.BaseCyclic."
      "ActuatorCommand\022<\n\014interconnect\030\003 \001(\0132&."
      "Kinova.Api.InterconnectCyclic.Command\"\312\001"
      "\n\010Feedback\022\020\n\010frame_id\030\001 \001(\007\0221\n\004base\030\002 \001"
      "(\0132#.Kinova.Api.BaseCyclic.BaseFeedback\022"
      ":\n\tactuators\030\003 \003(\0132\'.Kinova.Api.BaseCycl"
      "ic.ActuatorFeedback\022=\n\014interconnect\030\004 \001("
      "\0132\'.Kinova.Api.InterconnectCyclic.Feedba"
      "ck*5\n\016ServiceVersion\022\016\n\nRESERVED_0\020\000\022\023\n\017"
      "CURRENT_VERSION\020\0012\315\002\n\nBaseCyclic\022J\n\007Refr"
      "esh\022\036.Kinova.Api.BaseCyclic.Command\032\037.Ki"
      "nova.Api.BaseCyclic.Feedback\022J\n\016RefreshC"
      "ommand\022\036.Kinova.Api.BaseCyclic.Command\032\030"
      ".Kinova.Api.Common.Empty\022L\n\017RefreshFeedb"
      "ack\022\030.Kinova.Api.Common.Empty\032\037.Kinova.A"
      "pi.BaseCyclic.Feedback\022Y\n\021RefreshCustomD"
      "ata\022!.Kinova.Api.BaseCyclic.CustomData\032!"
      ".Kinova.Api.BaseCyclic.CustomDataP\000P\001b\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3325);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BaseCyclic.proto", &protobuf_RegisterTypes);
  ::protobuf_Common_2eproto::AddDescriptors();
  ::protobuf_InterconnectCyclicMessage_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_BaseCyclic_2eproto
namespace Kinova {
namespace Api {
namespace BaseCyclic {
const ::google::protobuf::EnumDescriptor* ServiceVersion_descriptor() {
  protobuf_BaseCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseCyclic_2eproto::file_level_enum_descriptors[0];
}
bool ServiceVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ActuatorCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActuatorCommand::kCommandIdFieldNumber;
const int ActuatorCommand::kFlagsFieldNumber;
const int ActuatorCommand::kPositionFieldNumber;
const int ActuatorCommand::kVelocityFieldNumber;
const int ActuatorCommand::kTorqueJointFieldNumber;
const int ActuatorCommand::kCurrentMotorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActuatorCommand::ActuatorCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCyclic_2eproto::scc_info_ActuatorCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.BaseCyclic.ActuatorCommand)
}
ActuatorCommand::ActuatorCommand(const ActuatorCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&command_id_, &from.command_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_motor_) -
    reinterpret_cast<char*>(&command_id_)) + sizeof(current_motor_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.BaseCyclic.ActuatorCommand)
}

void ActuatorCommand::SharedCtor() {
  ::memset(&command_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_motor_) -
      reinterpret_cast<char*>(&command_id_)) + sizeof(current_motor_));
}

ActuatorCommand::~ActuatorCommand() {
  // @@protoc_insertion_point(destructor:Kinova.Api.BaseCyclic.ActuatorCommand)
  SharedDtor();
}

void ActuatorCommand::SharedDtor() {
}

void ActuatorCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActuatorCommand::descriptor() {
  ::protobuf_BaseCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCyclic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActuatorCommand& ActuatorCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCyclic_2eproto::scc_info_ActuatorCommand.base);
  return *internal_default_instance();
}


void ActuatorCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.BaseCyclic.ActuatorCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&command_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_motor_) -
      reinterpret_cast<char*>(&command_id_)) + sizeof(current_motor_));
  _internal_metadata_.Clear();
}

bool ActuatorCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.BaseCyclic.ActuatorCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 command_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &command_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float torque_joint = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &torque_joint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float current_motor = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_motor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.BaseCyclic.ActuatorCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.BaseCyclic.ActuatorCommand)
  return false;
#undef DO_
}

void ActuatorCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.BaseCyclic.ActuatorCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 command_id = 1;
  if (this->command_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->command_id(), output);
  }

  // fixed32 flags = 2;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->flags(), output);
  }

  // float position = 3;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->position(), output);
  }

  // float velocity = 4;
  if (this->velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->velocity(), output);
  }

  // float torque_joint = 5;
  if (this->torque_joint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->torque_joint(), output);
  }

  // float current_motor = 6;
  if (this->current_motor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->current_motor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.BaseCyclic.ActuatorCommand)
}

::google::protobuf::uint8* ActuatorCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.BaseCyclic.ActuatorCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 command_id = 1;
  if (this->command_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->command_id(), target);
  }

  // fixed32 flags = 2;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->flags(), target);
  }

  // float position = 3;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->position(), target);
  }

  // float velocity = 4;
  if (this->velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->velocity(), target);
  }

  // float torque_joint = 5;
  if (this->torque_joint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->torque_joint(), target);
  }

  // float current_motor = 6;
  if (this->current_motor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->current_motor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.BaseCyclic.ActuatorCommand)
  return target;
}

size_t ActuatorCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.BaseCyclic.ActuatorCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // fixed32 command_id = 1;
  if (this->command_id() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 flags = 2;
  if (this->flags() != 0) {
    total_size += 1 + 4;
  }

  // float position = 3;
  if (this->position() != 0) {
    total_size += 1 + 4;
  }

  // float velocity = 4;
  if (this->velocity() != 0) {
    total_size += 1 + 4;
  }

  // float torque_joint = 5;
  if (this->torque_joint() != 0) {
    total_size += 1 + 4;
  }

  // float current_motor = 6;
  if (this->current_motor() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActuatorCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.BaseCyclic.ActuatorCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ActuatorCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActuatorCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.BaseCyclic.ActuatorCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.BaseCyclic.ActuatorCommand)
    MergeFrom(*source);
  }
}

void ActuatorCommand::MergeFrom(const ActuatorCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.BaseCyclic.ActuatorCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.command_id() != 0) {
    set_command_id(from.command_id());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.velocity() != 0) {
    set_velocity(from.velocity());
  }
  if (from.torque_joint() != 0) {
    set_torque_joint(from.torque_joint());
  }
  if (from.current_motor() != 0) {
    set_current_motor(from.current_motor());
  }
}

void ActuatorCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.BaseCyclic.ActuatorCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActuatorCommand::CopyFrom(const ActuatorCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.BaseCyclic.ActuatorCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorCommand::IsInitialized() const {
  return true;
}

void ActuatorCommand::Swap(ActuatorCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActuatorCommand::InternalSwap(ActuatorCommand* other) {
  using std::swap;
  swap(command_id_, other->command_id_);
  swap(flags_, other->flags_);
  swap(position_, other->position_);
  swap(velocity_, other->velocity_);
  swap(torque_joint_, other->torque_joint_);
  swap(current_motor_, other->current_motor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActuatorCommand::GetMetadata() const {
  protobuf_BaseCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCyclic_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActuatorFeedback::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActuatorFeedback::kCommandIdFieldNumber;
const int ActuatorFeedback::kStatusFlagsFieldNumber;
const int ActuatorFeedback::kJitterCommFieldNumber;
const int ActuatorFeedback::kPositionFieldNumber;
const int ActuatorFeedback::kVelocityFieldNumber;
const int ActuatorFeedback::kTorqueFieldNumber;
const int ActuatorFeedback::kCurrentMotorFieldNumber;
const int ActuatorFeedback::kVoltageFieldNumber;
const int ActuatorFeedback::kTemperatureMotorFieldNumber;
const int ActuatorFeedback::kTemperatureCoreFieldNumber;
const int ActuatorFeedback::kFaultBankAFieldNumber;
const int ActuatorFeedback::kFaultBankBFieldNumber;
const int ActuatorFeedback::kWarningBankAFieldNumber;
const int ActuatorFeedback::kWarningBankBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActuatorFeedback::ActuatorFeedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCyclic_2eproto::scc_info_ActuatorFeedback.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.BaseCyclic.ActuatorFeedback)
}
ActuatorFeedback::ActuatorFeedback(const ActuatorFeedback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&command_id_, &from.command_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&warning_bank_b_) -
    reinterpret_cast<char*>(&command_id_)) + sizeof(warning_bank_b_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.BaseCyclic.ActuatorFeedback)
}

void ActuatorFeedback::SharedCtor() {
  ::memset(&command_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&warning_bank_b_) -
      reinterpret_cast<char*>(&command_id_)) + sizeof(warning_bank_b_));
}

ActuatorFeedback::~ActuatorFeedback() {
  // @@protoc_insertion_point(destructor:Kinova.Api.BaseCyclic.ActuatorFeedback)
  SharedDtor();
}

void ActuatorFeedback::SharedDtor() {
}

void ActuatorFeedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActuatorFeedback::descriptor() {
  ::protobuf_BaseCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCyclic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActuatorFeedback& ActuatorFeedback::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCyclic_2eproto::scc_info_ActuatorFeedback.base);
  return *internal_default_instance();
}


void ActuatorFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.BaseCyclic.ActuatorFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&command_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&warning_bank_b_) -
      reinterpret_cast<char*>(&command_id_)) + sizeof(warning_bank_b_));
  _internal_metadata_.Clear();
}

bool ActuatorFeedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.BaseCyclic.ActuatorFeedback)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 command_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &command_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 status_flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &status_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 jitter_comm = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &jitter_comm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float velocity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float torque = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float current_motor = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_motor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float voltage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float temperature_motor = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_motor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float temperature_core = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_core_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 fault_bank_a = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fault_bank_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 fault_bank_b = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fault_bank_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 warning_bank_a = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &warning_bank_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 warning_bank_b = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &warning_bank_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.BaseCyclic.ActuatorFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.BaseCyclic.ActuatorFeedback)
  return false;
#undef DO_
}

void ActuatorFeedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.BaseCyclic.ActuatorFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 command_id = 1;
  if (this->command_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->command_id(), output);
  }

  // fixed32 status_flags = 2;
  if (this->status_flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->status_flags(), output);
  }

  // fixed32 jitter_comm = 3;
  if (this->jitter_comm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->jitter_comm(), output);
  }

  // float position = 4;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->position(), output);
  }

  // float velocity = 5;
  if (this->velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->velocity(), output);
  }

  // float torque = 6;
  if (this->torque() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->torque(), output);
  }

  // float current_motor = 7;
  if (this->current_motor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->current_motor(), output);
  }

  // float voltage = 8;
  if (this->voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->voltage(), output);
  }

  // float temperature_motor = 9;
  if (this->temperature_motor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->temperature_motor(), output);
  }

  // float temperature_core = 10;
  if (this->temperature_core() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->temperature_core(), output);
  }

  // fixed32 fault_bank_a = 11;
  if (this->fault_bank_a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->fault_bank_a(), output);
  }

  // fixed32 fault_bank_b = 12;
  if (this->fault_bank_b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(12, this->fault_bank_b(), output);
  }

  // fixed32 warning_bank_a = 13;
  if (this->warning_bank_a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(13, this->warning_bank_a(), output);
  }

  // fixed32 warning_bank_b = 14;
  if (this->warning_bank_b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(14, this->warning_bank_b(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.BaseCyclic.ActuatorFeedback)
}

::google::protobuf::uint8* ActuatorFeedback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.BaseCyclic.ActuatorFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 command_id = 1;
  if (this->command_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->command_id(), target);
  }

  // fixed32 status_flags = 2;
  if (this->status_flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->status_flags(), target);
  }

  // fixed32 jitter_comm = 3;
  if (this->jitter_comm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->jitter_comm(), target);
  }

  // float position = 4;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->position(), target);
  }

  // float velocity = 5;
  if (this->velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->velocity(), target);
  }

  // float torque = 6;
  if (this->torque() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->torque(), target);
  }

  // float current_motor = 7;
  if (this->current_motor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->current_motor(), target);
  }

  // float voltage = 8;
  if (this->voltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->voltage(), target);
  }

  // float temperature_motor = 9;
  if (this->temperature_motor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->temperature_motor(), target);
  }

  // float temperature_core = 10;
  if (this->temperature_core() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->temperature_core(), target);
  }

  // fixed32 fault_bank_a = 11;
  if (this->fault_bank_a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(11, this->fault_bank_a(), target);
  }

  // fixed32 fault_bank_b = 12;
  if (this->fault_bank_b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(12, this->fault_bank_b(), target);
  }

  // fixed32 warning_bank_a = 13;
  if (this->warning_bank_a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(13, this->warning_bank_a(), target);
  }

  // fixed32 warning_bank_b = 14;
  if (this->warning_bank_b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(14, this->warning_bank_b(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.BaseCyclic.ActuatorFeedback)
  return target;
}

size_t ActuatorFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.BaseCyclic.ActuatorFeedback)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // fixed32 command_id = 1;
  if (this->command_id() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 status_flags = 2;
  if (this->status_flags() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 jitter_comm = 3;
  if (this->jitter_comm() != 0) {
    total_size += 1 + 4;
  }

  // float position = 4;
  if (this->position() != 0) {
    total_size += 1 + 4;
  }

  // float velocity = 5;
  if (this->velocity() != 0) {
    total_size += 1 + 4;
  }

  // float torque = 6;
  if (this->torque() != 0) {
    total_size += 1 + 4;
  }

  // float current_motor = 7;
  if (this->current_motor() != 0) {
    total_size += 1 + 4;
  }

  // float voltage = 8;
  if (this->voltage() != 0) {
    total_size += 1 + 4;
  }

  // float temperature_motor = 9;
  if (this->temperature_motor() != 0) {
    total_size += 1 + 4;
  }

  // float temperature_core = 10;
  if (this->temperature_core() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 fault_bank_a = 11;
  if (this->fault_bank_a() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 fault_bank_b = 12;
  if (this->fault_bank_b() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 warning_bank_a = 13;
  if (this->warning_bank_a() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 warning_bank_b = 14;
  if (this->warning_bank_b() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActuatorFeedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.BaseCyclic.ActuatorFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  const ActuatorFeedback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActuatorFeedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.BaseCyclic.ActuatorFeedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.BaseCyclic.ActuatorFeedback)
    MergeFrom(*source);
  }
}

void ActuatorFeedback::MergeFrom(const ActuatorFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.BaseCyclic.ActuatorFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.command_id() != 0) {
    set_command_id(from.command_id());
  }
  if (from.status_flags() != 0) {
    set_status_flags(from.status_flags());
  }
  if (from.jitter_comm() != 0) {
    set_jitter_comm(from.jitter_comm());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.velocity() != 0) {
    set_velocity(from.velocity());
  }
  if (from.torque() != 0) {
    set_torque(from.torque());
  }
  if (from.current_motor() != 0) {
    set_current_motor(from.current_motor());
  }
  if (from.voltage() != 0) {
    set_voltage(from.voltage());
  }
  if (from.temperature_motor() != 0) {
    set_temperature_motor(from.temperature_motor());
  }
  if (from.temperature_core() != 0) {
    set_temperature_core(from.temperature_core());
  }
  if (from.fault_bank_a() != 0) {
    set_fault_bank_a(from.fault_bank_a());
  }
  if (from.fault_bank_b() != 0) {
    set_fault_bank_b(from.fault_bank_b());
  }
  if (from.warning_bank_a() != 0) {
    set_warning_bank_a(from.warning_bank_a());
  }
  if (from.warning_bank_b() != 0) {
    set_warning_bank_b(from.warning_bank_b());
  }
}

void ActuatorFeedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.BaseCyclic.ActuatorFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActuatorFeedback::CopyFrom(const ActuatorFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.BaseCyclic.ActuatorFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorFeedback::IsInitialized() const {
  return true;
}

void ActuatorFeedback::Swap(ActuatorFeedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActuatorFeedback::InternalSwap(ActuatorFeedback* other) {
  using std::swap;
  swap(command_id_, other->command_id_);
  swap(status_flags_, other->status_flags_);
  swap(jitter_comm_, other->jitter_comm_);
  swap(position_, other->position_);
  swap(velocity_, other->velocity_);
  swap(torque_, other->torque_);
  swap(current_motor_, other->current_motor_);
  swap(voltage_, other->voltage_);
  swap(temperature_motor_, other->temperature_motor_);
  swap(temperature_core_, other->temperature_core_);
  swap(fault_bank_a_, other->fault_bank_a_);
  swap(fault_bank_b_, other->fault_bank_b_);
  swap(warning_bank_a_, other->warning_bank_a_);
  swap(warning_bank_b_, other->warning_bank_b_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActuatorFeedback::GetMetadata() const {
  protobuf_BaseCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCyclic_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActuatorCustomData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActuatorCustomData::kCommandIdFieldNumber;
const int ActuatorCustomData::kCustomData0FieldNumber;
const int ActuatorCustomData::kCustomData1FieldNumber;
const int ActuatorCustomData::kCustomData2FieldNumber;
const int ActuatorCustomData::kCustomData3FieldNumber;
const int ActuatorCustomData::kCustomData4FieldNumber;
const int ActuatorCustomData::kCustomData5FieldNumber;
const int ActuatorCustomData::kCustomData6FieldNumber;
const int ActuatorCustomData::kCustomData7FieldNumber;
const int ActuatorCustomData::kCustomData8FieldNumber;
const int ActuatorCustomData::kCustomData9FieldNumber;
const int ActuatorCustomData::kCustomData10FieldNumber;
const int ActuatorCustomData::kCustomData11FieldNumber;
const int ActuatorCustomData::kCustomData12FieldNumber;
const int ActuatorCustomData::kCustomData13FieldNumber;
const int ActuatorCustomData::kCustomData14FieldNumber;
const int ActuatorCustomData::kCustomData15FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActuatorCustomData::ActuatorCustomData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCyclic_2eproto::scc_info_ActuatorCustomData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.BaseCyclic.ActuatorCustomData)
}
ActuatorCustomData::ActuatorCustomData(const ActuatorCustomData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&command_id_, &from.command_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_data_15_) -
    reinterpret_cast<char*>(&command_id_)) + sizeof(custom_data_15_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.BaseCyclic.ActuatorCustomData)
}

void ActuatorCustomData::SharedCtor() {
  ::memset(&command_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_data_15_) -
      reinterpret_cast<char*>(&command_id_)) + sizeof(custom_data_15_));
}

ActuatorCustomData::~ActuatorCustomData() {
  // @@protoc_insertion_point(destructor:Kinova.Api.BaseCyclic.ActuatorCustomData)
  SharedDtor();
}

void ActuatorCustomData::SharedDtor() {
}

void ActuatorCustomData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActuatorCustomData::descriptor() {
  ::protobuf_BaseCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCyclic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActuatorCustomData& ActuatorCustomData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCyclic_2eproto::scc_info_ActuatorCustomData.base);
  return *internal_default_instance();
}


void ActuatorCustomData::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.BaseCyclic.ActuatorCustomData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&command_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_data_15_) -
      reinterpret_cast<char*>(&command_id_)) + sizeof(custom_data_15_));
  _internal_metadata_.Clear();
}

bool ActuatorCustomData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.BaseCyclic.ActuatorCustomData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 command_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &command_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_0 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_3 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_4 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_5 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_6 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_7 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_8 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_9 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_9_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_10 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_11 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_11_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_12 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_12_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_13 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_13_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_14 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_14_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_15 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_15_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.BaseCyclic.ActuatorCustomData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.BaseCyclic.ActuatorCustomData)
  return false;
#undef DO_
}

void ActuatorCustomData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.BaseCyclic.ActuatorCustomData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 command_id = 1;
  if (this->command_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->command_id(), output);
  }

  // fixed32 custom_data_0 = 2;
  if (this->custom_data_0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->custom_data_0(), output);
  }

  // fixed32 custom_data_1 = 3;
  if (this->custom_data_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->custom_data_1(), output);
  }

  // fixed32 custom_data_2 = 4;
  if (this->custom_data_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->custom_data_2(), output);
  }

  // fixed32 custom_data_3 = 5;
  if (this->custom_data_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->custom_data_3(), output);
  }

  // fixed32 custom_data_4 = 6;
  if (this->custom_data_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->custom_data_4(), output);
  }

  // fixed32 custom_data_5 = 7;
  if (this->custom_data_5() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->custom_data_5(), output);
  }

  // fixed32 custom_data_6 = 8;
  if (this->custom_data_6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->custom_data_6(), output);
  }

  // fixed32 custom_data_7 = 9;
  if (this->custom_data_7() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->custom_data_7(), output);
  }

  // fixed32 custom_data_8 = 10;
  if (this->custom_data_8() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->custom_data_8(), output);
  }

  // fixed32 custom_data_9 = 11;
  if (this->custom_data_9() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->custom_data_9(), output);
  }

  // fixed32 custom_data_10 = 12;
  if (this->custom_data_10() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(12, this->custom_data_10(), output);
  }

  // fixed32 custom_data_11 = 13;
  if (this->custom_data_11() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(13, this->custom_data_11(), output);
  }

  // fixed32 custom_data_12 = 14;
  if (this->custom_data_12() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(14, this->custom_data_12(), output);
  }

  // fixed32 custom_data_13 = 15;
  if (this->custom_data_13() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(15, this->custom_data_13(), output);
  }

  // fixed32 custom_data_14 = 16;
  if (this->custom_data_14() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(16, this->custom_data_14(), output);
  }

  // fixed32 custom_data_15 = 17;
  if (this->custom_data_15() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(17, this->custom_data_15(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.BaseCyclic.ActuatorCustomData)
}

::google::protobuf::uint8* ActuatorCustomData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.BaseCyclic.ActuatorCustomData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 command_id = 1;
  if (this->command_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->command_id(), target);
  }

  // fixed32 custom_data_0 = 2;
  if (this->custom_data_0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->custom_data_0(), target);
  }

  // fixed32 custom_data_1 = 3;
  if (this->custom_data_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->custom_data_1(), target);
  }

  // fixed32 custom_data_2 = 4;
  if (this->custom_data_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->custom_data_2(), target);
  }

  // fixed32 custom_data_3 = 5;
  if (this->custom_data_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->custom_data_3(), target);
  }

  // fixed32 custom_data_4 = 6;
  if (this->custom_data_4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->custom_data_4(), target);
  }

  // fixed32 custom_data_5 = 7;
  if (this->custom_data_5() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->custom_data_5(), target);
  }

  // fixed32 custom_data_6 = 8;
  if (this->custom_data_6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->custom_data_6(), target);
  }

  // fixed32 custom_data_7 = 9;
  if (this->custom_data_7() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->custom_data_7(), target);
  }

  // fixed32 custom_data_8 = 10;
  if (this->custom_data_8() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->custom_data_8(), target);
  }

  // fixed32 custom_data_9 = 11;
  if (this->custom_data_9() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(11, this->custom_data_9(), target);
  }

  // fixed32 custom_data_10 = 12;
  if (this->custom_data_10() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(12, this->custom_data_10(), target);
  }

  // fixed32 custom_data_11 = 13;
  if (this->custom_data_11() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(13, this->custom_data_11(), target);
  }

  // fixed32 custom_data_12 = 14;
  if (this->custom_data_12() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(14, this->custom_data_12(), target);
  }

  // fixed32 custom_data_13 = 15;
  if (this->custom_data_13() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(15, this->custom_data_13(), target);
  }

  // fixed32 custom_data_14 = 16;
  if (this->custom_data_14() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(16, this->custom_data_14(), target);
  }

  // fixed32 custom_data_15 = 17;
  if (this->custom_data_15() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(17, this->custom_data_15(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.BaseCyclic.ActuatorCustomData)
  return target;
}

size_t ActuatorCustomData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.BaseCyclic.ActuatorCustomData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // fixed32 command_id = 1;
  if (this->command_id() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_0 = 2;
  if (this->custom_data_0() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_1 = 3;
  if (this->custom_data_1() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_2 = 4;
  if (this->custom_data_2() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_3 = 5;
  if (this->custom_data_3() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_4 = 6;
  if (this->custom_data_4() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_5 = 7;
  if (this->custom_data_5() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_6 = 8;
  if (this->custom_data_6() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_7 = 9;
  if (this->custom_data_7() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_8 = 10;
  if (this->custom_data_8() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_9 = 11;
  if (this->custom_data_9() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_10 = 12;
  if (this->custom_data_10() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_11 = 13;
  if (this->custom_data_11() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_12 = 14;
  if (this->custom_data_12() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_13 = 15;
  if (this->custom_data_13() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_14 = 16;
  if (this->custom_data_14() != 0) {
    total_size += 2 + 4;
  }

  // fixed32 custom_data_15 = 17;
  if (this->custom_data_15() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActuatorCustomData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.BaseCyclic.ActuatorCustomData)
  GOOGLE_DCHECK_NE(&from, this);
  const ActuatorCustomData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActuatorCustomData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.BaseCyclic.ActuatorCustomData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.BaseCyclic.ActuatorCustomData)
    MergeFrom(*source);
  }
}

void ActuatorCustomData::MergeFrom(const ActuatorCustomData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.BaseCyclic.ActuatorCustomData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.command_id() != 0) {
    set_command_id(from.command_id());
  }
  if (from.custom_data_0() != 0) {
    set_custom_data_0(from.custom_data_0());
  }
  if (from.custom_data_1() != 0) {
    set_custom_data_1(from.custom_data_1());
  }
  if (from.custom_data_2() != 0) {
    set_custom_data_2(from.custom_data_2());
  }
  if (from.custom_data_3() != 0) {
    set_custom_data_3(from.custom_data_3());
  }
  if (from.custom_data_4() != 0) {
    set_custom_data_4(from.custom_data_4());
  }
  if (from.custom_data_5() != 0) {
    set_custom_data_5(from.custom_data_5());
  }
  if (from.custom_data_6() != 0) {
    set_custom_data_6(from.custom_data_6());
  }
  if (from.custom_data_7() != 0) {
    set_custom_data_7(from.custom_data_7());
  }
  if (from.custom_data_8() != 0) {
    set_custom_data_8(from.custom_data_8());
  }
  if (from.custom_data_9() != 0) {
    set_custom_data_9(from.custom_data_9());
  }
  if (from.custom_data_10() != 0) {
    set_custom_data_10(from.custom_data_10());
  }
  if (from.custom_data_11() != 0) {
    set_custom_data_11(from.custom_data_11());
  }
  if (from.custom_data_12() != 0) {
    set_custom_data_12(from.custom_data_12());
  }
  if (from.custom_data_13() != 0) {
    set_custom_data_13(from.custom_data_13());
  }
  if (from.custom_data_14() != 0) {
    set_custom_data_14(from.custom_data_14());
  }
  if (from.custom_data_15() != 0) {
    set_custom_data_15(from.custom_data_15());
  }
}

void ActuatorCustomData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.BaseCyclic.ActuatorCustomData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActuatorCustomData::CopyFrom(const ActuatorCustomData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.BaseCyclic.ActuatorCustomData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorCustomData::IsInitialized() const {
  return true;
}

void ActuatorCustomData::Swap(ActuatorCustomData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActuatorCustomData::InternalSwap(ActuatorCustomData* other) {
  using std::swap;
  swap(command_id_, other->command_id_);
  swap(custom_data_0_, other->custom_data_0_);
  swap(custom_data_1_, other->custom_data_1_);
  swap(custom_data_2_, other->custom_data_2_);
  swap(custom_data_3_, other->custom_data_3_);
  swap(custom_data_4_, other->custom_data_4_);
  swap(custom_data_5_, other->custom_data_5_);
  swap(custom_data_6_, other->custom_data_6_);
  swap(custom_data_7_, other->custom_data_7_);
  swap(custom_data_8_, other->custom_data_8_);
  swap(custom_data_9_, other->custom_data_9_);
  swap(custom_data_10_, other->custom_data_10_);
  swap(custom_data_11_, other->custom_data_11_);
  swap(custom_data_12_, other->custom_data_12_);
  swap(custom_data_13_, other->custom_data_13_);
  swap(custom_data_14_, other->custom_data_14_);
  swap(custom_data_15_, other->custom_data_15_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActuatorCustomData::GetMetadata() const {
  protobuf_BaseCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCyclic_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BaseFeedback::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseFeedback::kActiveStateConnectionIdentifierFieldNumber;
const int BaseFeedback::kActiveStateFieldNumber;
const int BaseFeedback::kArmVoltageFieldNumber;
const int BaseFeedback::kArmCurrentFieldNumber;
const int BaseFeedback::kTemperatureCpuFieldNumber;
const int BaseFeedback::kTemperatureAmbientFieldNumber;
const int BaseFeedback::kImuAccelerationXFieldNumber;
const int BaseFeedback::kImuAccelerationYFieldNumber;
const int BaseFeedback::kImuAccelerationZFieldNumber;
const int BaseFeedback::kImuAngularVelocityXFieldNumber;
const int BaseFeedback::kImuAngularVelocityYFieldNumber;
const int BaseFeedback::kImuAngularVelocityZFieldNumber;
const int BaseFeedback::kToolPoseXFieldNumber;
const int BaseFeedback::kToolPoseYFieldNumber;
const int BaseFeedback::kToolPoseZFieldNumber;
const int BaseFeedback::kToolPoseThetaXFieldNumber;
const int BaseFeedback::kToolPoseThetaYFieldNumber;
const int BaseFeedback::kToolPoseThetaZFieldNumber;
const int BaseFeedback::kToolTwistLinearXFieldNumber;
const int BaseFeedback::kToolTwistLinearYFieldNumber;
const int BaseFeedback::kToolTwistLinearZFieldNumber;
const int BaseFeedback::kToolTwistAngularXFieldNumber;
const int BaseFeedback::kToolTwistAngularYFieldNumber;
const int BaseFeedback::kToolTwistAngularZFieldNumber;
const int BaseFeedback::kToolExternalWrenchForceXFieldNumber;
const int BaseFeedback::kToolExternalWrenchForceYFieldNumber;
const int BaseFeedback::kToolExternalWrenchForceZFieldNumber;
const int BaseFeedback::kToolExternalWrenchTorqueXFieldNumber;
const int BaseFeedback::kToolExternalWrenchTorqueYFieldNumber;
const int BaseFeedback::kToolExternalWrenchTorqueZFieldNumber;
const int BaseFeedback::kFaultBankAFieldNumber;
const int BaseFeedback::kFaultBankBFieldNumber;
const int BaseFeedback::kWarningBankAFieldNumber;
const int BaseFeedback::kWarningBankBFieldNumber;
const int BaseFeedback::kCommandedToolPoseXFieldNumber;
const int BaseFeedback::kCommandedToolPoseYFieldNumber;
const int BaseFeedback::kCommandedToolPoseZFieldNumber;
const int BaseFeedback::kCommandedToolPoseThetaXFieldNumber;
const int BaseFeedback::kCommandedToolPoseThetaYFieldNumber;
const int BaseFeedback::kCommandedToolPoseThetaZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseFeedback::BaseFeedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCyclic_2eproto::scc_info_BaseFeedback.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.BaseCyclic.BaseFeedback)
}
BaseFeedback::BaseFeedback(const BaseFeedback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&active_state_connection_identifier_, &from.active_state_connection_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&commanded_tool_pose_theta_z_) -
    reinterpret_cast<char*>(&active_state_connection_identifier_)) + sizeof(commanded_tool_pose_theta_z_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.BaseCyclic.BaseFeedback)
}

void BaseFeedback::SharedCtor() {
  ::memset(&active_state_connection_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commanded_tool_pose_theta_z_) -
      reinterpret_cast<char*>(&active_state_connection_identifier_)) + sizeof(commanded_tool_pose_theta_z_));
}

BaseFeedback::~BaseFeedback() {
  // @@protoc_insertion_point(destructor:Kinova.Api.BaseCyclic.BaseFeedback)
  SharedDtor();
}

void BaseFeedback::SharedDtor() {
}

void BaseFeedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BaseFeedback::descriptor() {
  ::protobuf_BaseCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCyclic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BaseFeedback& BaseFeedback::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCyclic_2eproto::scc_info_BaseFeedback.base);
  return *internal_default_instance();
}


void BaseFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.BaseCyclic.BaseFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&active_state_connection_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commanded_tool_pose_theta_z_) -
      reinterpret_cast<char*>(&active_state_connection_identifier_)) + sizeof(commanded_tool_pose_theta_z_));
  _internal_metadata_.Clear();
}

bool BaseFeedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.BaseCyclic.BaseFeedback)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 active_state_connection_identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_state_connection_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.ArmState active_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_active_state(static_cast< ::Kinova::Api::Common::ArmState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float arm_voltage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &arm_voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float arm_current = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &arm_current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float temperature_cpu = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float temperature_ambient = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_ambient_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float imu_acceleration_x = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &imu_acceleration_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float imu_acceleration_y = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &imu_acceleration_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float imu_acceleration_z = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &imu_acceleration_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float imu_angular_velocity_x = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &imu_angular_velocity_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float imu_angular_velocity_y = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &imu_angular_velocity_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float imu_angular_velocity_z = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &imu_angular_velocity_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tool_pose_x = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tool_pose_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tool_pose_y = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tool_pose_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tool_pose_z = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tool_pose_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tool_pose_theta_x = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tool_pose_theta_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tool_pose_theta_y = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tool_pose_theta_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tool_pose_theta_z = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tool_pose_theta_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tool_twist_linear_x = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tool_twist_linear_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tool_twist_linear_y = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tool_twist_linear_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tool_twist_linear_z = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tool_twist_linear_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tool_twist_angular_x = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tool_twist_angular_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tool_twist_angular_y = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tool_twist_angular_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tool_twist_angular_z = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 197 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tool_twist_angular_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tool_external_wrench_force_x = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u /* 205 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tool_external_wrench_force_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tool_external_wrench_force_y = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 213 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tool_external_wrench_force_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tool_external_wrench_force_z = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u /* 221 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tool_external_wrench_force_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tool_external_wrench_torque_x = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u /* 229 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tool_external_wrench_torque_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tool_external_wrench_torque_y = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(237u /* 237 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tool_external_wrench_torque_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tool_external_wrench_torque_z = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(245u /* 245 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tool_external_wrench_torque_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 fault_bank_a = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(253u /* 253 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fault_bank_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 fault_bank_b = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(5u /* 261 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fault_bank_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 warning_bank_a = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 269 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &warning_bank_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 warning_bank_b = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 277 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &warning_bank_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float commanded_tool_pose_x = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 285 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &commanded_tool_pose_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float commanded_tool_pose_y = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 293 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &commanded_tool_pose_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float commanded_tool_pose_z = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 301 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &commanded_tool_pose_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float commanded_tool_pose_theta_x = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 309 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &commanded_tool_pose_theta_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float commanded_tool_pose_theta_y = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 317 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &commanded_tool_pose_theta_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float commanded_tool_pose_theta_z = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 325 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &commanded_tool_pose_theta_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.BaseCyclic.BaseFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.BaseCyclic.BaseFeedback)
  return false;
#undef DO_
}

void BaseFeedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.BaseCyclic.BaseFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 active_state_connection_identifier = 1;
  if (this->active_state_connection_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->active_state_connection_identifier(), output);
  }

  // .Kinova.Api.Common.ArmState active_state = 2;
  if (this->active_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->active_state(), output);
  }

  // float arm_voltage = 3;
  if (this->arm_voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->arm_voltage(), output);
  }

  // float arm_current = 4;
  if (this->arm_current() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->arm_current(), output);
  }

  // float temperature_cpu = 5;
  if (this->temperature_cpu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->temperature_cpu(), output);
  }

  // float temperature_ambient = 6;
  if (this->temperature_ambient() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->temperature_ambient(), output);
  }

  // float imu_acceleration_x = 7;
  if (this->imu_acceleration_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->imu_acceleration_x(), output);
  }

  // float imu_acceleration_y = 8;
  if (this->imu_acceleration_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->imu_acceleration_y(), output);
  }

  // float imu_acceleration_z = 9;
  if (this->imu_acceleration_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->imu_acceleration_z(), output);
  }

  // float imu_angular_velocity_x = 10;
  if (this->imu_angular_velocity_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->imu_angular_velocity_x(), output);
  }

  // float imu_angular_velocity_y = 11;
  if (this->imu_angular_velocity_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->imu_angular_velocity_y(), output);
  }

  // float imu_angular_velocity_z = 12;
  if (this->imu_angular_velocity_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->imu_angular_velocity_z(), output);
  }

  // float tool_pose_x = 13;
  if (this->tool_pose_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->tool_pose_x(), output);
  }

  // float tool_pose_y = 14;
  if (this->tool_pose_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->tool_pose_y(), output);
  }

  // float tool_pose_z = 15;
  if (this->tool_pose_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->tool_pose_z(), output);
  }

  // float tool_pose_theta_x = 16;
  if (this->tool_pose_theta_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->tool_pose_theta_x(), output);
  }

  // float tool_pose_theta_y = 17;
  if (this->tool_pose_theta_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->tool_pose_theta_y(), output);
  }

  // float tool_pose_theta_z = 18;
  if (this->tool_pose_theta_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->tool_pose_theta_z(), output);
  }

  // float tool_twist_linear_x = 19;
  if (this->tool_twist_linear_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->tool_twist_linear_x(), output);
  }

  // float tool_twist_linear_y = 20;
  if (this->tool_twist_linear_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->tool_twist_linear_y(), output);
  }

  // float tool_twist_linear_z = 21;
  if (this->tool_twist_linear_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->tool_twist_linear_z(), output);
  }

  // float tool_twist_angular_x = 22;
  if (this->tool_twist_angular_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->tool_twist_angular_x(), output);
  }

  // float tool_twist_angular_y = 23;
  if (this->tool_twist_angular_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->tool_twist_angular_y(), output);
  }

  // float tool_twist_angular_z = 24;
  if (this->tool_twist_angular_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->tool_twist_angular_z(), output);
  }

  // float tool_external_wrench_force_x = 25;
  if (this->tool_external_wrench_force_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->tool_external_wrench_force_x(), output);
  }

  // float tool_external_wrench_force_y = 26;
  if (this->tool_external_wrench_force_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->tool_external_wrench_force_y(), output);
  }

  // float tool_external_wrench_force_z = 27;
  if (this->tool_external_wrench_force_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->tool_external_wrench_force_z(), output);
  }

  // float tool_external_wrench_torque_x = 28;
  if (this->tool_external_wrench_torque_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->tool_external_wrench_torque_x(), output);
  }

  // float tool_external_wrench_torque_y = 29;
  if (this->tool_external_wrench_torque_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->tool_external_wrench_torque_y(), output);
  }

  // float tool_external_wrench_torque_z = 30;
  if (this->tool_external_wrench_torque_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->tool_external_wrench_torque_z(), output);
  }

  // fixed32 fault_bank_a = 31;
  if (this->fault_bank_a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(31, this->fault_bank_a(), output);
  }

  // fixed32 fault_bank_b = 32;
  if (this->fault_bank_b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(32, this->fault_bank_b(), output);
  }

  // fixed32 warning_bank_a = 33;
  if (this->warning_bank_a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(33, this->warning_bank_a(), output);
  }

  // fixed32 warning_bank_b = 34;
  if (this->warning_bank_b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(34, this->warning_bank_b(), output);
  }

  // float commanded_tool_pose_x = 35;
  if (this->commanded_tool_pose_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->commanded_tool_pose_x(), output);
  }

  // float commanded_tool_pose_y = 36;
  if (this->commanded_tool_pose_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->commanded_tool_pose_y(), output);
  }

  // float commanded_tool_pose_z = 37;
  if (this->commanded_tool_pose_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->commanded_tool_pose_z(), output);
  }

  // float commanded_tool_pose_theta_x = 38;
  if (this->commanded_tool_pose_theta_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->commanded_tool_pose_theta_x(), output);
  }

  // float commanded_tool_pose_theta_y = 39;
  if (this->commanded_tool_pose_theta_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->commanded_tool_pose_theta_y(), output);
  }

  // float commanded_tool_pose_theta_z = 40;
  if (this->commanded_tool_pose_theta_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->commanded_tool_pose_theta_z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.BaseCyclic.BaseFeedback)
}

::google::protobuf::uint8* BaseFeedback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.BaseCyclic.BaseFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 active_state_connection_identifier = 1;
  if (this->active_state_connection_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->active_state_connection_identifier(), target);
  }

  // .Kinova.Api.Common.ArmState active_state = 2;
  if (this->active_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->active_state(), target);
  }

  // float arm_voltage = 3;
  if (this->arm_voltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->arm_voltage(), target);
  }

  // float arm_current = 4;
  if (this->arm_current() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->arm_current(), target);
  }

  // float temperature_cpu = 5;
  if (this->temperature_cpu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->temperature_cpu(), target);
  }

  // float temperature_ambient = 6;
  if (this->temperature_ambient() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->temperature_ambient(), target);
  }

  // float imu_acceleration_x = 7;
  if (this->imu_acceleration_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->imu_acceleration_x(), target);
  }

  // float imu_acceleration_y = 8;
  if (this->imu_acceleration_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->imu_acceleration_y(), target);
  }

  // float imu_acceleration_z = 9;
  if (this->imu_acceleration_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->imu_acceleration_z(), target);
  }

  // float imu_angular_velocity_x = 10;
  if (this->imu_angular_velocity_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->imu_angular_velocity_x(), target);
  }

  // float imu_angular_velocity_y = 11;
  if (this->imu_angular_velocity_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->imu_angular_velocity_y(), target);
  }

  // float imu_angular_velocity_z = 12;
  if (this->imu_angular_velocity_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->imu_angular_velocity_z(), target);
  }

  // float tool_pose_x = 13;
  if (this->tool_pose_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->tool_pose_x(), target);
  }

  // float tool_pose_y = 14;
  if (this->tool_pose_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->tool_pose_y(), target);
  }

  // float tool_pose_z = 15;
  if (this->tool_pose_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->tool_pose_z(), target);
  }

  // float tool_pose_theta_x = 16;
  if (this->tool_pose_theta_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->tool_pose_theta_x(), target);
  }

  // float tool_pose_theta_y = 17;
  if (this->tool_pose_theta_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->tool_pose_theta_y(), target);
  }

  // float tool_pose_theta_z = 18;
  if (this->tool_pose_theta_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->tool_pose_theta_z(), target);
  }

  // float tool_twist_linear_x = 19;
  if (this->tool_twist_linear_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->tool_twist_linear_x(), target);
  }

  // float tool_twist_linear_y = 20;
  if (this->tool_twist_linear_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->tool_twist_linear_y(), target);
  }

  // float tool_twist_linear_z = 21;
  if (this->tool_twist_linear_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->tool_twist_linear_z(), target);
  }

  // float tool_twist_angular_x = 22;
  if (this->tool_twist_angular_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->tool_twist_angular_x(), target);
  }

  // float tool_twist_angular_y = 23;
  if (this->tool_twist_angular_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->tool_twist_angular_y(), target);
  }

  // float tool_twist_angular_z = 24;
  if (this->tool_twist_angular_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->tool_twist_angular_z(), target);
  }

  // float tool_external_wrench_force_x = 25;
  if (this->tool_external_wrench_force_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->tool_external_wrench_force_x(), target);
  }

  // float tool_external_wrench_force_y = 26;
  if (this->tool_external_wrench_force_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->tool_external_wrench_force_y(), target);
  }

  // float tool_external_wrench_force_z = 27;
  if (this->tool_external_wrench_force_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->tool_external_wrench_force_z(), target);
  }

  // float tool_external_wrench_torque_x = 28;
  if (this->tool_external_wrench_torque_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->tool_external_wrench_torque_x(), target);
  }

  // float tool_external_wrench_torque_y = 29;
  if (this->tool_external_wrench_torque_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->tool_external_wrench_torque_y(), target);
  }

  // float tool_external_wrench_torque_z = 30;
  if (this->tool_external_wrench_torque_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->tool_external_wrench_torque_z(), target);
  }

  // fixed32 fault_bank_a = 31;
  if (this->fault_bank_a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(31, this->fault_bank_a(), target);
  }

  // fixed32 fault_bank_b = 32;
  if (this->fault_bank_b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(32, this->fault_bank_b(), target);
  }

  // fixed32 warning_bank_a = 33;
  if (this->warning_bank_a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(33, this->warning_bank_a(), target);
  }

  // fixed32 warning_bank_b = 34;
  if (this->warning_bank_b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(34, this->warning_bank_b(), target);
  }

  // float commanded_tool_pose_x = 35;
  if (this->commanded_tool_pose_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->commanded_tool_pose_x(), target);
  }

  // float commanded_tool_pose_y = 36;
  if (this->commanded_tool_pose_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->commanded_tool_pose_y(), target);
  }

  // float commanded_tool_pose_z = 37;
  if (this->commanded_tool_pose_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(37, this->commanded_tool_pose_z(), target);
  }

  // float commanded_tool_pose_theta_x = 38;
  if (this->commanded_tool_pose_theta_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->commanded_tool_pose_theta_x(), target);
  }

  // float commanded_tool_pose_theta_y = 39;
  if (this->commanded_tool_pose_theta_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->commanded_tool_pose_theta_y(), target);
  }

  // float commanded_tool_pose_theta_z = 40;
  if (this->commanded_tool_pose_theta_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->commanded_tool_pose_theta_z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.BaseCyclic.BaseFeedback)
  return target;
}

size_t BaseFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.BaseCyclic.BaseFeedback)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 active_state_connection_identifier = 1;
  if (this->active_state_connection_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->active_state_connection_identifier());
  }

  // .Kinova.Api.Common.ArmState active_state = 2;
  if (this->active_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->active_state());
  }

  // float arm_voltage = 3;
  if (this->arm_voltage() != 0) {
    total_size += 1 + 4;
  }

  // float arm_current = 4;
  if (this->arm_current() != 0) {
    total_size += 1 + 4;
  }

  // float temperature_cpu = 5;
  if (this->temperature_cpu() != 0) {
    total_size += 1 + 4;
  }

  // float temperature_ambient = 6;
  if (this->temperature_ambient() != 0) {
    total_size += 1 + 4;
  }

  // float imu_acceleration_x = 7;
  if (this->imu_acceleration_x() != 0) {
    total_size += 1 + 4;
  }

  // float imu_acceleration_y = 8;
  if (this->imu_acceleration_y() != 0) {
    total_size += 1 + 4;
  }

  // float imu_acceleration_z = 9;
  if (this->imu_acceleration_z() != 0) {
    total_size += 1 + 4;
  }

  // float imu_angular_velocity_x = 10;
  if (this->imu_angular_velocity_x() != 0) {
    total_size += 1 + 4;
  }

  // float imu_angular_velocity_y = 11;
  if (this->imu_angular_velocity_y() != 0) {
    total_size += 1 + 4;
  }

  // float imu_angular_velocity_z = 12;
  if (this->imu_angular_velocity_z() != 0) {
    total_size += 1 + 4;
  }

  // float tool_pose_x = 13;
  if (this->tool_pose_x() != 0) {
    total_size += 1 + 4;
  }

  // float tool_pose_y = 14;
  if (this->tool_pose_y() != 0) {
    total_size += 1 + 4;
  }

  // float tool_pose_z = 15;
  if (this->tool_pose_z() != 0) {
    total_size += 1 + 4;
  }

  // float tool_pose_theta_x = 16;
  if (this->tool_pose_theta_x() != 0) {
    total_size += 2 + 4;
  }

  // float tool_pose_theta_y = 17;
  if (this->tool_pose_theta_y() != 0) {
    total_size += 2 + 4;
  }

  // float tool_pose_theta_z = 18;
  if (this->tool_pose_theta_z() != 0) {
    total_size += 2 + 4;
  }

  // float tool_twist_linear_x = 19;
  if (this->tool_twist_linear_x() != 0) {
    total_size += 2 + 4;
  }

  // float tool_twist_linear_y = 20;
  if (this->tool_twist_linear_y() != 0) {
    total_size += 2 + 4;
  }

  // float tool_twist_linear_z = 21;
  if (this->tool_twist_linear_z() != 0) {
    total_size += 2 + 4;
  }

  // float tool_twist_angular_x = 22;
  if (this->tool_twist_angular_x() != 0) {
    total_size += 2 + 4;
  }

  // float tool_twist_angular_y = 23;
  if (this->tool_twist_angular_y() != 0) {
    total_size += 2 + 4;
  }

  // float tool_twist_angular_z = 24;
  if (this->tool_twist_angular_z() != 0) {
    total_size += 2 + 4;
  }

  // float tool_external_wrench_force_x = 25;
  if (this->tool_external_wrench_force_x() != 0) {
    total_size += 2 + 4;
  }

  // float tool_external_wrench_force_y = 26;
  if (this->tool_external_wrench_force_y() != 0) {
    total_size += 2 + 4;
  }

  // float tool_external_wrench_force_z = 27;
  if (this->tool_external_wrench_force_z() != 0) {
    total_size += 2 + 4;
  }

  // float tool_external_wrench_torque_x = 28;
  if (this->tool_external_wrench_torque_x() != 0) {
    total_size += 2 + 4;
  }

  // float tool_external_wrench_torque_y = 29;
  if (this->tool_external_wrench_torque_y() != 0) {
    total_size += 2 + 4;
  }

  // float tool_external_wrench_torque_z = 30;
  if (this->tool_external_wrench_torque_z() != 0) {
    total_size += 2 + 4;
  }

  // fixed32 fault_bank_a = 31;
  if (this->fault_bank_a() != 0) {
    total_size += 2 + 4;
  }

  // fixed32 fault_bank_b = 32;
  if (this->fault_bank_b() != 0) {
    total_size += 2 + 4;
  }

  // fixed32 warning_bank_a = 33;
  if (this->warning_bank_a() != 0) {
    total_size += 2 + 4;
  }

  // fixed32 warning_bank_b = 34;
  if (this->warning_bank_b() != 0) {
    total_size += 2 + 4;
  }

  // float commanded_tool_pose_x = 35;
  if (this->commanded_tool_pose_x() != 0) {
    total_size += 2 + 4;
  }

  // float commanded_tool_pose_y = 36;
  if (this->commanded_tool_pose_y() != 0) {
    total_size += 2 + 4;
  }

  // float commanded_tool_pose_z = 37;
  if (this->commanded_tool_pose_z() != 0) {
    total_size += 2 + 4;
  }

  // float commanded_tool_pose_theta_x = 38;
  if (this->commanded_tool_pose_theta_x() != 0) {
    total_size += 2 + 4;
  }

  // float commanded_tool_pose_theta_y = 39;
  if (this->commanded_tool_pose_theta_y() != 0) {
    total_size += 2 + 4;
  }

  // float commanded_tool_pose_theta_z = 40;
  if (this->commanded_tool_pose_theta_z() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseFeedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.BaseCyclic.BaseFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseFeedback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseFeedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.BaseCyclic.BaseFeedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.BaseCyclic.BaseFeedback)
    MergeFrom(*source);
  }
}

void BaseFeedback::MergeFrom(const BaseFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.BaseCyclic.BaseFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.active_state_connection_identifier() != 0) {
    set_active_state_connection_identifier(from.active_state_connection_identifier());
  }
  if (from.active_state() != 0) {
    set_active_state(from.active_state());
  }
  if (from.arm_voltage() != 0) {
    set_arm_voltage(from.arm_voltage());
  }
  if (from.arm_current() != 0) {
    set_arm_current(from.arm_current());
  }
  if (from.temperature_cpu() != 0) {
    set_temperature_cpu(from.temperature_cpu());
  }
  if (from.temperature_ambient() != 0) {
    set_temperature_ambient(from.temperature_ambient());
  }
  if (from.imu_acceleration_x() != 0) {
    set_imu_acceleration_x(from.imu_acceleration_x());
  }
  if (from.imu_acceleration_y() != 0) {
    set_imu_acceleration_y(from.imu_acceleration_y());
  }
  if (from.imu_acceleration_z() != 0) {
    set_imu_acceleration_z(from.imu_acceleration_z());
  }
  if (from.imu_angular_velocity_x() != 0) {
    set_imu_angular_velocity_x(from.imu_angular_velocity_x());
  }
  if (from.imu_angular_velocity_y() != 0) {
    set_imu_angular_velocity_y(from.imu_angular_velocity_y());
  }
  if (from.imu_angular_velocity_z() != 0) {
    set_imu_angular_velocity_z(from.imu_angular_velocity_z());
  }
  if (from.tool_pose_x() != 0) {
    set_tool_pose_x(from.tool_pose_x());
  }
  if (from.tool_pose_y() != 0) {
    set_tool_pose_y(from.tool_pose_y());
  }
  if (from.tool_pose_z() != 0) {
    set_tool_pose_z(from.tool_pose_z());
  }
  if (from.tool_pose_theta_x() != 0) {
    set_tool_pose_theta_x(from.tool_pose_theta_x());
  }
  if (from.tool_pose_theta_y() != 0) {
    set_tool_pose_theta_y(from.tool_pose_theta_y());
  }
  if (from.tool_pose_theta_z() != 0) {
    set_tool_pose_theta_z(from.tool_pose_theta_z());
  }
  if (from.tool_twist_linear_x() != 0) {
    set_tool_twist_linear_x(from.tool_twist_linear_x());
  }
  if (from.tool_twist_linear_y() != 0) {
    set_tool_twist_linear_y(from.tool_twist_linear_y());
  }
  if (from.tool_twist_linear_z() != 0) {
    set_tool_twist_linear_z(from.tool_twist_linear_z());
  }
  if (from.tool_twist_angular_x() != 0) {
    set_tool_twist_angular_x(from.tool_twist_angular_x());
  }
  if (from.tool_twist_angular_y() != 0) {
    set_tool_twist_angular_y(from.tool_twist_angular_y());
  }
  if (from.tool_twist_angular_z() != 0) {
    set_tool_twist_angular_z(from.tool_twist_angular_z());
  }
  if (from.tool_external_wrench_force_x() != 0) {
    set_tool_external_wrench_force_x(from.tool_external_wrench_force_x());
  }
  if (from.tool_external_wrench_force_y() != 0) {
    set_tool_external_wrench_force_y(from.tool_external_wrench_force_y());
  }
  if (from.tool_external_wrench_force_z() != 0) {
    set_tool_external_wrench_force_z(from.tool_external_wrench_force_z());
  }
  if (from.tool_external_wrench_torque_x() != 0) {
    set_tool_external_wrench_torque_x(from.tool_external_wrench_torque_x());
  }
  if (from.tool_external_wrench_torque_y() != 0) {
    set_tool_external_wrench_torque_y(from.tool_external_wrench_torque_y());
  }
  if (from.tool_external_wrench_torque_z() != 0) {
    set_tool_external_wrench_torque_z(from.tool_external_wrench_torque_z());
  }
  if (from.fault_bank_a() != 0) {
    set_fault_bank_a(from.fault_bank_a());
  }
  if (from.fault_bank_b() != 0) {
    set_fault_bank_b(from.fault_bank_b());
  }
  if (from.warning_bank_a() != 0) {
    set_warning_bank_a(from.warning_bank_a());
  }
  if (from.warning_bank_b() != 0) {
    set_warning_bank_b(from.warning_bank_b());
  }
  if (from.commanded_tool_pose_x() != 0) {
    set_commanded_tool_pose_x(from.commanded_tool_pose_x());
  }
  if (from.commanded_tool_pose_y() != 0) {
    set_commanded_tool_pose_y(from.commanded_tool_pose_y());
  }
  if (from.commanded_tool_pose_z() != 0) {
    set_commanded_tool_pose_z(from.commanded_tool_pose_z());
  }
  if (from.commanded_tool_pose_theta_x() != 0) {
    set_commanded_tool_pose_theta_x(from.commanded_tool_pose_theta_x());
  }
  if (from.commanded_tool_pose_theta_y() != 0) {
    set_commanded_tool_pose_theta_y(from.commanded_tool_pose_theta_y());
  }
  if (from.commanded_tool_pose_theta_z() != 0) {
    set_commanded_tool_pose_theta_z(from.commanded_tool_pose_theta_z());
  }
}

void BaseFeedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.BaseCyclic.BaseFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseFeedback::CopyFrom(const BaseFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.BaseCyclic.BaseFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseFeedback::IsInitialized() const {
  return true;
}

void BaseFeedback::Swap(BaseFeedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseFeedback::InternalSwap(BaseFeedback* other) {
  using std::swap;
  swap(active_state_connection_identifier_, other->active_state_connection_identifier_);
  swap(active_state_, other->active_state_);
  swap(arm_voltage_, other->arm_voltage_);
  swap(arm_current_, other->arm_current_);
  swap(temperature_cpu_, other->temperature_cpu_);
  swap(temperature_ambient_, other->temperature_ambient_);
  swap(imu_acceleration_x_, other->imu_acceleration_x_);
  swap(imu_acceleration_y_, other->imu_acceleration_y_);
  swap(imu_acceleration_z_, other->imu_acceleration_z_);
  swap(imu_angular_velocity_x_, other->imu_angular_velocity_x_);
  swap(imu_angular_velocity_y_, other->imu_angular_velocity_y_);
  swap(imu_angular_velocity_z_, other->imu_angular_velocity_z_);
  swap(tool_pose_x_, other->tool_pose_x_);
  swap(tool_pose_y_, other->tool_pose_y_);
  swap(tool_pose_z_, other->tool_pose_z_);
  swap(tool_pose_theta_x_, other->tool_pose_theta_x_);
  swap(tool_pose_theta_y_, other->tool_pose_theta_y_);
  swap(tool_pose_theta_z_, other->tool_pose_theta_z_);
  swap(tool_twist_linear_x_, other->tool_twist_linear_x_);
  swap(tool_twist_linear_y_, other->tool_twist_linear_y_);
  swap(tool_twist_linear_z_, other->tool_twist_linear_z_);
  swap(tool_twist_angular_x_, other->tool_twist_angular_x_);
  swap(tool_twist_angular_y_, other->tool_twist_angular_y_);
  swap(tool_twist_angular_z_, other->tool_twist_angular_z_);
  swap(tool_external_wrench_force_x_, other->tool_external_wrench_force_x_);
  swap(tool_external_wrench_force_y_, other->tool_external_wrench_force_y_);
  swap(tool_external_wrench_force_z_, other->tool_external_wrench_force_z_);
  swap(tool_external_wrench_torque_x_, other->tool_external_wrench_torque_x_);
  swap(tool_external_wrench_torque_y_, other->tool_external_wrench_torque_y_);
  swap(tool_external_wrench_torque_z_, other->tool_external_wrench_torque_z_);
  swap(fault_bank_a_, other->fault_bank_a_);
  swap(fault_bank_b_, other->fault_bank_b_);
  swap(warning_bank_a_, other->warning_bank_a_);
  swap(warning_bank_b_, other->warning_bank_b_);
  swap(commanded_tool_pose_x_, other->commanded_tool_pose_x_);
  swap(commanded_tool_pose_y_, other->commanded_tool_pose_y_);
  swap(commanded_tool_pose_z_, other->commanded_tool_pose_z_);
  swap(commanded_tool_pose_theta_x_, other->commanded_tool_pose_theta_x_);
  swap(commanded_tool_pose_theta_y_, other->commanded_tool_pose_theta_y_);
  swap(commanded_tool_pose_theta_z_, other->commanded_tool_pose_theta_z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BaseFeedback::GetMetadata() const {
  protobuf_BaseCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCyclic_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CustomData::InitAsDefaultInstance() {
  ::Kinova::Api::BaseCyclic::_CustomData_default_instance_._instance.get_mutable()->interconnect_custom_data_ = const_cast< ::Kinova::Api::InterconnectCyclic::CustomData*>(
      ::Kinova::Api::InterconnectCyclic::CustomData::internal_default_instance());
}
void CustomData::clear_interconnect_custom_data() {
  if (GetArenaNoVirtual() == NULL && interconnect_custom_data_ != NULL) {
    delete interconnect_custom_data_;
  }
  interconnect_custom_data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomData::kFrameIdFieldNumber;
const int CustomData::kCustomData0FieldNumber;
const int CustomData::kCustomData1FieldNumber;
const int CustomData::kCustomData2FieldNumber;
const int CustomData::kCustomData3FieldNumber;
const int CustomData::kCustomData4FieldNumber;
const int CustomData::kCustomData5FieldNumber;
const int CustomData::kCustomData6FieldNumber;
const int CustomData::kCustomData7FieldNumber;
const int CustomData::kActuatorsCustomDataFieldNumber;
const int CustomData::kInterconnectCustomDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomData::CustomData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCyclic_2eproto::scc_info_CustomData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.BaseCyclic.CustomData)
}
CustomData::CustomData(const CustomData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      actuators_custom_data_(from.actuators_custom_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_interconnect_custom_data()) {
    interconnect_custom_data_ = new ::Kinova::Api::InterconnectCyclic::CustomData(*from.interconnect_custom_data_);
  } else {
    interconnect_custom_data_ = NULL;
  }
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_data_7_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(custom_data_7_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.BaseCyclic.CustomData)
}

void CustomData::SharedCtor() {
  ::memset(&interconnect_custom_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_data_7_) -
      reinterpret_cast<char*>(&interconnect_custom_data_)) + sizeof(custom_data_7_));
}

CustomData::~CustomData() {
  // @@protoc_insertion_point(destructor:Kinova.Api.BaseCyclic.CustomData)
  SharedDtor();
}

void CustomData::SharedDtor() {
  if (this != internal_default_instance()) delete interconnect_custom_data_;
}

void CustomData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CustomData::descriptor() {
  ::protobuf_BaseCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCyclic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomData& CustomData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCyclic_2eproto::scc_info_CustomData.base);
  return *internal_default_instance();
}


void CustomData::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.BaseCyclic.CustomData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actuators_custom_data_.Clear();
  if (GetArenaNoVirtual() == NULL && interconnect_custom_data_ != NULL) {
    delete interconnect_custom_data_;
  }
  interconnect_custom_data_ = NULL;
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_data_7_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(custom_data_7_));
  _internal_metadata_.Clear();
}

bool CustomData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.BaseCyclic.CustomData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 frame_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_0 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_3 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_4 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_5 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_6 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 custom_data_7 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_data_7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Kinova.Api.BaseCyclic.ActuatorCustomData actuators_custom_data = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_actuators_custom_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.InterconnectCyclic.CustomData interconnect_custom_data = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interconnect_custom_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.BaseCyclic.CustomData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.BaseCyclic.CustomData)
  return false;
#undef DO_
}

void CustomData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.BaseCyclic.CustomData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 frame_id = 1;
  if (this->frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->frame_id(), output);
  }

  // fixed32 custom_data_0 = 2;
  if (this->custom_data_0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->custom_data_0(), output);
  }

  // fixed32 custom_data_1 = 3;
  if (this->custom_data_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->custom_data_1(), output);
  }

  // fixed32 custom_data_2 = 4;
  if (this->custom_data_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->custom_data_2(), output);
  }

  // fixed32 custom_data_3 = 5;
  if (this->custom_data_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->custom_data_3(), output);
  }

  // fixed32 custom_data_4 = 6;
  if (this->custom_data_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->custom_data_4(), output);
  }

  // fixed32 custom_data_5 = 7;
  if (this->custom_data_5() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->custom_data_5(), output);
  }

  // fixed32 custom_data_6 = 8;
  if (this->custom_data_6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->custom_data_6(), output);
  }

  // fixed32 custom_data_7 = 9;
  if (this->custom_data_7() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->custom_data_7(), output);
  }

  // repeated .Kinova.Api.BaseCyclic.ActuatorCustomData actuators_custom_data = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actuators_custom_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->actuators_custom_data(static_cast<int>(i)),
      output);
  }

  // .Kinova.Api.InterconnectCyclic.CustomData interconnect_custom_data = 11;
  if (this->has_interconnect_custom_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_interconnect_custom_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.BaseCyclic.CustomData)
}

::google::protobuf::uint8* CustomData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.BaseCyclic.CustomData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 frame_id = 1;
  if (this->frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->frame_id(), target);
  }

  // fixed32 custom_data_0 = 2;
  if (this->custom_data_0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->custom_data_0(), target);
  }

  // fixed32 custom_data_1 = 3;
  if (this->custom_data_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->custom_data_1(), target);
  }

  // fixed32 custom_data_2 = 4;
  if (this->custom_data_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->custom_data_2(), target);
  }

  // fixed32 custom_data_3 = 5;
  if (this->custom_data_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->custom_data_3(), target);
  }

  // fixed32 custom_data_4 = 6;
  if (this->custom_data_4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->custom_data_4(), target);
  }

  // fixed32 custom_data_5 = 7;
  if (this->custom_data_5() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->custom_data_5(), target);
  }

  // fixed32 custom_data_6 = 8;
  if (this->custom_data_6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->custom_data_6(), target);
  }

  // fixed32 custom_data_7 = 9;
  if (this->custom_data_7() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->custom_data_7(), target);
  }

  // repeated .Kinova.Api.BaseCyclic.ActuatorCustomData actuators_custom_data = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actuators_custom_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->actuators_custom_data(static_cast<int>(i)), deterministic, target);
  }

  // .Kinova.Api.InterconnectCyclic.CustomData interconnect_custom_data = 11;
  if (this->has_interconnect_custom_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_interconnect_custom_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.BaseCyclic.CustomData)
  return target;
}

size_t CustomData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.BaseCyclic.CustomData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.BaseCyclic.ActuatorCustomData actuators_custom_data = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->actuators_custom_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->actuators_custom_data(static_cast<int>(i)));
    }
  }

  // .Kinova.Api.InterconnectCyclic.CustomData interconnect_custom_data = 11;
  if (this->has_interconnect_custom_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *interconnect_custom_data_);
  }

  // fixed32 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_0 = 2;
  if (this->custom_data_0() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_1 = 3;
  if (this->custom_data_1() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_2 = 4;
  if (this->custom_data_2() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_3 = 5;
  if (this->custom_data_3() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_4 = 6;
  if (this->custom_data_4() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_5 = 7;
  if (this->custom_data_5() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_6 = 8;
  if (this->custom_data_6() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 custom_data_7 = 9;
  if (this->custom_data_7() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.BaseCyclic.CustomData)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.BaseCyclic.CustomData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.BaseCyclic.CustomData)
    MergeFrom(*source);
  }
}

void CustomData::MergeFrom(const CustomData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.BaseCyclic.CustomData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actuators_custom_data_.MergeFrom(from.actuators_custom_data_);
  if (from.has_interconnect_custom_data()) {
    mutable_interconnect_custom_data()->::Kinova::Api::InterconnectCyclic::CustomData::MergeFrom(from.interconnect_custom_data());
  }
  if (from.frame_id() != 0) {
    set_frame_id(from.frame_id());
  }
  if (from.custom_data_0() != 0) {
    set_custom_data_0(from.custom_data_0());
  }
  if (from.custom_data_1() != 0) {
    set_custom_data_1(from.custom_data_1());
  }
  if (from.custom_data_2() != 0) {
    set_custom_data_2(from.custom_data_2());
  }
  if (from.custom_data_3() != 0) {
    set_custom_data_3(from.custom_data_3());
  }
  if (from.custom_data_4() != 0) {
    set_custom_data_4(from.custom_data_4());
  }
  if (from.custom_data_5() != 0) {
    set_custom_data_5(from.custom_data_5());
  }
  if (from.custom_data_6() != 0) {
    set_custom_data_6(from.custom_data_6());
  }
  if (from.custom_data_7() != 0) {
    set_custom_data_7(from.custom_data_7());
  }
}

void CustomData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.BaseCyclic.CustomData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomData::CopyFrom(const CustomData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.BaseCyclic.CustomData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomData::IsInitialized() const {
  return true;
}

void CustomData::Swap(CustomData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomData::InternalSwap(CustomData* other) {
  using std::swap;
  CastToBase(&actuators_custom_data_)->InternalSwap(CastToBase(&other->actuators_custom_data_));
  swap(interconnect_custom_data_, other->interconnect_custom_data_);
  swap(frame_id_, other->frame_id_);
  swap(custom_data_0_, other->custom_data_0_);
  swap(custom_data_1_, other->custom_data_1_);
  swap(custom_data_2_, other->custom_data_2_);
  swap(custom_data_3_, other->custom_data_3_);
  swap(custom_data_4_, other->custom_data_4_);
  swap(custom_data_5_, other->custom_data_5_);
  swap(custom_data_6_, other->custom_data_6_);
  swap(custom_data_7_, other->custom_data_7_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CustomData::GetMetadata() const {
  protobuf_BaseCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCyclic_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Command::InitAsDefaultInstance() {
  ::Kinova::Api::BaseCyclic::_Command_default_instance_._instance.get_mutable()->interconnect_ = const_cast< ::Kinova::Api::InterconnectCyclic::Command*>(
      ::Kinova::Api::InterconnectCyclic::Command::internal_default_instance());
}
void Command::clear_interconnect() {
  if (GetArenaNoVirtual() == NULL && interconnect_ != NULL) {
    delete interconnect_;
  }
  interconnect_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kFrameIdFieldNumber;
const int Command::kActuatorsFieldNumber;
const int Command::kInterconnectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCyclic_2eproto::scc_info_Command.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.BaseCyclic.Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      actuators_(from.actuators_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_interconnect()) {
    interconnect_ = new ::Kinova::Api::InterconnectCyclic::Command(*from.interconnect_);
  } else {
    interconnect_ = NULL;
  }
  frame_id_ = from.frame_id_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.BaseCyclic.Command)
}

void Command::SharedCtor() {
  ::memset(&interconnect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&interconnect_)) + sizeof(frame_id_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:Kinova.Api.BaseCyclic.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != internal_default_instance()) delete interconnect_;
}

void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  ::protobuf_BaseCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCyclic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Command& Command::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCyclic_2eproto::scc_info_Command.base);
  return *internal_default_instance();
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.BaseCyclic.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actuators_.Clear();
  if (GetArenaNoVirtual() == NULL && interconnect_ != NULL) {
    delete interconnect_;
  }
  interconnect_ = NULL;
  frame_id_ = 0u;
  _internal_metadata_.Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.BaseCyclic.Command)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 frame_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Kinova.Api.BaseCyclic.ActuatorCommand actuators = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_actuators()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.InterconnectCyclic.Command interconnect = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interconnect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.BaseCyclic.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.BaseCyclic.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.BaseCyclic.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 frame_id = 1;
  if (this->frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->frame_id(), output);
  }

  // repeated .Kinova.Api.BaseCyclic.ActuatorCommand actuators = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actuators_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->actuators(static_cast<int>(i)),
      output);
  }

  // .Kinova.Api.InterconnectCyclic.Command interconnect = 3;
  if (this->has_interconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_interconnect(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.BaseCyclic.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.BaseCyclic.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 frame_id = 1;
  if (this->frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->frame_id(), target);
  }

  // repeated .Kinova.Api.BaseCyclic.ActuatorCommand actuators = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actuators_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->actuators(static_cast<int>(i)), deterministic, target);
  }

  // .Kinova.Api.InterconnectCyclic.Command interconnect = 3;
  if (this->has_interconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_interconnect(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.BaseCyclic.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.BaseCyclic.Command)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.BaseCyclic.ActuatorCommand actuators = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->actuators_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->actuators(static_cast<int>(i)));
    }
  }

  // .Kinova.Api.InterconnectCyclic.Command interconnect = 3;
  if (this->has_interconnect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *interconnect_);
  }

  // fixed32 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.BaseCyclic.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.BaseCyclic.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.BaseCyclic.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.BaseCyclic.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actuators_.MergeFrom(from.actuators_);
  if (from.has_interconnect()) {
    mutable_interconnect()->::Kinova::Api::InterconnectCyclic::Command::MergeFrom(from.interconnect());
  }
  if (from.frame_id() != 0) {
    set_frame_id(from.frame_id());
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.BaseCyclic.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.BaseCyclic.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  using std::swap;
  CastToBase(&actuators_)->InternalSwap(CastToBase(&other->actuators_));
  swap(interconnect_, other->interconnect_);
  swap(frame_id_, other->frame_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_BaseCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCyclic_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Feedback::InitAsDefaultInstance() {
  ::Kinova::Api::BaseCyclic::_Feedback_default_instance_._instance.get_mutable()->base_ = const_cast< ::Kinova::Api::BaseCyclic::BaseFeedback*>(
      ::Kinova::Api::BaseCyclic::BaseFeedback::internal_default_instance());
  ::Kinova::Api::BaseCyclic::_Feedback_default_instance_._instance.get_mutable()->interconnect_ = const_cast< ::Kinova::Api::InterconnectCyclic::Feedback*>(
      ::Kinova::Api::InterconnectCyclic::Feedback::internal_default_instance());
}
void Feedback::clear_interconnect() {
  if (GetArenaNoVirtual() == NULL && interconnect_ != NULL) {
    delete interconnect_;
  }
  interconnect_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feedback::kFrameIdFieldNumber;
const int Feedback::kBaseFieldNumber;
const int Feedback::kActuatorsFieldNumber;
const int Feedback::kInterconnectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feedback::Feedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCyclic_2eproto::scc_info_Feedback.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.BaseCyclic.Feedback)
}
Feedback::Feedback(const Feedback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      actuators_(from.actuators_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::Kinova::Api::BaseCyclic::BaseFeedback(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_interconnect()) {
    interconnect_ = new ::Kinova::Api::InterconnectCyclic::Feedback(*from.interconnect_);
  } else {
    interconnect_ = NULL;
  }
  frame_id_ = from.frame_id_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.BaseCyclic.Feedback)
}

void Feedback::SharedCtor() {
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&base_)) + sizeof(frame_id_));
}

Feedback::~Feedback() {
  // @@protoc_insertion_point(destructor:Kinova.Api.BaseCyclic.Feedback)
  SharedDtor();
}

void Feedback::SharedDtor() {
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete interconnect_;
}

void Feedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Feedback::descriptor() {
  ::protobuf_BaseCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCyclic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Feedback& Feedback::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCyclic_2eproto::scc_info_Feedback.base);
  return *internal_default_instance();
}


void Feedback::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.BaseCyclic.Feedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actuators_.Clear();
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && interconnect_ != NULL) {
    delete interconnect_;
  }
  interconnect_ = NULL;
  frame_id_ = 0u;
  _internal_metadata_.Clear();
}

bool Feedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.BaseCyclic.Feedback)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 frame_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.BaseCyclic.BaseFeedback base = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Kinova.Api.BaseCyclic.ActuatorFeedback actuators = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_actuators()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.InterconnectCyclic.Feedback interconnect = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interconnect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.BaseCyclic.Feedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.BaseCyclic.Feedback)
  return false;
#undef DO_
}

void Feedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.BaseCyclic.Feedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 frame_id = 1;
  if (this->frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->frame_id(), output);
  }

  // .Kinova.Api.BaseCyclic.BaseFeedback base = 2;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_base(), output);
  }

  // repeated .Kinova.Api.BaseCyclic.ActuatorFeedback actuators = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actuators_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->actuators(static_cast<int>(i)),
      output);
  }

  // .Kinova.Api.InterconnectCyclic.Feedback interconnect = 4;
  if (this->has_interconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_interconnect(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.BaseCyclic.Feedback)
}

::google::protobuf::uint8* Feedback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.BaseCyclic.Feedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 frame_id = 1;
  if (this->frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->frame_id(), target);
  }

  // .Kinova.Api.BaseCyclic.BaseFeedback base = 2;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_base(), deterministic, target);
  }

  // repeated .Kinova.Api.BaseCyclic.ActuatorFeedback actuators = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actuators_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->actuators(static_cast<int>(i)), deterministic, target);
  }

  // .Kinova.Api.InterconnectCyclic.Feedback interconnect = 4;
  if (this->has_interconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_interconnect(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.BaseCyclic.Feedback)
  return target;
}

size_t Feedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.BaseCyclic.Feedback)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.BaseCyclic.ActuatorFeedback actuators = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->actuators_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->actuators(static_cast<int>(i)));
    }
  }

  // .Kinova.Api.BaseCyclic.BaseFeedback base = 2;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .Kinova.Api.InterconnectCyclic.Feedback interconnect = 4;
  if (this->has_interconnect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *interconnect_);
  }

  // fixed32 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Feedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.BaseCyclic.Feedback)
  GOOGLE_DCHECK_NE(&from, this);
  const Feedback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Feedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.BaseCyclic.Feedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.BaseCyclic.Feedback)
    MergeFrom(*source);
  }
}

void Feedback::MergeFrom(const Feedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.BaseCyclic.Feedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actuators_.MergeFrom(from.actuators_);
  if (from.has_base()) {
    mutable_base()->::Kinova::Api::BaseCyclic::BaseFeedback::MergeFrom(from.base());
  }
  if (from.has_interconnect()) {
    mutable_interconnect()->::Kinova::Api::InterconnectCyclic::Feedback::MergeFrom(from.interconnect());
  }
  if (from.frame_id() != 0) {
    set_frame_id(from.frame_id());
  }
}

void Feedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.BaseCyclic.Feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feedback::CopyFrom(const Feedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.BaseCyclic.Feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feedback::IsInitialized() const {
  return true;
}

void Feedback::Swap(Feedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feedback::InternalSwap(Feedback* other) {
  using std::swap;
  CastToBase(&actuators_)->InternalSwap(CastToBase(&other->actuators_));
  swap(base_, other->base_);
  swap(interconnect_, other->interconnect_);
  swap(frame_id_, other->frame_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Feedback::GetMetadata() const {
  protobuf_BaseCyclic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCyclic_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace BaseCyclic
}  // namespace Api
}  // namespace Kinova
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::BaseCyclic::ActuatorCommand* Arena::CreateMaybeMessage< ::Kinova::Api::BaseCyclic::ActuatorCommand >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::BaseCyclic::ActuatorCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::BaseCyclic::ActuatorFeedback* Arena::CreateMaybeMessage< ::Kinova::Api::BaseCyclic::ActuatorFeedback >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::BaseCyclic::ActuatorFeedback >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::BaseCyclic::ActuatorCustomData* Arena::CreateMaybeMessage< ::Kinova::Api::BaseCyclic::ActuatorCustomData >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::BaseCyclic::ActuatorCustomData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::BaseCyclic::BaseFeedback* Arena::CreateMaybeMessage< ::Kinova::Api::BaseCyclic::BaseFeedback >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::BaseCyclic::BaseFeedback >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::BaseCyclic::CustomData* Arena::CreateMaybeMessage< ::Kinova::Api::BaseCyclic::CustomData >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::BaseCyclic::CustomData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::BaseCyclic::Command* Arena::CreateMaybeMessage< ::Kinova::Api::BaseCyclic::Command >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::BaseCyclic::Command >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::BaseCyclic::Feedback* Arena::CreateMaybeMessage< ::Kinova::Api::BaseCyclic::Feedback >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::BaseCyclic::Feedback >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
