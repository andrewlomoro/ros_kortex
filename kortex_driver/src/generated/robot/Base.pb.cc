// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Base.proto

#include "Base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Base_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActionHandle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AngularWaypoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BluetoothEnableState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BridgeIdentifier;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BridgePortConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CartesianLimitation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CartesianSpeed;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChangeTwist;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChangeWrench;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ControllerEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ControllerHandle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Delay;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EmergencyStop;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Faults;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Finger;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FirmwareComponentVersion;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GpioCommand;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GpioEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GpioPinConfiguration;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IPv4Configuration;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_JointAngle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_JointLimitation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_JointSpeed;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_JointTorque;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_JointTrajectoryConstraint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MapGroupHandle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MapHandle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MappingHandle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NetworkHandle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Orientation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Pose;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Position;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PreComputedJointTrajectoryElement;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProtectionZoneHandle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RotationMatrixRow;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SequenceHandle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Snapshot;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Ssid;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Stop;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TrajectoryErrorElement;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TrajectoryInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TransformationRow;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Twist;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WifiEnableState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Wrench;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<13> scc_info_ConfigurationChangeNotification;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CartesianTrajectoryConstraint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CartesianWaypoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ChangeJointSpeeds;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ControllerElementHandle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ControllerElementState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ControllerState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GpioConfiguration;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Gripper;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GripperCommand;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_JointAngles;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_JointSpeeds;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PreComputedJointTrajectory;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RotationMatrix;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SafetyEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SequenceTask;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SequenceTaskHandle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrajectoryErrorReport;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TwistCommand;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UserProfile;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WaypointList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WifiConfiguration;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WifiInformation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WrenchCommand;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<20> scc_info_Action;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_BridgeConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ConstrainedJointAngles;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ConstrainedPose;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ControllerConfiguration;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Map;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MapElement;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Sequence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SwitchControlMapping;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Waypoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ZoneShape;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ControlModeNotification;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_MapEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_MapGroup;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Mapping;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_NetworkNotification;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ProtectionZone;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ServoingModeNotification;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_UserNotification;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_OperatingModeNotification;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_ProtectionZoneNotification;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_RobotEventNotification;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_SequenceInfoNotification;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_ActionNotification;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_ControllerNotification;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Base_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_MappingInfoNotification;
}  // namespace protobuf_Base_2eproto
namespace protobuf_Common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeviceHandle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SafetyHandle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserProfileHandle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Common_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Connection;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Common_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_SafetyNotification;
}  // namespace protobuf_Common_2eproto
namespace Kinova {
namespace Api {
namespace Base {
class GpioConfigurationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GpioConfigurationList>
      _instance;
} _GpioConfigurationList_default_instance_;
class GpioConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GpioConfiguration>
      _instance;
} _GpioConfiguration_default_instance_;
class GpioPinConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GpioPinConfiguration>
      _instance;
} _GpioPinConfiguration_default_instance_;
class FullUserProfileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FullUserProfile>
      _instance;
} _FullUserProfile_default_instance_;
class UserProfileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserProfile>
      _instance;
} _UserProfile_default_instance_;
class UserProfileListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserProfileList>
      _instance;
} _UserProfileList_default_instance_;
class UserListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserList>
      _instance;
} _UserList_default_instance_;
class PasswordChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PasswordChange>
      _instance;
} _PasswordChange_default_instance_;
class SequenceHandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SequenceHandle>
      _instance;
} _SequenceHandle_default_instance_;
class AdvancedSequenceHandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdvancedSequenceHandle>
      _instance;
} _AdvancedSequenceHandle_default_instance_;
class SequenceTaskHandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SequenceTaskHandle>
      _instance;
} _SequenceTaskHandle_default_instance_;
class SequenceTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SequenceTask>
      _instance;
} _SequenceTask_default_instance_;
class SequenceTasksDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SequenceTasks>
      _instance;
} _SequenceTasks_default_instance_;
class SequenceTasksConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SequenceTasksConfiguration>
      _instance;
} _SequenceTasksConfiguration_default_instance_;
class SequenceTaskConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SequenceTaskConfiguration>
      _instance;
} _SequenceTaskConfiguration_default_instance_;
class SequenceTasksRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SequenceTasksRange>
      _instance;
} _SequenceTasksRange_default_instance_;
class SequenceTasksPairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SequenceTasksPair>
      _instance;
} _SequenceTasksPair_default_instance_;
class SequenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sequence>
      _instance;
} _Sequence_default_instance_;
class SequenceListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SequenceList>
      _instance;
} _SequenceList_default_instance_;
class AppendActionInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppendActionInformation>
      _instance;
} _AppendActionInformation_default_instance_;
class ActionHandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionHandle>
      _instance;
} _ActionHandle_default_instance_;
class RequestedActionTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestedActionType>
      _instance;
} _RequestedActionType_default_instance_;
class ActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Action>
      _instance;
  const ::Kinova::Api::Base::TwistCommand* send_twist_command_;
  const ::Kinova::Api::Base::WrenchCommand* send_wrench_command_;
  const ::Kinova::Api::Base::JointSpeeds* send_joint_speeds_;
  const ::Kinova::Api::Base::ConstrainedPose* reach_pose_;
  const ::Kinova::Api::Base::ConstrainedJointAngles* reach_joint_angles_;
  int toggle_admittance_mode_;
  const ::Kinova::Api::Base::Snapshot* snapshot_;
  const ::Kinova::Api::Base::SwitchControlMapping* switch_control_mapping_;
  int navigate_joints_;
  int navigate_mappings_;
  const ::Kinova::Api::Base::ChangeTwist* change_twist_;
  const ::Kinova::Api::Base::ChangeJointSpeeds* change_joint_speeds_;
  const ::Kinova::Api::Base::ChangeWrench* change_wrench_;
  const ::Kinova::Api::Base::EmergencyStop* apply_emergency_stop_;
  const ::Kinova::Api::Base::Faults* clear_faults_;
  const ::Kinova::Api::Base::Delay* delay_;
  const ::Kinova::Api::Base::ActionHandle* execute_action_;
  const ::Kinova::Api::Base::GripperCommand* send_gripper_command_;
  const ::Kinova::Api::Base::GpioCommand* send_gpio_command_;
  const ::Kinova::Api::Base::Stop* stop_action_;
  const ::Kinova::Api::Base::PreComputedJointTrajectory* play_pre_computed_trajectory_;
  const ::Kinova::Api::Base::SequenceHandle* execute_sequence_;
  const ::Kinova::Api::Base::WaypointList* execute_waypoint_list_;
} _Action_default_instance_;
class SnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Snapshot>
      _instance;
} _Snapshot_default_instance_;
class SwitchControlMappingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SwitchControlMapping>
      _instance;
} _SwitchControlMapping_default_instance_;
class ChangeTwistDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangeTwist>
      _instance;
} _ChangeTwist_default_instance_;
class ChangeJointSpeedsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangeJointSpeeds>
      _instance;
} _ChangeJointSpeeds_default_instance_;
class ChangeWrenchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangeWrench>
      _instance;
} _ChangeWrench_default_instance_;
class EmergencyStopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EmergencyStop>
      _instance;
} _EmergencyStop_default_instance_;
class FaultsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Faults>
      _instance;
} _Faults_default_instance_;
class DelayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Delay>
      _instance;
} _Delay_default_instance_;
class StopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Stop>
      _instance;
} _Stop_default_instance_;
class ActionListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionList>
      _instance;
} _ActionList_default_instance_;
class TimeoutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Timeout>
      _instance;
} _Timeout_default_instance_;
class SsidDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssid>
      _instance;
} _Ssid_default_instance_;
class CommunicationInterfaceConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommunicationInterfaceConfiguration>
      _instance;
} _CommunicationInterfaceConfiguration_default_instance_;
class NetworkHandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkHandle>
      _instance;
} _NetworkHandle_default_instance_;
class IPv4ConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IPv4Configuration>
      _instance;
} _IPv4Configuration_default_instance_;
class IPv4InformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IPv4Information>
      _instance;
} _IPv4Information_default_instance_;
class FullIPv4ConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FullIPv4Configuration>
      _instance;
} _FullIPv4Configuration_default_instance_;
class WifiEnableStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WifiEnableState>
      _instance;
} _WifiEnableState_default_instance_;
class BluetoothEnableStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BluetoothEnableState>
      _instance;
} _BluetoothEnableState_default_instance_;
class RFConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RFConfiguration>
      _instance;
} _RFConfiguration_default_instance_;
class WifiInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WifiInformation>
      _instance;
} _WifiInformation_default_instance_;
class WifiInformationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WifiInformationList>
      _instance;
} _WifiInformationList_default_instance_;
class WifiConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WifiConfiguration>
      _instance;
} _WifiConfiguration_default_instance_;
class WifiConfigurationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WifiConfigurationList>
      _instance;
} _WifiConfigurationList_default_instance_;
class ProtectionZoneHandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtectionZoneHandle>
      _instance;
} _ProtectionZoneHandle_default_instance_;
class RotationMatrixRowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RotationMatrixRow>
      _instance;
} _RotationMatrixRow_default_instance_;
class RotationMatrixDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RotationMatrix>
      _instance;
} _RotationMatrix_default_instance_;
class PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point>
      _instance;
} _Point_default_instance_;
class ZoneShapeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ZoneShape>
      _instance;
} _ZoneShape_default_instance_;
class ProtectionZoneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtectionZone>
      _instance;
} _ProtectionZone_default_instance_;
class ProtectionZoneListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtectionZoneList>
      _instance;
} _ProtectionZoneList_default_instance_;
class CartesianLimitationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CartesianLimitation>
      _instance;
} _CartesianLimitation_default_instance_;
class TwistLimitationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TwistLimitation>
      _instance;
} _TwistLimitation_default_instance_;
class WrenchLimitationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WrenchLimitation>
      _instance;
} _WrenchLimitation_default_instance_;
class CartesianLimitationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CartesianLimitationList>
      _instance;
} _CartesianLimitationList_default_instance_;
class JointLimitationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JointLimitation>
      _instance;
} _JointLimitation_default_instance_;
class JointsLimitationsListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JointsLimitationsList>
      _instance;
} _JointsLimitationsList_default_instance_;
class QueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Query>
      _instance;
} _Query_default_instance_;
class ConfigurationChangeNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigurationChangeNotification>
      _instance;
  const ::Kinova::Api::Base::SequenceHandle* sequence_handle_;
  const ::Kinova::Api::Base::ActionHandle* action_handle_;
  const ::Kinova::Api::Base::MappingHandle* mapping_handle_;
  const ::Kinova::Api::Base::MapGroupHandle* map_group_handle_;
  const ::Kinova::Api::Base::MapHandle* map_handle_;
  const ::Kinova::Api::Common::UserProfileHandle* user_profile_handle_;
  const ::Kinova::Api::Base::ProtectionZoneHandle* protection_zone_handle_;
  const ::Kinova::Api::Common::SafetyHandle* safety_handle_;
  const ::Kinova::Api::Base::NetworkHandle* network_handle_;
  const ::Kinova::Api::Base::Ssid* ssid_;
  const ::Kinova::Api::Base::ControllerHandle* controller_handle_;
} _ConfigurationChangeNotification_default_instance_;
class MappingInfoNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MappingInfoNotification>
      _instance;
} _MappingInfoNotification_default_instance_;
class ControlModeInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlModeInformation>
      _instance;
} _ControlModeInformation_default_instance_;
class ControlModeNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlModeNotification>
      _instance;
} _ControlModeNotification_default_instance_;
class ServoingModeInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServoingModeInformation>
      _instance;
} _ServoingModeInformation_default_instance_;
class OperatingModeInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OperatingModeInformation>
      _instance;
} _OperatingModeInformation_default_instance_;
class OperatingModeNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OperatingModeNotification>
      _instance;
} _OperatingModeNotification_default_instance_;
class ServoingModeNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServoingModeNotification>
      _instance;
} _ServoingModeNotification_default_instance_;
class SequenceInfoNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SequenceInfoNotification>
      _instance;
} _SequenceInfoNotification_default_instance_;
class SequenceInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SequenceInformation>
      _instance;
} _SequenceInformation_default_instance_;
class ProtectionZoneNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtectionZoneNotification>
      _instance;
} _ProtectionZoneNotification_default_instance_;
class ProtectionZoneInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtectionZoneInformation>
      _instance;
} _ProtectionZoneInformation_default_instance_;
class UserNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserNotification>
      _instance;
} _UserNotification_default_instance_;
class ControllerHandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerHandle>
      _instance;
} _ControllerHandle_default_instance_;
class ControllerElementHandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerElementHandle>
      _instance;
  ::google::protobuf::uint32 button_;
  ::google::protobuf::uint32 axis_;
} _ControllerElementHandle_default_instance_;
class ControllerNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerNotification>
      _instance;
  const ::Kinova::Api::Base::ControllerState* controller_state_;
  const ::Kinova::Api::Base::ControllerElementState* controller_element_;
} _ControllerNotification_default_instance_;
class ControllerListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerList>
      _instance;
} _ControllerList_default_instance_;
class ControllerStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerState>
      _instance;
} _ControllerState_default_instance_;
class ControllerElementStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerElementState>
      _instance;
} _ControllerElementState_default_instance_;
class ActionNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionNotification>
      _instance;
} _ActionNotification_default_instance_;
class TrajectoryInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryInfo>
      _instance;
} _TrajectoryInfo_default_instance_;
class ActionExecutionStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionExecutionState>
      _instance;
} _ActionExecutionState_default_instance_;
class RobotEventNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotEventNotification>
      _instance;
} _RobotEventNotification_default_instance_;
class FactoryNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FactoryNotification>
      _instance;
} _FactoryNotification_default_instance_;
class NetworkNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkNotification>
      _instance;
} _NetworkNotification_default_instance_;
class ConfigurationChangeNotificationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigurationChangeNotificationList>
      _instance;
} _ConfigurationChangeNotificationList_default_instance_;
class MappingInfoNotificationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MappingInfoNotificationList>
      _instance;
} _MappingInfoNotificationList_default_instance_;
class ControlModeNotificationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlModeNotificationList>
      _instance;
} _ControlModeNotificationList_default_instance_;
class OperatingModeNotificationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OperatingModeNotificationList>
      _instance;
} _OperatingModeNotificationList_default_instance_;
class ServoingModeNotificationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServoingModeNotificationList>
      _instance;
} _ServoingModeNotificationList_default_instance_;
class SequenceInfoNotificationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SequenceInfoNotificationList>
      _instance;
} _SequenceInfoNotificationList_default_instance_;
class ProtectionZoneNotificationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtectionZoneNotificationList>
      _instance;
} _ProtectionZoneNotificationList_default_instance_;
class UserNotificationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserNotificationList>
      _instance;
} _UserNotificationList_default_instance_;
class SafetyNotificationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SafetyNotificationList>
      _instance;
} _SafetyNotificationList_default_instance_;
class ControllerNotificationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerNotificationList>
      _instance;
} _ControllerNotificationList_default_instance_;
class ActionNotificationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionNotificationList>
      _instance;
} _ActionNotificationList_default_instance_;
class RobotEventNotificationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotEventNotificationList>
      _instance;
} _RobotEventNotificationList_default_instance_;
class NetworkNotificationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkNotificationList>
      _instance;
} _NetworkNotificationList_default_instance_;
class MappingHandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MappingHandle>
      _instance;
} _MappingHandle_default_instance_;
class SafetyEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SafetyEvent>
      _instance;
} _SafetyEvent_default_instance_;
class ControllerEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerEvent>
      _instance;
} _ControllerEvent_default_instance_;
class GpioEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GpioEvent>
      _instance;
} _GpioEvent_default_instance_;
class MapEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapEvent>
      _instance;
  const ::Kinova::Api::Base::SafetyEvent* safety_event_;
  const ::Kinova::Api::Base::GpioEvent* gpio_event_;
  const ::Kinova::Api::Base::ControllerEvent* controller_event_;
} _MapEvent_default_instance_;
class MapElementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapElement>
      _instance;
} _MapElement_default_instance_;
class ActivateMapHandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActivateMapHandle>
      _instance;
} _ActivateMapHandle_default_instance_;
class MapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Map>
      _instance;
} _Map_default_instance_;
class MapHandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapHandle>
      _instance;
} _MapHandle_default_instance_;
class MapListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapList>
      _instance;
} _MapList_default_instance_;
class MapGroupHandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapGroupHandle>
      _instance;
} _MapGroupHandle_default_instance_;
class MapGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapGroup>
      _instance;
} _MapGroup_default_instance_;
class MapGroupListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapGroupList>
      _instance;
} _MapGroupList_default_instance_;
class MappingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mapping>
      _instance;
} _Mapping_default_instance_;
class MappingListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MappingList>
      _instance;
} _MappingList_default_instance_;
class TransformationMatrixDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransformationMatrix>
      _instance;
} _TransformationMatrix_default_instance_;
class TransformationRowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransformationRow>
      _instance;
} _TransformationRow_default_instance_;
class PoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pose>
      _instance;
} _Pose_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Position>
      _instance;
} _Position_default_instance_;
class OrientationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Orientation>
      _instance;
} _Orientation_default_instance_;
class CartesianSpeedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CartesianSpeed>
      _instance;
} _CartesianSpeed_default_instance_;
class CartesianTrajectoryConstraintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CartesianTrajectoryConstraint>
      _instance;
  const ::Kinova::Api::Base::CartesianSpeed* speed_;
  float duration_;
} _CartesianTrajectoryConstraint_default_instance_;
class JointTrajectoryConstraintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JointTrajectoryConstraint>
      _instance;
} _JointTrajectoryConstraint_default_instance_;
class WrenchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Wrench>
      _instance;
} _Wrench_default_instance_;
class TwistDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Twist>
      _instance;
} _Twist_default_instance_;
class AdmittanceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Admittance>
      _instance;
} _Admittance_default_instance_;
class ConstrainedPoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConstrainedPose>
      _instance;
} _ConstrainedPose_default_instance_;
class ConstrainedPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConstrainedPosition>
      _instance;
} _ConstrainedPosition_default_instance_;
class ConstrainedOrientationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConstrainedOrientation>
      _instance;
} _ConstrainedOrientation_default_instance_;
class WrenchCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WrenchCommand>
      _instance;
} _WrenchCommand_default_instance_;
class TwistCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TwistCommand>
      _instance;
} _TwistCommand_default_instance_;
class ConstrainedJointAnglesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConstrainedJointAngles>
      _instance;
} _ConstrainedJointAngles_default_instance_;
class ConstrainedJointAngleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConstrainedJointAngle>
      _instance;
} _ConstrainedJointAngle_default_instance_;
class JointAnglesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JointAngles>
      _instance;
} _JointAngles_default_instance_;
class JointAngleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JointAngle>
      _instance;
} _JointAngle_default_instance_;
class JointSpeedsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JointSpeeds>
      _instance;
} _JointSpeeds_default_instance_;
class JointSpeedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JointSpeed>
      _instance;
} _JointSpeed_default_instance_;
class JointTorquesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JointTorques>
      _instance;
} _JointTorques_default_instance_;
class JointTorqueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JointTorque>
      _instance;
} _JointTorque_default_instance_;
class GripperCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GripperCommand>
      _instance;
} _GripperCommand_default_instance_;
class GripperRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GripperRequest>
      _instance;
} _GripperRequest_default_instance_;
class GripperDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gripper>
      _instance;
} _Gripper_default_instance_;
class FingerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Finger>
      _instance;
} _Finger_default_instance_;
class GpioCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GpioCommand>
      _instance;
} _GpioCommand_default_instance_;
class SystemTimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemTime>
      _instance;
} _SystemTime_default_instance_;
class ControllerConfigurationModeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerConfigurationMode>
      _instance;
} _ControllerConfigurationMode_default_instance_;
class ControllerConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerConfiguration>
      _instance;
} _ControllerConfiguration_default_instance_;
class ControllerConfigurationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerConfigurationList>
      _instance;
} _ControllerConfigurationList_default_instance_;
class ActuatorInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActuatorInformation>
      _instance;
} _ActuatorInformation_default_instance_;
class ArmStateInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArmStateInformation>
      _instance;
} _ArmStateInformation_default_instance_;
class ArmStateNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArmStateNotification>
      _instance;
} _ArmStateNotification_default_instance_;
class CapSenseConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CapSenseConfig>
      _instance;
} _CapSenseConfig_default_instance_;
class BridgeListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BridgeList>
      _instance;
} _BridgeList_default_instance_;
class BridgeResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BridgeResult>
      _instance;
} _BridgeResult_default_instance_;
class BridgeIdentifierDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BridgeIdentifier>
      _instance;
} _BridgeIdentifier_default_instance_;
class BridgeConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BridgeConfig>
      _instance;
} _BridgeConfig_default_instance_;
class BridgePortConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BridgePortConfig>
      _instance;
} _BridgePortConfig_default_instance_;
class PreComputedJointTrajectoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PreComputedJointTrajectory>
      _instance;
} _PreComputedJointTrajectory_default_instance_;
class PreComputedJointTrajectoryElementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PreComputedJointTrajectoryElement>
      _instance;
} _PreComputedJointTrajectoryElement_default_instance_;
class TrajectoryErrorElementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryErrorElement>
      _instance;
} _TrajectoryErrorElement_default_instance_;
class TrajectoryErrorReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryErrorReport>
      _instance;
} _TrajectoryErrorReport_default_instance_;
class WaypointValidationReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WaypointValidationReport>
      _instance;
} _WaypointValidationReport_default_instance_;
class WaypointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Waypoint>
      _instance;
  const ::Kinova::Api::Base::AngularWaypoint* angular_waypoint_;
  const ::Kinova::Api::Base::CartesianWaypoint* cartesian_waypoint_;
} _Waypoint_default_instance_;
class AngularWaypointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AngularWaypoint>
      _instance;
} _AngularWaypoint_default_instance_;
class CartesianWaypointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CartesianWaypoint>
      _instance;
} _CartesianWaypoint_default_instance_;
class WaypointListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WaypointList>
      _instance;
} _WaypointList_default_instance_;
class KinematicTrajectoryConstraintsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KinematicTrajectoryConstraints>
      _instance;
} _KinematicTrajectoryConstraints_default_instance_;
class FirmwareBundleVersionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FirmwareBundleVersions>
      _instance;
} _FirmwareBundleVersions_default_instance_;
class FirmwareComponentVersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FirmwareComponentVersion>
      _instance;
} _FirmwareComponentVersion_default_instance_;
class IKDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IKData>
      _instance;
} _IKData_default_instance_;
}  // namespace Base
}  // namespace Api
}  // namespace Kinova
namespace protobuf_Base_2eproto {
static void InitDefaultsGpioConfigurationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_GpioConfigurationList_default_instance_;
    new (ptr) ::Kinova::Api::Base::GpioConfigurationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::GpioConfigurationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GpioConfigurationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGpioConfigurationList}, {
      &protobuf_Base_2eproto::scc_info_GpioConfiguration.base,}};

static void InitDefaultsGpioConfiguration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_GpioConfiguration_default_instance_;
    new (ptr) ::Kinova::Api::Base::GpioConfiguration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::GpioConfiguration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GpioConfiguration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGpioConfiguration}, {
      &protobuf_Base_2eproto::scc_info_GpioPinConfiguration.base,}};

static void InitDefaultsGpioPinConfiguration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_GpioPinConfiguration_default_instance_;
    new (ptr) ::Kinova::Api::Base::GpioPinConfiguration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::GpioPinConfiguration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GpioPinConfiguration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGpioPinConfiguration}, {}};

static void InitDefaultsFullUserProfile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_FullUserProfile_default_instance_;
    new (ptr) ::Kinova::Api::Base::FullUserProfile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::FullUserProfile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FullUserProfile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFullUserProfile}, {
      &protobuf_Base_2eproto::scc_info_UserProfile.base,}};

static void InitDefaultsUserProfile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_UserProfile_default_instance_;
    new (ptr) ::Kinova::Api::Base::UserProfile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::UserProfile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserProfile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserProfile}, {
      &protobuf_Common_2eproto::scc_info_UserProfileHandle.base,}};

static void InitDefaultsUserProfileList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_UserProfileList_default_instance_;
    new (ptr) ::Kinova::Api::Base::UserProfileList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::UserProfileList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserProfileList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserProfileList}, {
      &protobuf_Base_2eproto::scc_info_UserProfile.base,}};

static void InitDefaultsUserList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_UserList_default_instance_;
    new (ptr) ::Kinova::Api::Base::UserList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::UserList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserList}, {
      &protobuf_Common_2eproto::scc_info_UserProfileHandle.base,}};

static void InitDefaultsPasswordChange() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_PasswordChange_default_instance_;
    new (ptr) ::Kinova::Api::Base::PasswordChange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::PasswordChange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PasswordChange =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPasswordChange}, {
      &protobuf_Common_2eproto::scc_info_UserProfileHandle.base,}};

static void InitDefaultsSequenceHandle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_SequenceHandle_default_instance_;
    new (ptr) ::Kinova::Api::Base::SequenceHandle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::SequenceHandle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SequenceHandle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSequenceHandle}, {}};

static void InitDefaultsAdvancedSequenceHandle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_AdvancedSequenceHandle_default_instance_;
    new (ptr) ::Kinova::Api::Base::AdvancedSequenceHandle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::AdvancedSequenceHandle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AdvancedSequenceHandle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAdvancedSequenceHandle}, {
      &protobuf_Base_2eproto::scc_info_SequenceHandle.base,}};

static void InitDefaultsSequenceTaskHandle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_SequenceTaskHandle_default_instance_;
    new (ptr) ::Kinova::Api::Base::SequenceTaskHandle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::SequenceTaskHandle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SequenceTaskHandle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSequenceTaskHandle}, {
      &protobuf_Base_2eproto::scc_info_SequenceHandle.base,}};

static void InitDefaultsSequenceTask() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_SequenceTask_default_instance_;
    new (ptr) ::Kinova::Api::Base::SequenceTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::SequenceTask::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SequenceTask =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSequenceTask}, {
      &protobuf_Base_2eproto::scc_info_Action.base,}};

static void InitDefaultsSequenceTasks() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_SequenceTasks_default_instance_;
    new (ptr) ::Kinova::Api::Base::SequenceTasks();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::SequenceTasks::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SequenceTasks =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSequenceTasks}, {
      &protobuf_Base_2eproto::scc_info_SequenceTask.base,}};

static void InitDefaultsSequenceTasksConfiguration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_SequenceTasksConfiguration_default_instance_;
    new (ptr) ::Kinova::Api::Base::SequenceTasksConfiguration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::SequenceTasksConfiguration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SequenceTasksConfiguration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSequenceTasksConfiguration}, {
      &protobuf_Base_2eproto::scc_info_SequenceTaskHandle.base,
      &protobuf_Base_2eproto::scc_info_SequenceTask.base,}};

static void InitDefaultsSequenceTaskConfiguration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_SequenceTaskConfiguration_default_instance_;
    new (ptr) ::Kinova::Api::Base::SequenceTaskConfiguration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::SequenceTaskConfiguration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SequenceTaskConfiguration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSequenceTaskConfiguration}, {
      &protobuf_Base_2eproto::scc_info_SequenceTaskHandle.base,
      &protobuf_Base_2eproto::scc_info_SequenceTask.base,}};

static void InitDefaultsSequenceTasksRange() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_SequenceTasksRange_default_instance_;
    new (ptr) ::Kinova::Api::Base::SequenceTasksRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::SequenceTasksRange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SequenceTasksRange =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSequenceTasksRange}, {}};

static void InitDefaultsSequenceTasksPair() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_SequenceTasksPair_default_instance_;
    new (ptr) ::Kinova::Api::Base::SequenceTasksPair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::SequenceTasksPair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SequenceTasksPair =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSequenceTasksPair}, {
      &protobuf_Base_2eproto::scc_info_SequenceHandle.base,}};

static void InitDefaultsSequence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Sequence_default_instance_;
    new (ptr) ::Kinova::Api::Base::Sequence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Sequence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Sequence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSequence}, {
      &protobuf_Base_2eproto::scc_info_SequenceHandle.base,
      &protobuf_Base_2eproto::scc_info_SequenceTask.base,}};

static void InitDefaultsSequenceList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_SequenceList_default_instance_;
    new (ptr) ::Kinova::Api::Base::SequenceList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::SequenceList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SequenceList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSequenceList}, {
      &protobuf_Base_2eproto::scc_info_Sequence.base,}};

static void InitDefaultsAppendActionInformation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_AppendActionInformation_default_instance_;
    new (ptr) ::Kinova::Api::Base::AppendActionInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::AppendActionInformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AppendActionInformation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAppendActionInformation}, {
      &protobuf_Base_2eproto::scc_info_SequenceHandle.base,
      &protobuf_Base_2eproto::scc_info_Action.base,}};

static void InitDefaultsActionHandle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ActionHandle_default_instance_;
    new (ptr) ::Kinova::Api::Base::ActionHandle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ActionHandle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActionHandle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActionHandle}, {}};

static void InitDefaultsRequestedActionType() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_RequestedActionType_default_instance_;
    new (ptr) ::Kinova::Api::Base::RequestedActionType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::RequestedActionType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestedActionType =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestedActionType}, {}};

static void InitDefaultsAction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Action_default_instance_;
    new (ptr) ::Kinova::Api::Base::Action();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Action::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<20> scc_info_Action =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 20, InitDefaultsAction}, {
      &protobuf_Base_2eproto::scc_info_ActionHandle.base,
      &protobuf_Base_2eproto::scc_info_TwistCommand.base,
      &protobuf_Base_2eproto::scc_info_WrenchCommand.base,
      &protobuf_Base_2eproto::scc_info_JointSpeeds.base,
      &protobuf_Base_2eproto::scc_info_ConstrainedPose.base,
      &protobuf_Base_2eproto::scc_info_ConstrainedJointAngles.base,
      &protobuf_Base_2eproto::scc_info_Snapshot.base,
      &protobuf_Base_2eproto::scc_info_SwitchControlMapping.base,
      &protobuf_Base_2eproto::scc_info_ChangeTwist.base,
      &protobuf_Base_2eproto::scc_info_ChangeJointSpeeds.base,
      &protobuf_Base_2eproto::scc_info_ChangeWrench.base,
      &protobuf_Base_2eproto::scc_info_EmergencyStop.base,
      &protobuf_Base_2eproto::scc_info_Faults.base,
      &protobuf_Base_2eproto::scc_info_Delay.base,
      &protobuf_Base_2eproto::scc_info_GripperCommand.base,
      &protobuf_Base_2eproto::scc_info_GpioCommand.base,
      &protobuf_Base_2eproto::scc_info_Stop.base,
      &protobuf_Base_2eproto::scc_info_PreComputedJointTrajectory.base,
      &protobuf_Base_2eproto::scc_info_SequenceHandle.base,
      &protobuf_Base_2eproto::scc_info_WaypointList.base,}};

static void InitDefaultsSnapshot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Snapshot_default_instance_;
    new (ptr) ::Kinova::Api::Base::Snapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Snapshot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Snapshot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSnapshot}, {}};

static void InitDefaultsSwitchControlMapping() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_SwitchControlMapping_default_instance_;
    new (ptr) ::Kinova::Api::Base::SwitchControlMapping();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::SwitchControlMapping::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SwitchControlMapping =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSwitchControlMapping}, {
      &protobuf_Base_2eproto::scc_info_MapGroupHandle.base,
      &protobuf_Base_2eproto::scc_info_MapHandle.base,}};

static void InitDefaultsChangeTwist() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ChangeTwist_default_instance_;
    new (ptr) ::Kinova::Api::Base::ChangeTwist();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ChangeTwist::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChangeTwist =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChangeTwist}, {}};

static void InitDefaultsChangeJointSpeeds() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ChangeJointSpeeds_default_instance_;
    new (ptr) ::Kinova::Api::Base::ChangeJointSpeeds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ChangeJointSpeeds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ChangeJointSpeeds =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChangeJointSpeeds}, {
      &protobuf_Base_2eproto::scc_info_JointSpeeds.base,}};

static void InitDefaultsChangeWrench() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ChangeWrench_default_instance_;
    new (ptr) ::Kinova::Api::Base::ChangeWrench();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ChangeWrench::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChangeWrench =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChangeWrench}, {}};

static void InitDefaultsEmergencyStop() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_EmergencyStop_default_instance_;
    new (ptr) ::Kinova::Api::Base::EmergencyStop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::EmergencyStop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EmergencyStop =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEmergencyStop}, {}};

static void InitDefaultsFaults() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Faults_default_instance_;
    new (ptr) ::Kinova::Api::Base::Faults();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Faults::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Faults =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFaults}, {}};

static void InitDefaultsDelay() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Delay_default_instance_;
    new (ptr) ::Kinova::Api::Base::Delay();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Delay::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Delay =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDelay}, {}};

static void InitDefaultsStop() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Stop_default_instance_;
    new (ptr) ::Kinova::Api::Base::Stop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Stop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Stop =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStop}, {}};

static void InitDefaultsActionList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ActionList_default_instance_;
    new (ptr) ::Kinova::Api::Base::ActionList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ActionList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ActionList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsActionList}, {
      &protobuf_Base_2eproto::scc_info_Action.base,}};

static void InitDefaultsTimeout() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Timeout_default_instance_;
    new (ptr) ::Kinova::Api::Base::Timeout();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Timeout::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Timeout =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTimeout}, {}};

static void InitDefaultsSsid() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Ssid_default_instance_;
    new (ptr) ::Kinova::Api::Base::Ssid();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Ssid::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Ssid =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSsid}, {}};

static void InitDefaultsCommunicationInterfaceConfiguration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_CommunicationInterfaceConfiguration_default_instance_;
    new (ptr) ::Kinova::Api::Base::CommunicationInterfaceConfiguration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::CommunicationInterfaceConfiguration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CommunicationInterfaceConfiguration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommunicationInterfaceConfiguration}, {}};

static void InitDefaultsNetworkHandle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_NetworkHandle_default_instance_;
    new (ptr) ::Kinova::Api::Base::NetworkHandle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::NetworkHandle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NetworkHandle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNetworkHandle}, {}};

static void InitDefaultsIPv4Configuration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_IPv4Configuration_default_instance_;
    new (ptr) ::Kinova::Api::Base::IPv4Configuration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::IPv4Configuration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IPv4Configuration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIPv4Configuration}, {}};

static void InitDefaultsIPv4Information() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_IPv4Information_default_instance_;
    new (ptr) ::Kinova::Api::Base::IPv4Information();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::IPv4Information::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IPv4Information =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIPv4Information}, {}};

static void InitDefaultsFullIPv4Configuration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_FullIPv4Configuration_default_instance_;
    new (ptr) ::Kinova::Api::Base::FullIPv4Configuration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::FullIPv4Configuration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FullIPv4Configuration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFullIPv4Configuration}, {
      &protobuf_Base_2eproto::scc_info_NetworkHandle.base,
      &protobuf_Base_2eproto::scc_info_IPv4Configuration.base,}};

static void InitDefaultsWifiEnableState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_WifiEnableState_default_instance_;
    new (ptr) ::Kinova::Api::Base::WifiEnableState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::WifiEnableState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WifiEnableState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWifiEnableState}, {}};

static void InitDefaultsBluetoothEnableState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_BluetoothEnableState_default_instance_;
    new (ptr) ::Kinova::Api::Base::BluetoothEnableState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::BluetoothEnableState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BluetoothEnableState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBluetoothEnableState}, {}};

static void InitDefaultsRFConfiguration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_RFConfiguration_default_instance_;
    new (ptr) ::Kinova::Api::Base::RFConfiguration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::RFConfiguration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RFConfiguration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRFConfiguration}, {
      &protobuf_Base_2eproto::scc_info_WifiEnableState.base,
      &protobuf_Base_2eproto::scc_info_BluetoothEnableState.base,}};

static void InitDefaultsWifiInformation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_WifiInformation_default_instance_;
    new (ptr) ::Kinova::Api::Base::WifiInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::WifiInformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WifiInformation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWifiInformation}, {
      &protobuf_Base_2eproto::scc_info_Ssid.base,}};

static void InitDefaultsWifiInformationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_WifiInformationList_default_instance_;
    new (ptr) ::Kinova::Api::Base::WifiInformationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::WifiInformationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WifiInformationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWifiInformationList}, {
      &protobuf_Base_2eproto::scc_info_WifiInformation.base,}};

static void InitDefaultsWifiConfiguration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_WifiConfiguration_default_instance_;
    new (ptr) ::Kinova::Api::Base::WifiConfiguration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::WifiConfiguration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WifiConfiguration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWifiConfiguration}, {
      &protobuf_Base_2eproto::scc_info_Ssid.base,}};

static void InitDefaultsWifiConfigurationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_WifiConfigurationList_default_instance_;
    new (ptr) ::Kinova::Api::Base::WifiConfigurationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::WifiConfigurationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WifiConfigurationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWifiConfigurationList}, {
      &protobuf_Base_2eproto::scc_info_WifiConfiguration.base,}};

static void InitDefaultsProtectionZoneHandle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ProtectionZoneHandle_default_instance_;
    new (ptr) ::Kinova::Api::Base::ProtectionZoneHandle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ProtectionZoneHandle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProtectionZoneHandle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtectionZoneHandle}, {}};

static void InitDefaultsRotationMatrixRow() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_RotationMatrixRow_default_instance_;
    new (ptr) ::Kinova::Api::Base::RotationMatrixRow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::RotationMatrixRow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RotationMatrixRow =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRotationMatrixRow}, {}};

static void InitDefaultsRotationMatrix() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_RotationMatrix_default_instance_;
    new (ptr) ::Kinova::Api::Base::RotationMatrix();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::RotationMatrix::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RotationMatrix =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRotationMatrix}, {
      &protobuf_Base_2eproto::scc_info_RotationMatrixRow.base,}};

static void InitDefaultsPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Point_default_instance_;
    new (ptr) ::Kinova::Api::Base::Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint}, {}};

static void InitDefaultsZoneShape() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ZoneShape_default_instance_;
    new (ptr) ::Kinova::Api::Base::ZoneShape();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ZoneShape::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ZoneShape =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsZoneShape}, {
      &protobuf_Base_2eproto::scc_info_Point.base,
      &protobuf_Base_2eproto::scc_info_RotationMatrix.base,}};

static void InitDefaultsProtectionZone() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ProtectionZone_default_instance_;
    new (ptr) ::Kinova::Api::Base::ProtectionZone();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ProtectionZone::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ProtectionZone =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsProtectionZone}, {
      &protobuf_Base_2eproto::scc_info_ProtectionZoneHandle.base,
      &protobuf_Base_2eproto::scc_info_ZoneShape.base,
      &protobuf_Base_2eproto::scc_info_CartesianLimitation.base,}};

static void InitDefaultsProtectionZoneList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ProtectionZoneList_default_instance_;
    new (ptr) ::Kinova::Api::Base::ProtectionZoneList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ProtectionZoneList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ProtectionZoneList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProtectionZoneList}, {
      &protobuf_Base_2eproto::scc_info_ProtectionZone.base,}};

static void InitDefaultsCartesianLimitation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_CartesianLimitation_default_instance_;
    new (ptr) ::Kinova::Api::Base::CartesianLimitation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::CartesianLimitation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CartesianLimitation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCartesianLimitation}, {}};

static void InitDefaultsTwistLimitation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_TwistLimitation_default_instance_;
    new (ptr) ::Kinova::Api::Base::TwistLimitation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::TwistLimitation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TwistLimitation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTwistLimitation}, {}};

static void InitDefaultsWrenchLimitation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_WrenchLimitation_default_instance_;
    new (ptr) ::Kinova::Api::Base::WrenchLimitation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::WrenchLimitation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WrenchLimitation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWrenchLimitation}, {}};

static void InitDefaultsCartesianLimitationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_CartesianLimitationList_default_instance_;
    new (ptr) ::Kinova::Api::Base::CartesianLimitationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::CartesianLimitationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CartesianLimitationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCartesianLimitationList}, {
      &protobuf_Base_2eproto::scc_info_CartesianLimitation.base,}};

static void InitDefaultsJointLimitation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_JointLimitation_default_instance_;
    new (ptr) ::Kinova::Api::Base::JointLimitation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::JointLimitation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JointLimitation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJointLimitation}, {}};

static void InitDefaultsJointsLimitationsList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_JointsLimitationsList_default_instance_;
    new (ptr) ::Kinova::Api::Base::JointsLimitationsList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::JointsLimitationsList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_JointsLimitationsList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsJointsLimitationsList}, {
      &protobuf_Base_2eproto::scc_info_JointLimitation.base,}};

static void InitDefaultsQuery() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Query_default_instance_;
    new (ptr) ::Kinova::Api::Base::Query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Query =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsQuery}, {
      &protobuf_Common_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsConfigurationChangeNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ConfigurationChangeNotification_default_instance_;
    new (ptr) ::Kinova::Api::Base::ConfigurationChangeNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ConfigurationChangeNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<13> scc_info_ConfigurationChangeNotification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 13, InitDefaultsConfigurationChangeNotification}, {
      &protobuf_Common_2eproto::scc_info_Timestamp.base,
      &protobuf_Common_2eproto::scc_info_UserProfileHandle.base,
      &protobuf_Base_2eproto::scc_info_SequenceHandle.base,
      &protobuf_Base_2eproto::scc_info_ActionHandle.base,
      &protobuf_Base_2eproto::scc_info_MappingHandle.base,
      &protobuf_Base_2eproto::scc_info_MapGroupHandle.base,
      &protobuf_Base_2eproto::scc_info_MapHandle.base,
      &protobuf_Base_2eproto::scc_info_ProtectionZoneHandle.base,
      &protobuf_Common_2eproto::scc_info_SafetyHandle.base,
      &protobuf_Base_2eproto::scc_info_NetworkHandle.base,
      &protobuf_Base_2eproto::scc_info_Ssid.base,
      &protobuf_Base_2eproto::scc_info_ControllerHandle.base,
      &protobuf_Common_2eproto::scc_info_Connection.base,}};

static void InitDefaultsMappingInfoNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_MappingInfoNotification_default_instance_;
    new (ptr) ::Kinova::Api::Base::MappingInfoNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::MappingInfoNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_MappingInfoNotification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsMappingInfoNotification}, {
      &protobuf_Base_2eproto::scc_info_MapHandle.base,
      &protobuf_Common_2eproto::scc_info_Timestamp.base,
      &protobuf_Common_2eproto::scc_info_UserProfileHandle.base,
      &protobuf_Common_2eproto::scc_info_Connection.base,
      &protobuf_Base_2eproto::scc_info_MappingHandle.base,}};

static void InitDefaultsControlModeInformation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ControlModeInformation_default_instance_;
    new (ptr) ::Kinova::Api::Base::ControlModeInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ControlModeInformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControlModeInformation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsControlModeInformation}, {}};

static void InitDefaultsControlModeNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ControlModeNotification_default_instance_;
    new (ptr) ::Kinova::Api::Base::ControlModeNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ControlModeNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ControlModeNotification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsControlModeNotification}, {
      &protobuf_Common_2eproto::scc_info_Timestamp.base,
      &protobuf_Common_2eproto::scc_info_UserProfileHandle.base,
      &protobuf_Common_2eproto::scc_info_Connection.base,}};

static void InitDefaultsServoingModeInformation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ServoingModeInformation_default_instance_;
    new (ptr) ::Kinova::Api::Base::ServoingModeInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ServoingModeInformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServoingModeInformation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServoingModeInformation}, {}};

static void InitDefaultsOperatingModeInformation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_OperatingModeInformation_default_instance_;
    new (ptr) ::Kinova::Api::Base::OperatingModeInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::OperatingModeInformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OperatingModeInformation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOperatingModeInformation}, {
      &protobuf_Common_2eproto::scc_info_DeviceHandle.base,}};

static void InitDefaultsOperatingModeNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_OperatingModeNotification_default_instance_;
    new (ptr) ::Kinova::Api::Base::OperatingModeNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::OperatingModeNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_OperatingModeNotification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsOperatingModeNotification}, {
      &protobuf_Common_2eproto::scc_info_Timestamp.base,
      &protobuf_Common_2eproto::scc_info_UserProfileHandle.base,
      &protobuf_Common_2eproto::scc_info_Connection.base,
      &protobuf_Common_2eproto::scc_info_DeviceHandle.base,}};

static void InitDefaultsServoingModeNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ServoingModeNotification_default_instance_;
    new (ptr) ::Kinova::Api::Base::ServoingModeNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ServoingModeNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ServoingModeNotification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsServoingModeNotification}, {
      &protobuf_Common_2eproto::scc_info_Timestamp.base,
      &protobuf_Common_2eproto::scc_info_UserProfileHandle.base,
      &protobuf_Common_2eproto::scc_info_Connection.base,}};

static void InitDefaultsSequenceInfoNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_SequenceInfoNotification_default_instance_;
    new (ptr) ::Kinova::Api::Base::SequenceInfoNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::SequenceInfoNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_SequenceInfoNotification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsSequenceInfoNotification}, {
      &protobuf_Base_2eproto::scc_info_SequenceHandle.base,
      &protobuf_Common_2eproto::scc_info_Timestamp.base,
      &protobuf_Common_2eproto::scc_info_UserProfileHandle.base,
      &protobuf_Common_2eproto::scc_info_Connection.base,}};

static void InitDefaultsSequenceInformation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_SequenceInformation_default_instance_;
    new (ptr) ::Kinova::Api::Base::SequenceInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::SequenceInformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SequenceInformation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSequenceInformation}, {}};

static void InitDefaultsProtectionZoneNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ProtectionZoneNotification_default_instance_;
    new (ptr) ::Kinova::Api::Base::ProtectionZoneNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ProtectionZoneNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ProtectionZoneNotification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsProtectionZoneNotification}, {
      &protobuf_Base_2eproto::scc_info_ProtectionZoneHandle.base,
      &protobuf_Common_2eproto::scc_info_Timestamp.base,
      &protobuf_Common_2eproto::scc_info_UserProfileHandle.base,
      &protobuf_Common_2eproto::scc_info_Connection.base,}};

static void InitDefaultsProtectionZoneInformation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ProtectionZoneInformation_default_instance_;
    new (ptr) ::Kinova::Api::Base::ProtectionZoneInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ProtectionZoneInformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProtectionZoneInformation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtectionZoneInformation}, {}};

static void InitDefaultsUserNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_UserNotification_default_instance_;
    new (ptr) ::Kinova::Api::Base::UserNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::UserNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_UserNotification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsUserNotification}, {
      &protobuf_Common_2eproto::scc_info_UserProfileHandle.base,
      &protobuf_Common_2eproto::scc_info_Timestamp.base,
      &protobuf_Common_2eproto::scc_info_Connection.base,}};

static void InitDefaultsControllerHandle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ControllerHandle_default_instance_;
    new (ptr) ::Kinova::Api::Base::ControllerHandle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ControllerHandle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControllerHandle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsControllerHandle}, {}};

static void InitDefaultsControllerElementHandle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ControllerElementHandle_default_instance_;
    new (ptr) ::Kinova::Api::Base::ControllerElementHandle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ControllerElementHandle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ControllerElementHandle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsControllerElementHandle}, {
      &protobuf_Base_2eproto::scc_info_ControllerHandle.base,}};

static void InitDefaultsControllerNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ControllerNotification_default_instance_;
    new (ptr) ::Kinova::Api::Base::ControllerNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ControllerNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_ControllerNotification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsControllerNotification}, {
      &protobuf_Base_2eproto::scc_info_ControllerState.base,
      &protobuf_Base_2eproto::scc_info_ControllerElementState.base,
      &protobuf_Common_2eproto::scc_info_Timestamp.base,
      &protobuf_Common_2eproto::scc_info_UserProfileHandle.base,
      &protobuf_Common_2eproto::scc_info_Connection.base,}};

static void InitDefaultsControllerList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ControllerList_default_instance_;
    new (ptr) ::Kinova::Api::Base::ControllerList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ControllerList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ControllerList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsControllerList}, {
      &protobuf_Base_2eproto::scc_info_ControllerHandle.base,}};

static void InitDefaultsControllerState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ControllerState_default_instance_;
    new (ptr) ::Kinova::Api::Base::ControllerState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ControllerState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ControllerState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsControllerState}, {
      &protobuf_Base_2eproto::scc_info_ControllerHandle.base,}};

static void InitDefaultsControllerElementState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ControllerElementState_default_instance_;
    new (ptr) ::Kinova::Api::Base::ControllerElementState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ControllerElementState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ControllerElementState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsControllerElementState}, {
      &protobuf_Base_2eproto::scc_info_ControllerElementHandle.base,}};

static void InitDefaultsActionNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ActionNotification_default_instance_;
    new (ptr) ::Kinova::Api::Base::ActionNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ActionNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_ActionNotification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsActionNotification}, {
      &protobuf_Base_2eproto::scc_info_ActionHandle.base,
      &protobuf_Common_2eproto::scc_info_Timestamp.base,
      &protobuf_Common_2eproto::scc_info_UserProfileHandle.base,
      &protobuf_Common_2eproto::scc_info_Connection.base,
      &protobuf_Base_2eproto::scc_info_TrajectoryInfo.base,}};

static void InitDefaultsTrajectoryInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_TrajectoryInfo_default_instance_;
    new (ptr) ::Kinova::Api::Base::TrajectoryInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::TrajectoryInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrajectoryInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrajectoryInfo}, {}};

static void InitDefaultsActionExecutionState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ActionExecutionState_default_instance_;
    new (ptr) ::Kinova::Api::Base::ActionExecutionState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ActionExecutionState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ActionExecutionState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsActionExecutionState}, {
      &protobuf_Base_2eproto::scc_info_ActionHandle.base,}};

static void InitDefaultsRobotEventNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_RobotEventNotification_default_instance_;
    new (ptr) ::Kinova::Api::Base::RobotEventNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::RobotEventNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_RobotEventNotification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsRobotEventNotification}, {
      &protobuf_Common_2eproto::scc_info_DeviceHandle.base,
      &protobuf_Common_2eproto::scc_info_Timestamp.base,
      &protobuf_Common_2eproto::scc_info_UserProfileHandle.base,
      &protobuf_Common_2eproto::scc_info_Connection.base,}};

static void InitDefaultsFactoryNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_FactoryNotification_default_instance_;
    new (ptr) ::Kinova::Api::Base::FactoryNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::FactoryNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_FactoryNotification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsFactoryNotification}, {
      &protobuf_Common_2eproto::scc_info_Timestamp.base,
      &protobuf_Common_2eproto::scc_info_UserProfileHandle.base,
      &protobuf_Common_2eproto::scc_info_Connection.base,}};

static void InitDefaultsNetworkNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_NetworkNotification_default_instance_;
    new (ptr) ::Kinova::Api::Base::NetworkNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::NetworkNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_NetworkNotification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsNetworkNotification}, {
      &protobuf_Common_2eproto::scc_info_Timestamp.base,
      &protobuf_Common_2eproto::scc_info_UserProfileHandle.base,
      &protobuf_Common_2eproto::scc_info_Connection.base,}};

static void InitDefaultsConfigurationChangeNotificationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ConfigurationChangeNotificationList_default_instance_;
    new (ptr) ::Kinova::Api::Base::ConfigurationChangeNotificationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ConfigurationChangeNotificationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigurationChangeNotificationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigurationChangeNotificationList}, {
      &protobuf_Base_2eproto::scc_info_ConfigurationChangeNotification.base,}};

static void InitDefaultsMappingInfoNotificationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_MappingInfoNotificationList_default_instance_;
    new (ptr) ::Kinova::Api::Base::MappingInfoNotificationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::MappingInfoNotificationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MappingInfoNotificationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMappingInfoNotificationList}, {
      &protobuf_Base_2eproto::scc_info_MappingInfoNotification.base,}};

static void InitDefaultsControlModeNotificationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ControlModeNotificationList_default_instance_;
    new (ptr) ::Kinova::Api::Base::ControlModeNotificationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ControlModeNotificationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ControlModeNotificationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsControlModeNotificationList}, {
      &protobuf_Base_2eproto::scc_info_ControlModeNotification.base,}};

static void InitDefaultsOperatingModeNotificationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_OperatingModeNotificationList_default_instance_;
    new (ptr) ::Kinova::Api::Base::OperatingModeNotificationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::OperatingModeNotificationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OperatingModeNotificationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOperatingModeNotificationList}, {
      &protobuf_Base_2eproto::scc_info_OperatingModeNotification.base,}};

static void InitDefaultsServoingModeNotificationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ServoingModeNotificationList_default_instance_;
    new (ptr) ::Kinova::Api::Base::ServoingModeNotificationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ServoingModeNotificationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServoingModeNotificationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServoingModeNotificationList}, {
      &protobuf_Base_2eproto::scc_info_ServoingModeNotification.base,}};

static void InitDefaultsSequenceInfoNotificationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_SequenceInfoNotificationList_default_instance_;
    new (ptr) ::Kinova::Api::Base::SequenceInfoNotificationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::SequenceInfoNotificationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SequenceInfoNotificationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSequenceInfoNotificationList}, {
      &protobuf_Base_2eproto::scc_info_SequenceInfoNotification.base,}};

static void InitDefaultsProtectionZoneNotificationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ProtectionZoneNotificationList_default_instance_;
    new (ptr) ::Kinova::Api::Base::ProtectionZoneNotificationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ProtectionZoneNotificationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ProtectionZoneNotificationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProtectionZoneNotificationList}, {
      &protobuf_Base_2eproto::scc_info_ProtectionZoneNotification.base,}};

static void InitDefaultsUserNotificationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_UserNotificationList_default_instance_;
    new (ptr) ::Kinova::Api::Base::UserNotificationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::UserNotificationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserNotificationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserNotificationList}, {
      &protobuf_Base_2eproto::scc_info_UserNotification.base,}};

static void InitDefaultsSafetyNotificationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_SafetyNotificationList_default_instance_;
    new (ptr) ::Kinova::Api::Base::SafetyNotificationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::SafetyNotificationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SafetyNotificationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSafetyNotificationList}, {
      &protobuf_Common_2eproto::scc_info_SafetyNotification.base,}};

static void InitDefaultsControllerNotificationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ControllerNotificationList_default_instance_;
    new (ptr) ::Kinova::Api::Base::ControllerNotificationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ControllerNotificationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ControllerNotificationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsControllerNotificationList}, {
      &protobuf_Base_2eproto::scc_info_ControllerNotification.base,}};

static void InitDefaultsActionNotificationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ActionNotificationList_default_instance_;
    new (ptr) ::Kinova::Api::Base::ActionNotificationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ActionNotificationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ActionNotificationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsActionNotificationList}, {
      &protobuf_Base_2eproto::scc_info_ActionNotification.base,}};

static void InitDefaultsRobotEventNotificationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_RobotEventNotificationList_default_instance_;
    new (ptr) ::Kinova::Api::Base::RobotEventNotificationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::RobotEventNotificationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RobotEventNotificationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRobotEventNotificationList}, {
      &protobuf_Base_2eproto::scc_info_RobotEventNotification.base,}};

static void InitDefaultsNetworkNotificationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_NetworkNotificationList_default_instance_;
    new (ptr) ::Kinova::Api::Base::NetworkNotificationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::NetworkNotificationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NetworkNotificationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNetworkNotificationList}, {
      &protobuf_Base_2eproto::scc_info_NetworkNotification.base,}};

static void InitDefaultsMappingHandle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_MappingHandle_default_instance_;
    new (ptr) ::Kinova::Api::Base::MappingHandle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::MappingHandle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MappingHandle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMappingHandle}, {}};

static void InitDefaultsSafetyEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_SafetyEvent_default_instance_;
    new (ptr) ::Kinova::Api::Base::SafetyEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::SafetyEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SafetyEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSafetyEvent}, {
      &protobuf_Common_2eproto::scc_info_SafetyHandle.base,}};

static void InitDefaultsControllerEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ControllerEvent_default_instance_;
    new (ptr) ::Kinova::Api::Base::ControllerEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ControllerEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControllerEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsControllerEvent}, {}};

static void InitDefaultsGpioEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_GpioEvent_default_instance_;
    new (ptr) ::Kinova::Api::Base::GpioEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::GpioEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GpioEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGpioEvent}, {}};

static void InitDefaultsMapEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_MapEvent_default_instance_;
    new (ptr) ::Kinova::Api::Base::MapEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::MapEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_MapEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsMapEvent}, {
      &protobuf_Base_2eproto::scc_info_SafetyEvent.base,
      &protobuf_Base_2eproto::scc_info_GpioEvent.base,
      &protobuf_Base_2eproto::scc_info_ControllerEvent.base,}};

static void InitDefaultsMapElement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_MapElement_default_instance_;
    new (ptr) ::Kinova::Api::Base::MapElement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::MapElement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MapElement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMapElement}, {
      &protobuf_Base_2eproto::scc_info_MapEvent.base,
      &protobuf_Base_2eproto::scc_info_Action.base,}};

static void InitDefaultsActivateMapHandle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ActivateMapHandle_default_instance_;
    new (ptr) ::Kinova::Api::Base::ActivateMapHandle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ActivateMapHandle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ActivateMapHandle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsActivateMapHandle}, {
      &protobuf_Base_2eproto::scc_info_MappingHandle.base,
      &protobuf_Base_2eproto::scc_info_MapGroupHandle.base,
      &protobuf_Base_2eproto::scc_info_MapHandle.base,}};

static void InitDefaultsMap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Map_default_instance_;
    new (ptr) ::Kinova::Api::Base::Map();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Map::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Map =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMap}, {
      &protobuf_Base_2eproto::scc_info_MapHandle.base,
      &protobuf_Base_2eproto::scc_info_MapElement.base,}};

static void InitDefaultsMapHandle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_MapHandle_default_instance_;
    new (ptr) ::Kinova::Api::Base::MapHandle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::MapHandle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MapHandle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMapHandle}, {}};

static void InitDefaultsMapList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_MapList_default_instance_;
    new (ptr) ::Kinova::Api::Base::MapList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::MapList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapList}, {
      &protobuf_Base_2eproto::scc_info_Map.base,}};

static void InitDefaultsMapGroupHandle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_MapGroupHandle_default_instance_;
    new (ptr) ::Kinova::Api::Base::MapGroupHandle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::MapGroupHandle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MapGroupHandle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMapGroupHandle}, {}};

static void InitDefaultsMapGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_MapGroup_default_instance_;
    new (ptr) ::Kinova::Api::Base::MapGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::MapGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_MapGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsMapGroup}, {
      &protobuf_Base_2eproto::scc_info_MapGroupHandle.base,
      &protobuf_Base_2eproto::scc_info_MappingHandle.base,
      &protobuf_Base_2eproto::scc_info_MapHandle.base,}};

static void InitDefaultsMapGroupList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_MapGroupList_default_instance_;
    new (ptr) ::Kinova::Api::Base::MapGroupList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::MapGroupList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapGroupList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapGroupList}, {
      &protobuf_Base_2eproto::scc_info_MapGroup.base,}};

static void InitDefaultsMapping() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Mapping_default_instance_;
    new (ptr) ::Kinova::Api::Base::Mapping();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Mapping::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Mapping =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsMapping}, {
      &protobuf_Base_2eproto::scc_info_MappingHandle.base,
      &protobuf_Base_2eproto::scc_info_MapGroupHandle.base,
      &protobuf_Base_2eproto::scc_info_MapHandle.base,}};

static void InitDefaultsMappingList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_MappingList_default_instance_;
    new (ptr) ::Kinova::Api::Base::MappingList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::MappingList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MappingList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMappingList}, {
      &protobuf_Base_2eproto::scc_info_Mapping.base,}};

static void InitDefaultsTransformationMatrix() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_TransformationMatrix_default_instance_;
    new (ptr) ::Kinova::Api::Base::TransformationMatrix();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::TransformationMatrix::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TransformationMatrix =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTransformationMatrix}, {
      &protobuf_Base_2eproto::scc_info_TransformationRow.base,}};

static void InitDefaultsTransformationRow() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_TransformationRow_default_instance_;
    new (ptr) ::Kinova::Api::Base::TransformationRow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::TransformationRow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransformationRow =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransformationRow}, {}};

static void InitDefaultsPose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Pose_default_instance_;
    new (ptr) ::Kinova::Api::Base::Pose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Pose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Pose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPose}, {}};

static void InitDefaultsPosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Position_default_instance_;
    new (ptr) ::Kinova::Api::Base::Position();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Position::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Position =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPosition}, {}};

static void InitDefaultsOrientation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Orientation_default_instance_;
    new (ptr) ::Kinova::Api::Base::Orientation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Orientation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Orientation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOrientation}, {}};

static void InitDefaultsCartesianSpeed() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_CartesianSpeed_default_instance_;
    new (ptr) ::Kinova::Api::Base::CartesianSpeed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::CartesianSpeed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CartesianSpeed =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCartesianSpeed}, {}};

static void InitDefaultsCartesianTrajectoryConstraint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_CartesianTrajectoryConstraint_default_instance_;
    new (ptr) ::Kinova::Api::Base::CartesianTrajectoryConstraint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::CartesianTrajectoryConstraint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CartesianTrajectoryConstraint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCartesianTrajectoryConstraint}, {
      &protobuf_Base_2eproto::scc_info_CartesianSpeed.base,}};

static void InitDefaultsJointTrajectoryConstraint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_JointTrajectoryConstraint_default_instance_;
    new (ptr) ::Kinova::Api::Base::JointTrajectoryConstraint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::JointTrajectoryConstraint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JointTrajectoryConstraint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJointTrajectoryConstraint}, {}};

static void InitDefaultsWrench() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Wrench_default_instance_;
    new (ptr) ::Kinova::Api::Base::Wrench();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Wrench::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Wrench =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWrench}, {}};

static void InitDefaultsTwist() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Twist_default_instance_;
    new (ptr) ::Kinova::Api::Base::Twist();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Twist::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Twist =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTwist}, {}};

static void InitDefaultsAdmittance() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Admittance_default_instance_;
    new (ptr) ::Kinova::Api::Base::Admittance();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Admittance::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Admittance =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAdmittance}, {}};

static void InitDefaultsConstrainedPose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ConstrainedPose_default_instance_;
    new (ptr) ::Kinova::Api::Base::ConstrainedPose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ConstrainedPose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ConstrainedPose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsConstrainedPose}, {
      &protobuf_Base_2eproto::scc_info_Pose.base,
      &protobuf_Base_2eproto::scc_info_CartesianTrajectoryConstraint.base,}};

static void InitDefaultsConstrainedPosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ConstrainedPosition_default_instance_;
    new (ptr) ::Kinova::Api::Base::ConstrainedPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ConstrainedPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ConstrainedPosition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsConstrainedPosition}, {
      &protobuf_Base_2eproto::scc_info_Position.base,
      &protobuf_Base_2eproto::scc_info_CartesianTrajectoryConstraint.base,}};

static void InitDefaultsConstrainedOrientation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ConstrainedOrientation_default_instance_;
    new (ptr) ::Kinova::Api::Base::ConstrainedOrientation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ConstrainedOrientation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ConstrainedOrientation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsConstrainedOrientation}, {
      &protobuf_Base_2eproto::scc_info_Orientation.base,
      &protobuf_Base_2eproto::scc_info_CartesianTrajectoryConstraint.base,}};

static void InitDefaultsWrenchCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_WrenchCommand_default_instance_;
    new (ptr) ::Kinova::Api::Base::WrenchCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::WrenchCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WrenchCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWrenchCommand}, {
      &protobuf_Base_2eproto::scc_info_Wrench.base,}};

static void InitDefaultsTwistCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_TwistCommand_default_instance_;
    new (ptr) ::Kinova::Api::Base::TwistCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::TwistCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TwistCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTwistCommand}, {
      &protobuf_Base_2eproto::scc_info_Twist.base,}};

static void InitDefaultsConstrainedJointAngles() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ConstrainedJointAngles_default_instance_;
    new (ptr) ::Kinova::Api::Base::ConstrainedJointAngles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ConstrainedJointAngles::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ConstrainedJointAngles =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsConstrainedJointAngles}, {
      &protobuf_Base_2eproto::scc_info_JointAngles.base,
      &protobuf_Base_2eproto::scc_info_JointTrajectoryConstraint.base,}};

static void InitDefaultsConstrainedJointAngle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ConstrainedJointAngle_default_instance_;
    new (ptr) ::Kinova::Api::Base::ConstrainedJointAngle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ConstrainedJointAngle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConstrainedJointAngle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConstrainedJointAngle}, {
      &protobuf_Base_2eproto::scc_info_JointTrajectoryConstraint.base,}};

static void InitDefaultsJointAngles() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_JointAngles_default_instance_;
    new (ptr) ::Kinova::Api::Base::JointAngles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::JointAngles::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_JointAngles =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsJointAngles}, {
      &protobuf_Base_2eproto::scc_info_JointAngle.base,}};

static void InitDefaultsJointAngle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_JointAngle_default_instance_;
    new (ptr) ::Kinova::Api::Base::JointAngle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::JointAngle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JointAngle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJointAngle}, {}};

static void InitDefaultsJointSpeeds() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_JointSpeeds_default_instance_;
    new (ptr) ::Kinova::Api::Base::JointSpeeds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::JointSpeeds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_JointSpeeds =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsJointSpeeds}, {
      &protobuf_Base_2eproto::scc_info_JointSpeed.base,}};

static void InitDefaultsJointSpeed() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_JointSpeed_default_instance_;
    new (ptr) ::Kinova::Api::Base::JointSpeed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::JointSpeed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JointSpeed =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJointSpeed}, {}};

static void InitDefaultsJointTorques() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_JointTorques_default_instance_;
    new (ptr) ::Kinova::Api::Base::JointTorques();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::JointTorques::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_JointTorques =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsJointTorques}, {
      &protobuf_Base_2eproto::scc_info_JointTorque.base,}};

static void InitDefaultsJointTorque() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_JointTorque_default_instance_;
    new (ptr) ::Kinova::Api::Base::JointTorque();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::JointTorque::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JointTorque =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJointTorque}, {}};

static void InitDefaultsGripperCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_GripperCommand_default_instance_;
    new (ptr) ::Kinova::Api::Base::GripperCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::GripperCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GripperCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGripperCommand}, {
      &protobuf_Base_2eproto::scc_info_Gripper.base,}};

static void InitDefaultsGripperRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_GripperRequest_default_instance_;
    new (ptr) ::Kinova::Api::Base::GripperRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::GripperRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GripperRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGripperRequest}, {}};

static void InitDefaultsGripper() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Gripper_default_instance_;
    new (ptr) ::Kinova::Api::Base::Gripper();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Gripper::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Gripper =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGripper}, {
      &protobuf_Base_2eproto::scc_info_Finger.base,}};

static void InitDefaultsFinger() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Finger_default_instance_;
    new (ptr) ::Kinova::Api::Base::Finger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Finger::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Finger =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFinger}, {}};

static void InitDefaultsGpioCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_GpioCommand_default_instance_;
    new (ptr) ::Kinova::Api::Base::GpioCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::GpioCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GpioCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGpioCommand}, {}};

static void InitDefaultsSystemTime() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_SystemTime_default_instance_;
    new (ptr) ::Kinova::Api::Base::SystemTime();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::SystemTime::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemTime =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemTime}, {}};

static void InitDefaultsControllerConfigurationMode() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ControllerConfigurationMode_default_instance_;
    new (ptr) ::Kinova::Api::Base::ControllerConfigurationMode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ControllerConfigurationMode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControllerConfigurationMode =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsControllerConfigurationMode}, {}};

static void InitDefaultsControllerConfiguration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ControllerConfiguration_default_instance_;
    new (ptr) ::Kinova::Api::Base::ControllerConfiguration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ControllerConfiguration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ControllerConfiguration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsControllerConfiguration}, {
      &protobuf_Base_2eproto::scc_info_ControllerHandle.base,
      &protobuf_Base_2eproto::scc_info_MappingHandle.base,}};

static void InitDefaultsControllerConfigurationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ControllerConfigurationList_default_instance_;
    new (ptr) ::Kinova::Api::Base::ControllerConfigurationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ControllerConfigurationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ControllerConfigurationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsControllerConfigurationList}, {
      &protobuf_Base_2eproto::scc_info_ControllerConfiguration.base,}};

static void InitDefaultsActuatorInformation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ActuatorInformation_default_instance_;
    new (ptr) ::Kinova::Api::Base::ActuatorInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ActuatorInformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActuatorInformation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActuatorInformation}, {}};

static void InitDefaultsArmStateInformation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ArmStateInformation_default_instance_;
    new (ptr) ::Kinova::Api::Base::ArmStateInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ArmStateInformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ArmStateInformation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsArmStateInformation}, {
      &protobuf_Common_2eproto::scc_info_Connection.base,}};

static void InitDefaultsArmStateNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_ArmStateNotification_default_instance_;
    new (ptr) ::Kinova::Api::Base::ArmStateNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::ArmStateNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ArmStateNotification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsArmStateNotification}, {
      &protobuf_Common_2eproto::scc_info_Timestamp.base,
      &protobuf_Common_2eproto::scc_info_Connection.base,}};

static void InitDefaultsCapSenseConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_CapSenseConfig_default_instance_;
    new (ptr) ::Kinova::Api::Base::CapSenseConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::CapSenseConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CapSenseConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCapSenseConfig}, {}};

static void InitDefaultsBridgeList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_BridgeList_default_instance_;
    new (ptr) ::Kinova::Api::Base::BridgeList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::BridgeList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BridgeList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBridgeList}, {
      &protobuf_Base_2eproto::scc_info_BridgeConfig.base,}};

static void InitDefaultsBridgeResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_BridgeResult_default_instance_;
    new (ptr) ::Kinova::Api::Base::BridgeResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::BridgeResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BridgeResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBridgeResult}, {
      &protobuf_Base_2eproto::scc_info_BridgeIdentifier.base,}};

static void InitDefaultsBridgeIdentifier() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_BridgeIdentifier_default_instance_;
    new (ptr) ::Kinova::Api::Base::BridgeIdentifier();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::BridgeIdentifier::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BridgeIdentifier =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBridgeIdentifier}, {}};

static void InitDefaultsBridgeConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_BridgeConfig_default_instance_;
    new (ptr) ::Kinova::Api::Base::BridgeConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::BridgeConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BridgeConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBridgeConfig}, {
      &protobuf_Base_2eproto::scc_info_BridgePortConfig.base,
      &protobuf_Base_2eproto::scc_info_BridgeIdentifier.base,}};

static void InitDefaultsBridgePortConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_BridgePortConfig_default_instance_;
    new (ptr) ::Kinova::Api::Base::BridgePortConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::BridgePortConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BridgePortConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBridgePortConfig}, {}};

static void InitDefaultsPreComputedJointTrajectory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_PreComputedJointTrajectory_default_instance_;
    new (ptr) ::Kinova::Api::Base::PreComputedJointTrajectory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::PreComputedJointTrajectory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PreComputedJointTrajectory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPreComputedJointTrajectory}, {
      &protobuf_Base_2eproto::scc_info_PreComputedJointTrajectoryElement.base,}};

static void InitDefaultsPreComputedJointTrajectoryElement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_PreComputedJointTrajectoryElement_default_instance_;
    new (ptr) ::Kinova::Api::Base::PreComputedJointTrajectoryElement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::PreComputedJointTrajectoryElement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PreComputedJointTrajectoryElement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPreComputedJointTrajectoryElement}, {}};

static void InitDefaultsTrajectoryErrorElement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_TrajectoryErrorElement_default_instance_;
    new (ptr) ::Kinova::Api::Base::TrajectoryErrorElement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::TrajectoryErrorElement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrajectoryErrorElement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrajectoryErrorElement}, {}};

static void InitDefaultsTrajectoryErrorReport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_TrajectoryErrorReport_default_instance_;
    new (ptr) ::Kinova::Api::Base::TrajectoryErrorReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::TrajectoryErrorReport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrajectoryErrorReport =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrajectoryErrorReport}, {
      &protobuf_Base_2eproto::scc_info_TrajectoryErrorElement.base,}};

static void InitDefaultsWaypointValidationReport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_WaypointValidationReport_default_instance_;
    new (ptr) ::Kinova::Api::Base::WaypointValidationReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::WaypointValidationReport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_WaypointValidationReport =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsWaypointValidationReport}, {
      &protobuf_Base_2eproto::scc_info_TrajectoryErrorReport.base,
      &protobuf_Base_2eproto::scc_info_WaypointList.base,}};

static void InitDefaultsWaypoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_Waypoint_default_instance_;
    new (ptr) ::Kinova::Api::Base::Waypoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::Waypoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Waypoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsWaypoint}, {
      &protobuf_Base_2eproto::scc_info_AngularWaypoint.base,
      &protobuf_Base_2eproto::scc_info_CartesianWaypoint.base,}};

static void InitDefaultsAngularWaypoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_AngularWaypoint_default_instance_;
    new (ptr) ::Kinova::Api::Base::AngularWaypoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::AngularWaypoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AngularWaypoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAngularWaypoint}, {}};

static void InitDefaultsCartesianWaypoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_CartesianWaypoint_default_instance_;
    new (ptr) ::Kinova::Api::Base::CartesianWaypoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::CartesianWaypoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CartesianWaypoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCartesianWaypoint}, {
      &protobuf_Base_2eproto::scc_info_Pose.base,}};

static void InitDefaultsWaypointList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_WaypointList_default_instance_;
    new (ptr) ::Kinova::Api::Base::WaypointList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::WaypointList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WaypointList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWaypointList}, {
      &protobuf_Base_2eproto::scc_info_Waypoint.base,}};

static void InitDefaultsKinematicTrajectoryConstraints() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_KinematicTrajectoryConstraints_default_instance_;
    new (ptr) ::Kinova::Api::Base::KinematicTrajectoryConstraints();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::KinematicTrajectoryConstraints::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KinematicTrajectoryConstraints =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKinematicTrajectoryConstraints}, {}};

static void InitDefaultsFirmwareBundleVersions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_FirmwareBundleVersions_default_instance_;
    new (ptr) ::Kinova::Api::Base::FirmwareBundleVersions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::FirmwareBundleVersions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FirmwareBundleVersions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFirmwareBundleVersions}, {
      &protobuf_Base_2eproto::scc_info_FirmwareComponentVersion.base,}};

static void InitDefaultsFirmwareComponentVersion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_FirmwareComponentVersion_default_instance_;
    new (ptr) ::Kinova::Api::Base::FirmwareComponentVersion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::FirmwareComponentVersion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FirmwareComponentVersion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFirmwareComponentVersion}, {}};

static void InitDefaultsIKData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Base::_IKData_default_instance_;
    new (ptr) ::Kinova::Api::Base::IKData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Base::IKData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_IKData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsIKData}, {
      &protobuf_Base_2eproto::scc_info_Pose.base,
      &protobuf_Base_2eproto::scc_info_JointAngles.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GpioConfigurationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GpioConfiguration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GpioPinConfiguration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FullUserProfile.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserProfile.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserProfileList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PasswordChange.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SequenceHandle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdvancedSequenceHandle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SequenceTaskHandle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SequenceTask.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SequenceTasks.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SequenceTasksConfiguration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SequenceTaskConfiguration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SequenceTasksRange.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SequenceTasksPair.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sequence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SequenceList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AppendActionInformation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionHandle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestedActionType.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Action.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Snapshot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SwitchControlMapping.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChangeTwist.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChangeJointSpeeds.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChangeWrench.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EmergencyStop.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Faults.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Delay.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Stop.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Timeout.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ssid.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommunicationInterfaceConfiguration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NetworkHandle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IPv4Configuration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IPv4Information.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FullIPv4Configuration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WifiEnableState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BluetoothEnableState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RFConfiguration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WifiInformation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WifiInformationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WifiConfiguration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WifiConfigurationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProtectionZoneHandle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RotationMatrixRow.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RotationMatrix.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ZoneShape.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProtectionZone.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProtectionZoneList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CartesianLimitation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TwistLimitation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WrenchLimitation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CartesianLimitationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JointLimitation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JointsLimitationsList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Query.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigurationChangeNotification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MappingInfoNotification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControlModeInformation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControlModeNotification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServoingModeInformation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OperatingModeInformation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OperatingModeNotification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServoingModeNotification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SequenceInfoNotification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SequenceInformation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProtectionZoneNotification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProtectionZoneInformation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserNotification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerHandle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerElementHandle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerNotification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerElementState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionNotification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrajectoryInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionExecutionState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RobotEventNotification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FactoryNotification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NetworkNotification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigurationChangeNotificationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MappingInfoNotificationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControlModeNotificationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OperatingModeNotificationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServoingModeNotificationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SequenceInfoNotificationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProtectionZoneNotificationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserNotificationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SafetyNotificationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerNotificationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionNotificationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RobotEventNotificationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NetworkNotificationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MappingHandle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SafetyEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GpioEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapElement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActivateMapHandle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Map.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapHandle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapGroupHandle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapGroupList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mapping.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MappingList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransformationMatrix.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransformationRow.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Pose.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Position.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Orientation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CartesianSpeed.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CartesianTrajectoryConstraint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JointTrajectoryConstraint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Wrench.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Twist.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Admittance.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConstrainedPose.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConstrainedPosition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConstrainedOrientation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WrenchCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TwistCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConstrainedJointAngles.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConstrainedJointAngle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JointAngles.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JointAngle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JointSpeeds.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JointSpeed.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JointTorques.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JointTorque.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GripperCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GripperRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Gripper.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Finger.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GpioCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemTime.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerConfigurationMode.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerConfiguration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerConfigurationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActuatorInformation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ArmStateInformation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ArmStateNotification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CapSenseConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BridgeList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BridgeResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BridgeIdentifier.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BridgeConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BridgePortConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PreComputedJointTrajectory.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PreComputedJointTrajectoryElement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrajectoryErrorElement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrajectoryErrorReport.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WaypointValidationReport.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Waypoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AngularWaypoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CartesianWaypoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WaypointList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KinematicTrajectoryConstraints.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FirmwareBundleVersions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FirmwareComponentVersion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IKData.base);
}

::google::protobuf::Metadata file_level_metadata[169];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[49];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GpioConfigurationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GpioConfigurationList, port_configurations_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GpioConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GpioConfiguration, port_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GpioConfiguration, pin_configurations_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GpioPinConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GpioPinConfiguration, pin_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GpioPinConfiguration, pin_property_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GpioPinConfiguration, output_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GpioPinConfiguration, default_output_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::FullUserProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::FullUserProfile, user_profile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::FullUserProfile, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::UserProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::UserProfile, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::UserProfile, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::UserProfile, firstname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::UserProfile, lastname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::UserProfile, application_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::UserProfileList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::UserProfileList, user_profiles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::UserList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::UserList, user_handles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::PasswordChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::PasswordChange, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::PasswordChange, old_password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::PasswordChange, new_password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceHandle, identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceHandle, permission_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::AdvancedSequenceHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::AdvancedSequenceHandle, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::AdvancedSequenceHandle, in_loop_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTaskHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTaskHandle, sequence_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTaskHandle, task_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTask, group_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTask, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTask, application_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTasks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTasks, sequence_tasks_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTasksConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTasksConfiguration, sequence_task_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTasksConfiguration, sequence_tasks_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTaskConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTaskConfiguration, sequence_task_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTaskConfiguration, sequence_task_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTasksRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTasksRange, first_task_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTasksRange, second_task_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTasksPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTasksPair, sequence_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTasksPair, first_task_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceTasksPair, second_task_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Sequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Sequence, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Sequence, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Sequence, application_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Sequence, tasks_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceList, sequence_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::AppendActionInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::AppendActionInformation, sequence_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::AppendActionInformation, action_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActionHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActionHandle, identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActionHandle, action_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActionHandle, permission_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RequestedActionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RequestedActionType, action_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Action, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Action, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Action, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Action, application_data_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, send_twist_command_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, send_wrench_command_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, send_joint_speeds_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, reach_pose_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, reach_joint_angles_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, toggle_admittance_mode_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, snapshot_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, switch_control_mapping_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, navigate_joints_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, navigate_mappings_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, change_twist_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, change_joint_speeds_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, change_wrench_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, apply_emergency_stop_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, clear_faults_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, delay_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, execute_action_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, send_gripper_command_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, send_gpio_command_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, stop_action_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, play_pre_computed_trajectory_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, execute_sequence_),
  offsetof(::Kinova::Api::Base::ActionDefaultTypeInternal, execute_waypoint_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Action, action_parameters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Snapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Snapshot, snapshot_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SwitchControlMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SwitchControlMapping, controller_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SwitchControlMapping, map_group_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SwitchControlMapping, map_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ChangeTwist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ChangeTwist, linear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ChangeTwist, angular_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ChangeJointSpeeds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ChangeJointSpeeds, joint_speeds_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ChangeWrench, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ChangeWrench, force_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ChangeWrench, torque_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::EmergencyStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Faults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Delay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Delay, duration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Stop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActionList, action_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Timeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Timeout, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Ssid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Ssid, identifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CommunicationInterfaceConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CommunicationInterfaceConfiguration, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CommunicationInterfaceConfiguration, enable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::NetworkHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::NetworkHandle, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::IPv4Configuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::IPv4Configuration, ip_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::IPv4Configuration, subnet_mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::IPv4Configuration, default_gateway_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::IPv4Configuration, dhcp_enabled_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::IPv4Information, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::IPv4Information, ip_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::IPv4Information, subnet_mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::IPv4Information, default_gateway_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::FullIPv4Configuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::FullIPv4Configuration, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::FullIPv4Configuration, ipv4_configuration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WifiEnableState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WifiEnableState, enabled_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::BluetoothEnableState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::BluetoothEnableState, enabled_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RFConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RFConfiguration, wifi_enable_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RFConfiguration, bluetooth_enable_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WifiInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WifiInformation, ssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WifiInformation, security_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WifiInformation, encryption_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WifiInformation, signal_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WifiInformation, signal_strength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WifiInformation, frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WifiInformation, channel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WifiInformationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WifiInformationList, wifi_information_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WifiConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WifiConfiguration, ssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WifiConfiguration, security_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WifiConfiguration, connect_automatically_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WifiConfigurationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WifiConfigurationList, wifi_configuration_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZoneHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZoneHandle, identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZoneHandle, permission_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RotationMatrixRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RotationMatrixRow, column1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RotationMatrixRow, column2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RotationMatrixRow, column3_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RotationMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RotationMatrix, row1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RotationMatrix, row2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RotationMatrix, row3_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Point, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Point, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ZoneShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ZoneShape, shape_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ZoneShape, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ZoneShape, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ZoneShape, dimensions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ZoneShape, envelope_thickness_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZone, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZone, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZone, application_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZone, is_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZone, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZone, limitations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZone, envelope_limitations_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZoneList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZoneList, protection_zones_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CartesianLimitation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CartesianLimitation, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CartesianLimitation, translation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CartesianLimitation, orientation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TwistLimitation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TwistLimitation, linear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TwistLimitation, angular_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WrenchLimitation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WrenchLimitation, force_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WrenchLimitation, torque_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CartesianLimitationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CartesianLimitationList, limitations_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointLimitation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointLimitation, joint_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointLimitation, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointLimitation, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointsLimitationsList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointsLimitationsList, joints_limitations_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Query, start_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Query, end_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Query, username_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConfigurationChangeNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConfigurationChangeNotification, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConfigurationChangeNotification, event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConfigurationChangeNotification, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConfigurationChangeNotification, user_handle_),
  offsetof(::Kinova::Api::Base::ConfigurationChangeNotificationDefaultTypeInternal, sequence_handle_),
  offsetof(::Kinova::Api::Base::ConfigurationChangeNotificationDefaultTypeInternal, action_handle_),
  offsetof(::Kinova::Api::Base::ConfigurationChangeNotificationDefaultTypeInternal, mapping_handle_),
  offsetof(::Kinova::Api::Base::ConfigurationChangeNotificationDefaultTypeInternal, map_group_handle_),
  offsetof(::Kinova::Api::Base::ConfigurationChangeNotificationDefaultTypeInternal, map_handle_),
  offsetof(::Kinova::Api::Base::ConfigurationChangeNotificationDefaultTypeInternal, user_profile_handle_),
  offsetof(::Kinova::Api::Base::ConfigurationChangeNotificationDefaultTypeInternal, protection_zone_handle_),
  offsetof(::Kinova::Api::Base::ConfigurationChangeNotificationDefaultTypeInternal, safety_handle_),
  offsetof(::Kinova::Api::Base::ConfigurationChangeNotificationDefaultTypeInternal, network_handle_),
  offsetof(::Kinova::Api::Base::ConfigurationChangeNotificationDefaultTypeInternal, ssid_),
  offsetof(::Kinova::Api::Base::ConfigurationChangeNotificationDefaultTypeInternal, controller_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConfigurationChangeNotification, connection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConfigurationChangeNotification, configuration_change_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MappingInfoNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MappingInfoNotification, controller_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MappingInfoNotification, active_map_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MappingInfoNotification, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MappingInfoNotification, user_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MappingInfoNotification, connection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MappingInfoNotification, mapping_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControlModeInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControlModeInformation, mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControlModeNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControlModeNotification, control_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControlModeNotification, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControlModeNotification, user_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControlModeNotification, connection_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ServoingModeInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ServoingModeInformation, servoing_mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::OperatingModeInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::OperatingModeInformation, operating_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::OperatingModeInformation, device_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::OperatingModeNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::OperatingModeNotification, operating_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::OperatingModeNotification, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::OperatingModeNotification, user_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::OperatingModeNotification, connection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::OperatingModeNotification, device_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ServoingModeNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ServoingModeNotification, servoing_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ServoingModeNotification, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ServoingModeNotification, user_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ServoingModeNotification, connection_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceInfoNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceInfoNotification, event_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceInfoNotification, sequence_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceInfoNotification, task_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceInfoNotification, group_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceInfoNotification, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceInfoNotification, user_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceInfoNotification, abort_details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceInfoNotification, connection_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceInformation, event_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceInformation, task_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceInformation, task_identifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZoneNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZoneNotification, event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZoneNotification, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZoneNotification, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZoneNotification, user_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZoneNotification, connection_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZoneInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZoneInformation, event_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::UserNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::UserNotification, user_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::UserNotification, modified_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::UserNotification, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::UserNotification, user_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::UserNotification, connection_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerHandle, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerHandle, controller_identifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerElementHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerElementHandle, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerElementHandle, controller_handle_),
  offsetof(::Kinova::Api::Base::ControllerElementHandleDefaultTypeInternal, button_),
  offsetof(::Kinova::Api::Base::ControllerElementHandleDefaultTypeInternal, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerElementHandle, identifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerNotification, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::Kinova::Api::Base::ControllerNotificationDefaultTypeInternal, controller_state_),
  offsetof(::Kinova::Api::Base::ControllerNotificationDefaultTypeInternal, controller_element_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerNotification, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerNotification, user_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerNotification, connection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerNotification, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerList, handles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerState, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerState, event_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerElementState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerElementState, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerElementState, event_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerElementState, axis_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActionNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActionNotification, action_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActionNotification, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActionNotification, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActionNotification, user_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActionNotification, abort_details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActionNotification, connection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActionNotification, trajectory_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TrajectoryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TrajectoryInfo, trajectory_info_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TrajectoryInfo, waypoint_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TrajectoryInfo, joint_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActionExecutionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActionExecutionState, action_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActionExecutionState, handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RobotEventNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RobotEventNotification, event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RobotEventNotification, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RobotEventNotification, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RobotEventNotification, user_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RobotEventNotification, connection_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::FactoryNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::FactoryNotification, event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::FactoryNotification, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::FactoryNotification, user_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::FactoryNotification, connection_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::NetworkNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::NetworkNotification, event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::NetworkNotification, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::NetworkNotification, user_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::NetworkNotification, connection_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConfigurationChangeNotificationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConfigurationChangeNotificationList, notifications_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MappingInfoNotificationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MappingInfoNotificationList, notifications_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControlModeNotificationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControlModeNotificationList, notifications_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::OperatingModeNotificationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::OperatingModeNotificationList, notifications_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ServoingModeNotificationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ServoingModeNotificationList, notifications_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceInfoNotificationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SequenceInfoNotificationList, notifications_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZoneNotificationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ProtectionZoneNotificationList, notifications_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::UserNotificationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::UserNotificationList, notifications_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SafetyNotificationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SafetyNotificationList, notifications_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerNotificationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerNotificationList, notifications_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActionNotificationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActionNotificationList, notifications_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RobotEventNotificationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::RobotEventNotificationList, notifications_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::NetworkNotificationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::NetworkNotificationList, notifications_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MappingHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MappingHandle, identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MappingHandle, permission_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SafetyEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SafetyEvent, safety_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerEvent, input_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerEvent, behavior_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerEvent, input_identifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GpioEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GpioEvent, input_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GpioEvent, behavior_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GpioEvent, input_identifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::Kinova::Api::Base::MapEventDefaultTypeInternal, safety_event_),
  offsetof(::Kinova::Api::Base::MapEventDefaultTypeInternal, gpio_event_),
  offsetof(::Kinova::Api::Base::MapEventDefaultTypeInternal, controller_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapEvent, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapEvent, events_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapElement, event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapElement, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapElement, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActivateMapHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActivateMapHandle, mapping_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActivateMapHandle, map_group_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActivateMapHandle, map_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Map, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Map, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Map, elements_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapHandle, identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapHandle, permission_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapList, map_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapGroupHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapGroupHandle, identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapGroupHandle, permission_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapGroup, group_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapGroup, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapGroup, related_mapping_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapGroup, parent_group_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapGroup, children_map_group_handles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapGroup, map_handles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapGroup, application_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapGroupList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MapGroupList, map_groups_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Mapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Mapping, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Mapping, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Mapping, controller_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Mapping, active_map_group_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Mapping, map_group_handles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Mapping, active_map_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Mapping, map_handles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Mapping, application_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MappingList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::MappingList, mappings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TransformationMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TransformationMatrix, r0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TransformationMatrix, r1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TransformationMatrix, r2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TransformationMatrix, r3_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TransformationRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TransformationRow, c0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TransformationRow, c1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TransformationRow, c2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TransformationRow, c3_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Pose, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Pose, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Pose, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Pose, theta_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Pose, theta_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Pose, theta_z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Position, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Position, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Position, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Orientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Orientation, theta_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Orientation, theta_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Orientation, theta_z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CartesianSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CartesianSpeed, translation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CartesianSpeed, orientation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CartesianTrajectoryConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CartesianTrajectoryConstraint, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::Kinova::Api::Base::CartesianTrajectoryConstraintDefaultTypeInternal, speed_),
  offsetof(::Kinova::Api::Base::CartesianTrajectoryConstraintDefaultTypeInternal, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CartesianTrajectoryConstraint, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointTrajectoryConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointTrajectoryConstraint, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointTrajectoryConstraint, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Wrench, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Wrench, force_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Wrench, force_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Wrench, force_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Wrench, torque_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Wrench, torque_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Wrench, torque_z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Twist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Twist, linear_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Twist, linear_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Twist, linear_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Twist, angular_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Twist, angular_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Twist, angular_z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Admittance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Admittance, admittance_mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConstrainedPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConstrainedPose, target_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConstrainedPose, constraint_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConstrainedPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConstrainedPosition, target_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConstrainedPosition, constraint_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConstrainedOrientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConstrainedOrientation, target_orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConstrainedOrientation, constraint_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WrenchCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WrenchCommand, reference_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WrenchCommand, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WrenchCommand, wrench_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WrenchCommand, duration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TwistCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TwistCommand, reference_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TwistCommand, twist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TwistCommand, duration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConstrainedJointAngles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConstrainedJointAngles, joint_angles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConstrainedJointAngles, constraint_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConstrainedJointAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConstrainedJointAngle, joint_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConstrainedJointAngle, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ConstrainedJointAngle, constraint_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointAngles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointAngles, joint_angles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointAngle, joint_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointAngle, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointSpeeds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointSpeeds, joint_speeds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointSpeeds, duration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointSpeed, joint_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointSpeed, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointSpeed, duration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointTorques, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointTorques, joint_torques_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointTorques, duration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointTorque, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointTorque, joint_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointTorque, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::JointTorque, duration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GripperCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GripperCommand, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GripperCommand, gripper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GripperCommand, duration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GripperRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GripperRequest, mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Gripper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Gripper, finger_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Finger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Finger, finger_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Finger, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GpioCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GpioCommand, port_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GpioCommand, pin_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GpioCommand, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::GpioCommand, period_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SystemTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SystemTime, sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SystemTime, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SystemTime, hour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SystemTime, mday_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SystemTime, mon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::SystemTime, year_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerConfigurationMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerConfigurationMode, enable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerConfiguration, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerConfiguration, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerConfiguration, active_mapping_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerConfiguration, analog_input_identifier_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerConfiguration, digital_input_identifier_enum_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerConfigurationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ControllerConfigurationList, controller_configurations_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActuatorInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ActuatorInformation, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ArmStateInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ArmStateInformation, active_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ArmStateInformation, connection_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ArmStateNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ArmStateNotification, active_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ArmStateNotification, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::ArmStateNotification, connection_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CapSenseConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CapSenseConfig, identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CapSenseConfig, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CapSenseConfig, threshold_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CapSenseConfig, threshold_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CapSenseConfig, sensitivity_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CapSenseConfig, sensitivity_b_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::BridgeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::BridgeList, bridgeconfig_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::BridgeResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::BridgeResult, bridge_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::BridgeResult, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::BridgeIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::BridgeIdentifier, bridge_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::BridgeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::BridgeConfig, device_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::BridgeConfig, bridgetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::BridgeConfig, port_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::BridgeConfig, bridge_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::BridgePortConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::BridgePortConfig, target_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::BridgePortConfig, out_port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::PreComputedJointTrajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::PreComputedJointTrajectory, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::PreComputedJointTrajectory, trajectory_elements_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::PreComputedJointTrajectoryElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::PreComputedJointTrajectoryElement, joint_angles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::PreComputedJointTrajectoryElement, joint_speeds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::PreComputedJointTrajectoryElement, joint_accelerations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::PreComputedJointTrajectoryElement, time_from_start_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TrajectoryErrorElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TrajectoryErrorElement, error_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TrajectoryErrorElement, error_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TrajectoryErrorElement, error_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TrajectoryErrorElement, min_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TrajectoryErrorElement, max_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TrajectoryErrorElement, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TrajectoryErrorElement, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TrajectoryErrorElement, waypoint_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TrajectoryErrorReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::TrajectoryErrorReport, trajectory_error_elements_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WaypointValidationReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WaypointValidationReport, trajectory_error_report_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WaypointValidationReport, optimal_waypoint_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Waypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Waypoint, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Waypoint, name_),
  offsetof(::Kinova::Api::Base::WaypointDefaultTypeInternal, angular_waypoint_),
  offsetof(::Kinova::Api::Base::WaypointDefaultTypeInternal, cartesian_waypoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::Waypoint, type_of_waypoint_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::AngularWaypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::AngularWaypoint, angles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::AngularWaypoint, maximum_velocities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::AngularWaypoint, duration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CartesianWaypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CartesianWaypoint, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CartesianWaypoint, reference_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CartesianWaypoint, maximum_linear_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CartesianWaypoint, maximum_angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::CartesianWaypoint, blending_radius_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WaypointList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WaypointList, waypoints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WaypointList, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::WaypointList, use_optimal_blending_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::KinematicTrajectoryConstraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::KinematicTrajectoryConstraints, angular_velocities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::KinematicTrajectoryConstraints, linear_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::KinematicTrajectoryConstraints, angular_velocity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::FirmwareBundleVersions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::FirmwareBundleVersions, main_bundle_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::FirmwareBundleVersions, components_versions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::FirmwareComponentVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::FirmwareComponentVersion, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::FirmwareComponentVersion, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::FirmwareComponentVersion, device_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::IKData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::IKData, cartesian_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Base::IKData, guess_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Kinova::Api::Base::GpioConfigurationList)},
  { 6, -1, sizeof(::Kinova::Api::Base::GpioConfiguration)},
  { 13, -1, sizeof(::Kinova::Api::Base::GpioPinConfiguration)},
  { 22, -1, sizeof(::Kinova::Api::Base::FullUserProfile)},
  { 29, -1, sizeof(::Kinova::Api::Base::UserProfile)},
  { 39, -1, sizeof(::Kinova::Api::Base::UserProfileList)},
  { 45, -1, sizeof(::Kinova::Api::Base::UserList)},
  { 51, -1, sizeof(::Kinova::Api::Base::PasswordChange)},
  { 59, -1, sizeof(::Kinova::Api::Base::SequenceHandle)},
  { 66, -1, sizeof(::Kinova::Api::Base::AdvancedSequenceHandle)},
  { 73, -1, sizeof(::Kinova::Api::Base::SequenceTaskHandle)},
  { 80, -1, sizeof(::Kinova::Api::Base::SequenceTask)},
  { 88, -1, sizeof(::Kinova::Api::Base::SequenceTasks)},
  { 94, -1, sizeof(::Kinova::Api::Base::SequenceTasksConfiguration)},
  { 101, -1, sizeof(::Kinova::Api::Base::SequenceTaskConfiguration)},
  { 108, -1, sizeof(::Kinova::Api::Base::SequenceTasksRange)},
  { 115, -1, sizeof(::Kinova::Api::Base::SequenceTasksPair)},
  { 123, -1, sizeof(::Kinova::Api::Base::Sequence)},
  { 132, -1, sizeof(::Kinova::Api::Base::SequenceList)},
  { 138, -1, sizeof(::Kinova::Api::Base::AppendActionInformation)},
  { 145, -1, sizeof(::Kinova::Api::Base::ActionHandle)},
  { 153, -1, sizeof(::Kinova::Api::Base::RequestedActionType)},
  { 159, -1, sizeof(::Kinova::Api::Base::Action)},
  { 191, -1, sizeof(::Kinova::Api::Base::Snapshot)},
  { 197, -1, sizeof(::Kinova::Api::Base::SwitchControlMapping)},
  { 205, -1, sizeof(::Kinova::Api::Base::ChangeTwist)},
  { 212, -1, sizeof(::Kinova::Api::Base::ChangeJointSpeeds)},
  { 218, -1, sizeof(::Kinova::Api::Base::ChangeWrench)},
  { 225, -1, sizeof(::Kinova::Api::Base::EmergencyStop)},
  { 230, -1, sizeof(::Kinova::Api::Base::Faults)},
  { 235, -1, sizeof(::Kinova::Api::Base::Delay)},
  { 241, -1, sizeof(::Kinova::Api::Base::Stop)},
  { 246, -1, sizeof(::Kinova::Api::Base::ActionList)},
  { 252, -1, sizeof(::Kinova::Api::Base::Timeout)},
  { 258, -1, sizeof(::Kinova::Api::Base::Ssid)},
  { 264, -1, sizeof(::Kinova::Api::Base::CommunicationInterfaceConfiguration)},
  { 271, -1, sizeof(::Kinova::Api::Base::NetworkHandle)},
  { 277, -1, sizeof(::Kinova::Api::Base::IPv4Configuration)},
  { 286, -1, sizeof(::Kinova::Api::Base::IPv4Information)},
  { 294, -1, sizeof(::Kinova::Api::Base::FullIPv4Configuration)},
  { 301, -1, sizeof(::Kinova::Api::Base::WifiEnableState)},
  { 307, -1, sizeof(::Kinova::Api::Base::BluetoothEnableState)},
  { 313, -1, sizeof(::Kinova::Api::Base::RFConfiguration)},
  { 320, -1, sizeof(::Kinova::Api::Base::WifiInformation)},
  { 332, -1, sizeof(::Kinova::Api::Base::WifiInformationList)},
  { 338, -1, sizeof(::Kinova::Api::Base::WifiConfiguration)},
  { 346, -1, sizeof(::Kinova::Api::Base::WifiConfigurationList)},
  { 352, -1, sizeof(::Kinova::Api::Base::ProtectionZoneHandle)},
  { 359, -1, sizeof(::Kinova::Api::Base::RotationMatrixRow)},
  { 367, -1, sizeof(::Kinova::Api::Base::RotationMatrix)},
  { 375, -1, sizeof(::Kinova::Api::Base::Point)},
  { 383, -1, sizeof(::Kinova::Api::Base::ZoneShape)},
  { 393, -1, sizeof(::Kinova::Api::Base::ProtectionZone)},
  { 405, -1, sizeof(::Kinova::Api::Base::ProtectionZoneList)},
  { 411, -1, sizeof(::Kinova::Api::Base::CartesianLimitation)},
  { 419, -1, sizeof(::Kinova::Api::Base::TwistLimitation)},
  { 426, -1, sizeof(::Kinova::Api::Base::WrenchLimitation)},
  { 433, -1, sizeof(::Kinova::Api::Base::CartesianLimitationList)},
  { 439, -1, sizeof(::Kinova::Api::Base::JointLimitation)},
  { 447, -1, sizeof(::Kinova::Api::Base::JointsLimitationsList)},
  { 453, -1, sizeof(::Kinova::Api::Base::Query)},
  { 461, -1, sizeof(::Kinova::Api::Base::ConfigurationChangeNotification)},
  { 482, -1, sizeof(::Kinova::Api::Base::MappingInfoNotification)},
  { 493, -1, sizeof(::Kinova::Api::Base::ControlModeInformation)},
  { 499, -1, sizeof(::Kinova::Api::Base::ControlModeNotification)},
  { 508, -1, sizeof(::Kinova::Api::Base::ServoingModeInformation)},
  { 514, -1, sizeof(::Kinova::Api::Base::OperatingModeInformation)},
  { 521, -1, sizeof(::Kinova::Api::Base::OperatingModeNotification)},
  { 531, -1, sizeof(::Kinova::Api::Base::ServoingModeNotification)},
  { 540, -1, sizeof(::Kinova::Api::Base::SequenceInfoNotification)},
  { 553, -1, sizeof(::Kinova::Api::Base::SequenceInformation)},
  { 561, -1, sizeof(::Kinova::Api::Base::ProtectionZoneNotification)},
  { 571, -1, sizeof(::Kinova::Api::Base::ProtectionZoneInformation)},
  { 577, -1, sizeof(::Kinova::Api::Base::UserNotification)},
  { 587, -1, sizeof(::Kinova::Api::Base::ControllerHandle)},
  { 594, -1, sizeof(::Kinova::Api::Base::ControllerElementHandle)},
  { 603, -1, sizeof(::Kinova::Api::Base::ControllerNotification)},
  { 614, -1, sizeof(::Kinova::Api::Base::ControllerList)},
  { 620, -1, sizeof(::Kinova::Api::Base::ControllerState)},
  { 627, -1, sizeof(::Kinova::Api::Base::ControllerElementState)},
  { 635, -1, sizeof(::Kinova::Api::Base::ActionNotification)},
  { 647, -1, sizeof(::Kinova::Api::Base::TrajectoryInfo)},
  { 655, -1, sizeof(::Kinova::Api::Base::ActionExecutionState)},
  { 662, -1, sizeof(::Kinova::Api::Base::RobotEventNotification)},
  { 672, -1, sizeof(::Kinova::Api::Base::FactoryNotification)},
  { 681, -1, sizeof(::Kinova::Api::Base::NetworkNotification)},
  { 690, -1, sizeof(::Kinova::Api::Base::ConfigurationChangeNotificationList)},
  { 696, -1, sizeof(::Kinova::Api::Base::MappingInfoNotificationList)},
  { 702, -1, sizeof(::Kinova::Api::Base::ControlModeNotificationList)},
  { 708, -1, sizeof(::Kinova::Api::Base::OperatingModeNotificationList)},
  { 714, -1, sizeof(::Kinova::Api::Base::ServoingModeNotificationList)},
  { 720, -1, sizeof(::Kinova::Api::Base::SequenceInfoNotificationList)},
  { 726, -1, sizeof(::Kinova::Api::Base::ProtectionZoneNotificationList)},
  { 732, -1, sizeof(::Kinova::Api::Base::UserNotificationList)},
  { 738, -1, sizeof(::Kinova::Api::Base::SafetyNotificationList)},
  { 744, -1, sizeof(::Kinova::Api::Base::ControllerNotificationList)},
  { 750, -1, sizeof(::Kinova::Api::Base::ActionNotificationList)},
  { 756, -1, sizeof(::Kinova::Api::Base::RobotEventNotificationList)},
  { 762, -1, sizeof(::Kinova::Api::Base::NetworkNotificationList)},
  { 768, -1, sizeof(::Kinova::Api::Base::MappingHandle)},
  { 775, -1, sizeof(::Kinova::Api::Base::SafetyEvent)},
  { 781, -1, sizeof(::Kinova::Api::Base::ControllerEvent)},
  { 789, -1, sizeof(::Kinova::Api::Base::GpioEvent)},
  { 797, -1, sizeof(::Kinova::Api::Base::MapEvent)},
  { 807, -1, sizeof(::Kinova::Api::Base::MapElement)},
  { 815, -1, sizeof(::Kinova::Api::Base::ActivateMapHandle)},
  { 823, -1, sizeof(::Kinova::Api::Base::Map)},
  { 831, -1, sizeof(::Kinova::Api::Base::MapHandle)},
  { 838, -1, sizeof(::Kinova::Api::Base::MapList)},
  { 844, -1, sizeof(::Kinova::Api::Base::MapGroupHandle)},
  { 851, -1, sizeof(::Kinova::Api::Base::MapGroup)},
  { 863, -1, sizeof(::Kinova::Api::Base::MapGroupList)},
  { 869, -1, sizeof(::Kinova::Api::Base::Mapping)},
  { 882, -1, sizeof(::Kinova::Api::Base::MappingList)},
  { 888, -1, sizeof(::Kinova::Api::Base::TransformationMatrix)},
  { 897, -1, sizeof(::Kinova::Api::Base::TransformationRow)},
  { 906, -1, sizeof(::Kinova::Api::Base::Pose)},
  { 917, -1, sizeof(::Kinova::Api::Base::Position)},
  { 925, -1, sizeof(::Kinova::Api::Base::Orientation)},
  { 933, -1, sizeof(::Kinova::Api::Base::CartesianSpeed)},
  { 940, -1, sizeof(::Kinova::Api::Base::CartesianTrajectoryConstraint)},
  { 948, -1, sizeof(::Kinova::Api::Base::JointTrajectoryConstraint)},
  { 955, -1, sizeof(::Kinova::Api::Base::Wrench)},
  { 966, -1, sizeof(::Kinova::Api::Base::Twist)},
  { 977, -1, sizeof(::Kinova::Api::Base::Admittance)},
  { 983, -1, sizeof(::Kinova::Api::Base::ConstrainedPose)},
  { 990, -1, sizeof(::Kinova::Api::Base::ConstrainedPosition)},
  { 997, -1, sizeof(::Kinova::Api::Base::ConstrainedOrientation)},
  { 1004, -1, sizeof(::Kinova::Api::Base::WrenchCommand)},
  { 1013, -1, sizeof(::Kinova::Api::Base::TwistCommand)},
  { 1021, -1, sizeof(::Kinova::Api::Base::ConstrainedJointAngles)},
  { 1028, -1, sizeof(::Kinova::Api::Base::ConstrainedJointAngle)},
  { 1036, -1, sizeof(::Kinova::Api::Base::JointAngles)},
  { 1042, -1, sizeof(::Kinova::Api::Base::JointAngle)},
  { 1049, -1, sizeof(::Kinova::Api::Base::JointSpeeds)},
  { 1056, -1, sizeof(::Kinova::Api::Base::JointSpeed)},
  { 1064, -1, sizeof(::Kinova::Api::Base::JointTorques)},
  { 1071, -1, sizeof(::Kinova::Api::Base::JointTorque)},
  { 1079, -1, sizeof(::Kinova::Api::Base::GripperCommand)},
  { 1087, -1, sizeof(::Kinova::Api::Base::GripperRequest)},
  { 1093, -1, sizeof(::Kinova::Api::Base::Gripper)},
  { 1099, -1, sizeof(::Kinova::Api::Base::Finger)},
  { 1106, -1, sizeof(::Kinova::Api::Base::GpioCommand)},
  { 1115, -1, sizeof(::Kinova::Api::Base::SystemTime)},
  { 1126, -1, sizeof(::Kinova::Api::Base::ControllerConfigurationMode)},
  { 1132, -1, sizeof(::Kinova::Api::Base::ControllerConfiguration)},
  { 1142, -1, sizeof(::Kinova::Api::Base::ControllerConfigurationList)},
  { 1148, -1, sizeof(::Kinova::Api::Base::ActuatorInformation)},
  { 1154, -1, sizeof(::Kinova::Api::Base::ArmStateInformation)},
  { 1161, -1, sizeof(::Kinova::Api::Base::ArmStateNotification)},
  { 1169, -1, sizeof(::Kinova::Api::Base::CapSenseConfig)},
  { 1180, -1, sizeof(::Kinova::Api::Base::BridgeList)},
  { 1186, -1, sizeof(::Kinova::Api::Base::BridgeResult)},
  { 1193, -1, sizeof(::Kinova::Api::Base::BridgeIdentifier)},
  { 1199, -1, sizeof(::Kinova::Api::Base::BridgeConfig)},
  { 1208, -1, sizeof(::Kinova::Api::Base::BridgePortConfig)},
  { 1215, -1, sizeof(::Kinova::Api::Base::PreComputedJointTrajectory)},
  { 1222, -1, sizeof(::Kinova::Api::Base::PreComputedJointTrajectoryElement)},
  { 1231, -1, sizeof(::Kinova::Api::Base::TrajectoryErrorElement)},
  { 1244, -1, sizeof(::Kinova::Api::Base::TrajectoryErrorReport)},
  { 1250, -1, sizeof(::Kinova::Api::Base::WaypointValidationReport)},
  { 1257, -1, sizeof(::Kinova::Api::Base::Waypoint)},
  { 1266, -1, sizeof(::Kinova::Api::Base::AngularWaypoint)},
  { 1274, -1, sizeof(::Kinova::Api::Base::CartesianWaypoint)},
  { 1284, -1, sizeof(::Kinova::Api::Base::WaypointList)},
  { 1292, -1, sizeof(::Kinova::Api::Base::KinematicTrajectoryConstraints)},
  { 1300, -1, sizeof(::Kinova::Api::Base::FirmwareBundleVersions)},
  { 1307, -1, sizeof(::Kinova::Api::Base::FirmwareComponentVersion)},
  { 1315, -1, sizeof(::Kinova::Api::Base::IKData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_GpioConfigurationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_GpioConfiguration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_GpioPinConfiguration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_FullUserProfile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_UserProfile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_UserProfileList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_UserList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_PasswordChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_SequenceHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_AdvancedSequenceHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_SequenceTaskHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_SequenceTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_SequenceTasks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_SequenceTasksConfiguration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_SequenceTaskConfiguration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_SequenceTasksRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_SequenceTasksPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Sequence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_SequenceList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_AppendActionInformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ActionHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_RequestedActionType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Action_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Snapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_SwitchControlMapping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ChangeTwist_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ChangeJointSpeeds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ChangeWrench_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_EmergencyStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Faults_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Delay_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Stop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ActionList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Timeout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Ssid_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_CommunicationInterfaceConfiguration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_NetworkHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_IPv4Configuration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_IPv4Information_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_FullIPv4Configuration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_WifiEnableState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_BluetoothEnableState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_RFConfiguration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_WifiInformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_WifiInformationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_WifiConfiguration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_WifiConfigurationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ProtectionZoneHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_RotationMatrixRow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_RotationMatrix_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ZoneShape_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ProtectionZone_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ProtectionZoneList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_CartesianLimitation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_TwistLimitation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_WrenchLimitation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_CartesianLimitationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_JointLimitation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_JointsLimitationsList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ConfigurationChangeNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_MappingInfoNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ControlModeInformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ControlModeNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ServoingModeInformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_OperatingModeInformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_OperatingModeNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ServoingModeNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_SequenceInfoNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_SequenceInformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ProtectionZoneNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ProtectionZoneInformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_UserNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ControllerHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ControllerElementHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ControllerNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ControllerList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ControllerState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ControllerElementState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ActionNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_TrajectoryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ActionExecutionState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_RobotEventNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_FactoryNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_NetworkNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ConfigurationChangeNotificationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_MappingInfoNotificationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ControlModeNotificationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_OperatingModeNotificationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ServoingModeNotificationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_SequenceInfoNotificationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ProtectionZoneNotificationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_UserNotificationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_SafetyNotificationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ControllerNotificationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ActionNotificationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_RobotEventNotificationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_NetworkNotificationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_MappingHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_SafetyEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ControllerEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_GpioEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_MapEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_MapElement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ActivateMapHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Map_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_MapHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_MapList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_MapGroupHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_MapGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_MapGroupList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Mapping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_MappingList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_TransformationMatrix_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_TransformationRow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Pose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Orientation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_CartesianSpeed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_CartesianTrajectoryConstraint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_JointTrajectoryConstraint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Wrench_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Twist_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Admittance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ConstrainedPose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ConstrainedPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ConstrainedOrientation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_WrenchCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_TwistCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ConstrainedJointAngles_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ConstrainedJointAngle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_JointAngles_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_JointAngle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_JointSpeeds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_JointSpeed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_JointTorques_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_JointTorque_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_GripperCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_GripperRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Gripper_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Finger_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_GpioCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_SystemTime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ControllerConfigurationMode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ControllerConfiguration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ControllerConfigurationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ActuatorInformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ArmStateInformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_ArmStateNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_CapSenseConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_BridgeList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_BridgeResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_BridgeIdentifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_BridgeConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_BridgePortConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_PreComputedJointTrajectory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_PreComputedJointTrajectoryElement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_TrajectoryErrorElement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_TrajectoryErrorReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_WaypointValidationReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_Waypoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_AngularWaypoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_CartesianWaypoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_WaypointList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_KinematicTrajectoryConstraints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_FirmwareBundleVersions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_FirmwareComponentVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Base::_IKData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Base.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 169);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nBase.proto\022\017Kinova.Api.Base\032\014Common.pr"
      "oto\032\014Errors.proto\032\032ProductConfiguration."
      "proto\"X\n\025GpioConfigurationList\022\?\n\023port_c"
      "onfigurations\030\001 \003(\0132\".Kinova.Api.Base.Gp"
      "ioConfiguration\"k\n\021GpioConfiguration\022\023\n\013"
      "port_number\030\001 \001(\r\022A\n\022pin_configurations\030"
      "\002 \003(\0132%.Kinova.Api.Base.GpioPinConfigura"
      "tion\"\230\001\n\024GpioPinConfiguration\022\016\n\006pin_id\030"
      "\001 \001(\r\022;\n\014pin_property\030\002 \001(\0162%.Kinova.Api"
      ".Base.GpioPinPropertyFlags\022\025\n\routput_ena"
      "ble\030\003 \001(\010\022\034\n\024default_output_value\030\004 \001(\010\""
      "W\n\017FullUserProfile\0222\n\014user_profile\030\001 \001(\013"
      "2\034.Kinova.Api.Base.UserProfile\022\020\n\010passwo"
      "rd\030\002 \001(\t\"\224\001\n\013UserProfile\0224\n\006handle\030\001 \001(\013"
      "2$.Kinova.Api.Common.UserProfileHandle\022\020"
      "\n\010username\030\002 \001(\t\022\021\n\tfirstname\030\003 \001(\t\022\020\n\010l"
      "astname\030\004 \001(\t\022\030\n\020application_data\030\005 \001(\t\""
      "F\n\017UserProfileList\0223\n\ruser_profiles\030\001 \003("
      "\0132\034.Kinova.Api.Base.UserProfile\"F\n\010UserL"
      "ist\022:\n\014user_handles\030\001 \003(\0132$.Kinova.Api.C"
      "ommon.UserProfileHandle\"r\n\016PasswordChang"
      "e\0224\n\006handle\030\001 \001(\0132$.Kinova.Api.Common.Us"
      "erProfileHandle\022\024\n\014old_password\030\002 \001(\t\022\024\n"
      "\014new_password\030\003 \001(\t\"8\n\016SequenceHandle\022\022\n"
      "\nidentifier\030\001 \001(\r\022\022\n\npermission\030\002 \001(\007\"Z\n"
      "\026AdvancedSequenceHandle\022/\n\006handle\030\001 \001(\0132"
      "\037.Kinova.Api.Base.SequenceHandle\022\017\n\007in_l"
      "oop\030\002 \001(\010\"b\n\022SequenceTaskHandle\0228\n\017seque"
      "nce_handle\030\001 \001(\0132\037.Kinova.Api.Base.Seque"
      "nceHandle\022\022\n\ntask_index\030\002 \001(\r\"k\n\014Sequenc"
      "eTask\022\030\n\020group_identifier\030\001 \001(\r\022\'\n\006actio"
      "n\030\002 \001(\0132\027.Kinova.Api.Base.Action\022\030\n\020appl"
      "ication_data\030\003 \001(\t\"F\n\rSequenceTasks\0225\n\016s"
      "equence_tasks\030\001 \003(\0132\035.Kinova.Api.Base.Se"
      "quenceTask\"\226\001\n\032SequenceTasksConfiguratio"
      "n\022A\n\024sequence_task_handle\030\001 \001(\0132#.Kinova"
      ".Api.Base.SequenceTaskHandle\0225\n\016sequence"
      "_tasks\030\002 \003(\0132\035.Kinova.Api.Base.SequenceT"
      "ask\"\224\001\n\031SequenceTaskConfiguration\022A\n\024seq"
      "uence_task_handle\030\001 \001(\0132#.Kinova.Api.Bas"
      "e.SequenceTaskHandle\0224\n\rsequence_task\030\002 "
      "\001(\0132\035.Kinova.Api.Base.SequenceTask\"I\n\022Se"
      "quenceTasksRange\022\030\n\020first_task_index\030\001 \001"
      "(\r\022\031\n\021second_task_index\030\002 \001(\r\"\202\001\n\021Sequen"
      "ceTasksPair\0228\n\017sequence_handle\030\001 \001(\0132\037.K"
      "inova.Api.Base.SequenceHandle\022\030\n\020first_t"
      "ask_index\030\002 \001(\r\022\031\n\021second_task_index\030\003 \001"
      "(\r\"\221\001\n\010Sequence\022/\n\006handle\030\001 \001(\0132\037.Kinova"
      ".Api.Base.SequenceHandle\022\014\n\004name\030\002 \001(\t\022\030"
      "\n\020application_data\030\003 \001(\t\022,\n\005tasks\030\004 \003(\0132"
      "\035.Kinova.Api.Base.SequenceTask\"@\n\014Sequen"
      "ceList\0220\n\rsequence_list\030\001 \003(\0132\031.Kinova.A"
      "pi.Base.Sequence\"|\n\027AppendActionInformat"
      "ion\0228\n\017sequence_handle\030\001 \001(\0132\037.Kinova.Ap"
      "i.Base.SequenceHandle\022\'\n\006action\030\002 \001(\0132\027."
      "Kinova.Api.Base.Action\"h\n\014ActionHandle\022\022"
      "\n\nidentifier\030\001 \001(\r\0220\n\013action_type\030\002 \001(\0162"
      "\033.Kinova.Api.Base.ActionType\022\022\n\npermissi"
      "on\030\003 \001(\007\"G\n\023RequestedActionType\0220\n\013actio"
      "n_type\030\001 \001(\0162\033.Kinova.Api.Base.ActionTyp"
      "e\"\356\013\n\006Action\022-\n\006handle\030\001 \001(\0132\035.Kinova.Ap"
      "i.Base.ActionHandle\022\014\n\004name\030\002 \001(\t\022\030\n\020app"
      "lication_data\030\003 \001(\t\022;\n\022send_twist_comman"
      "d\030\004 \001(\0132\035.Kinova.Api.Base.TwistCommandH\000"
      "\022=\n\023send_wrench_command\030\005 \001(\0132\036.Kinova.A"
      "pi.Base.WrenchCommandH\000\0229\n\021send_joint_sp"
      "eeds\030\007 \001(\0132\034.Kinova.Api.Base.JointSpeeds"
      "H\000\0226\n\nreach_pose\030\t \001(\0132 .Kinova.Api.Base"
      ".ConstrainedPoseH\000\022E\n\022reach_joint_angles"
      "\030\n \001(\0132\'.Kinova.Api.Base.ConstrainedJoin"
      "tAnglesH\000\022A\n\026toggle_admittance_mode\030\020 \001("
      "\0162\037.Kinova.Api.Base.AdmittanceModeH\000\022-\n\010"
      "snapshot\030\021 \001(\0132\031.Kinova.Api.Base.Snapsho"
      "tH\000\022G\n\026switch_control_mapping\030\023 \001(\0132%.Ki"
      "nova.Api.Base.SwitchControlMappingH\000\022D\n\017"
      "navigate_joints\030\024 \001(\0162).Kinova.Api.Base."
      "JointNavigationDirectionH\000\022A\n\021navigate_m"
      "appings\030\025 \001(\0162$.Kinova.Api.Base.Navigati"
      "onDirectionH\000\0224\n\014change_twist\030\031 \001(\0132\034.Ki"
      "nova.Api.Base.ChangeTwistH\000\022A\n\023change_jo"
      "int_speeds\030\032 \001(\0132\".Kinova.Api.Base.Chang"
      "eJointSpeedsH\000\0226\n\rchange_wrench\030\034 \001(\0132\035."
      "Kinova.Api.Base.ChangeWrenchH\000\022>\n\024apply_"
      "emergency_stop\030\037 \001(\0132\036.Kinova.Api.Base.E"
      "mergencyStopH\000\022/\n\014clear_faults\030  \001(\0132\027.K"
      "inova.Api.Base.FaultsH\000\022\'\n\005delay\030\" \001(\0132\026"
      ".Kinova.Api.Base.DelayH\000\0227\n\016execute_acti"
      "on\030# \001(\0132\035.Kinova.Api.Base.ActionHandleH"
      "\000\022\?\n\024send_gripper_command\030$ \001(\0132\037.Kinova"
      ".Api.Base.GripperCommandH\000\0229\n\021send_gpio_"
      "command\030% \001(\0132\034.Kinova.Api.Base.GpioComm"
      "andH\000\022,\n\013stop_action\030& \001(\0132\025.Kinova.Api."
      "Base.StopH\000\022S\n\034play_pre_computed_traject"
      "ory\030\' \001(\0132+.Kinova.Api.Base.PreComputedJ"
      "ointTrajectoryH\000\022;\n\020execute_sequence\030( \001"
      "(\0132\037.Kinova.Api.Base.SequenceHandleH\000\022>\n"
      "\025execute_waypoint_list\030) \001(\0132\035.Kinova.Ap"
      "i.Base.WaypointListH\000B\023\n\021action_paramete"
      "rs\"@\n\010Snapshot\0224\n\rsnapshot_type\030\001 \001(\0162\035."
      "Kinova.Api.Base.SnapshotType\"\240\001\n\024SwitchC"
      "ontrolMapping\022\035\n\025controller_identifier\030\001"
      " \001(\r\0229\n\020map_group_handle\030\002 \001(\0132\037.Kinova."
      "Api.Base.MapGroupHandle\022.\n\nmap_handle\030\003 "
      "\001(\0132\032.Kinova.Api.Base.MapHandle\".\n\013Chang"
      "eTwist\022\016\n\006linear\030\001 \001(\002\022\017\n\007angular\030\002 \001(\002\""
      "G\n\021ChangeJointSpeeds\0222\n\014joint_speeds\030\001 \001"
      "(\0132\034.Kinova.Api.Base.JointSpeeds\"-\n\014Chan"
      "geWrench\022\r\n\005force\030\001 \001(\002\022\016\n\006torque\030\002 \001(\002\""
      "\017\n\rEmergencyStop\"\010\n\006Faults\"\031\n\005Delay\022\020\n\010d"
      "uration\030\001 \001(\r\"\006\n\004Stop\":\n\nActionList\022,\n\013a"
      "ction_list\030\001 \003(\0132\027.Kinova.Api.Base.Actio"
      "n\"\030\n\007Timeout\022\r\n\005value\030\001 \001(\r\"\032\n\004Ssid\022\022\n\ni"
      "dentifier\030\001 \001(\t\"a\n#CommunicationInterfac"
      "eConfiguration\022*\n\004type\030\001 \001(\0162\034.Kinova.Ap"
      "i.Base.NetworkType\022\016\n\006enable\030\002 \001(\010\";\n\rNe"
      "tworkHandle\022*\n\004type\030\001 \001(\0162\034.Kinova.Api.B"
      "ase.NetworkType\"k\n\021IPv4Configuration\022\022\n\n"
      "ip_address\030\001 \001(\r\022\023\n\013subnet_mask\030\002 \001(\r\022\027\n"
      "\017default_gateway\030\003 \001(\r\022\024\n\014dhcp_enabled\030\004"
      " \001(\010\"S\n\017IPv4Information\022\022\n\nip_address\030\001 "
      "\001(\r\022\023\n\013subnet_mask\030\002 \001(\r\022\027\n\017default_gate"
      "way\030\003 \001(\r\"\207\001\n\025FullIPv4Configuration\022.\n\006h"
      "andle\030\001 \001(\0132\036.Kinova.Api.Base.NetworkHan"
      "dle\022>\n\022ipv4_configuration\030\002 \001(\0132\".Kinova"
      ".Api.Base.IPv4Configuration\"\"\n\017WifiEnabl"
      "eState\022\017\n\007enabled\030\001 \001(\010\"\'\n\024BluetoothEnab"
      "leState\022\017\n\007enabled\030\001 \001(\010\"\225\001\n\017RFConfigura"
      "tion\022;\n\021wifi_enable_state\030\001 \001(\0132 .Kinova"
      ".Api.Base.WifiEnableState\022E\n\026bluetooth_e"
      "nable_state\030\002 \001(\0132%.Kinova.Api.Base.Blue"
      "toothEnableState\"\333\001\n\017WifiInformation\022#\n\004"
      "ssid\030\001 \001(\0132\025.Kinova.Api.Base.Ssid\022\025\n\rsec"
      "urity_type\030\002 \001(\007\022\027\n\017encryption_type\030\003 \001("
      "\007\0226\n\016signal_quality\030\004 \001(\0162\036.Kinova.Api.B"
      "ase.SignalQuality\022\027\n\017signal_strength\030\005 \001"
      "(\005\022\021\n\tfrequency\030\006 \001(\r\022\017\n\007channel\030\007 \001(\r\"V"
      "\n\023WifiInformationList\022\?\n\025wifi_informatio"
      "n_list\030\001 \003(\0132 .Kinova.Api.Base.WifiInfor"
      "mation\"m\n\021WifiConfiguration\022#\n\004ssid\030\001 \001("
      "\0132\025.Kinova.Api.Base.Ssid\022\024\n\014security_key"
      "\030\002 \001(\t\022\035\n\025connect_automatically\030\003 \001(\010\"\\\n"
      "\025WifiConfigurationList\022C\n\027wifi_configura"
      "tion_list\030\001 \003(\0132\".Kinova.Api.Base.WifiCo"
      "nfiguration\">\n\024ProtectionZoneHandle\022\022\n\ni"
      "dentifier\030\001 \001(\r\022\022\n\npermission\030\002 \001(\007\"F\n\021R"
      "otationMatrixRow\022\017\n\007column1\030\001 \001(\002\022\017\n\007col"
      "umn2\030\002 \001(\002\022\017\n\007column3\030\003 \001(\002\"\246\001\n\016Rotation"
      "Matrix\0220\n\004row1\030\001 \001(\0132\".Kinova.Api.Base.R"
      "otationMatrixRow\0220\n\004row2\030\002 \001(\0132\".Kinova."
      "Api.Base.RotationMatrixRow\0220\n\004row3\030\003 \001(\013"
      "2\".Kinova.Api.Base.RotationMatrixRow\"(\n\005"
      "Point\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\311"
      "\001\n\tZoneShape\022.\n\nshape_type\030\001 \001(\0162\032.Kinov"
      "a.Api.Base.ShapeType\022&\n\006origin\030\002 \001(\0132\026.K"
      "inova.Api.Base.Point\0224\n\013orientation\030\003 \001("
      "\0132\037.Kinova.Api.Base.RotationMatrix\022\022\n\ndi"
      "mensions\030\004 \003(\002\022\032\n\022envelope_thickness\030\005 \001"
      "(\002\"\255\002\n\016ProtectionZone\0225\n\006handle\030\001 \001(\0132%."
      "Kinova.Api.Base.ProtectionZoneHandle\022\014\n\004"
      "name\030\002 \001(\t\022\030\n\020application_data\030\003 \001(\t\022\022\n\n"
      "is_enabled\030\004 \001(\010\022)\n\005shape\030\005 \001(\0132\032.Kinova"
      ".Api.Base.ZoneShape\0229\n\013limitations\030\006 \003(\013"
      "2$.Kinova.Api.Base.CartesianLimitation\022B"
      "\n\024envelope_limitations\030\007 \003(\0132$.Kinova.Ap"
      "i.Base.CartesianLimitation\"O\n\022Protection"
      "ZoneList\0229\n\020protection_zones\030\001 \003(\0132\037.Kin"
      "ova.Api.Base.ProtectionZone\"n\n\023Cartesian"
      "Limitation\022-\n\004type\030\001 \001(\0162\037.Kinova.Api.Ba"
      "se.LimitationType\022\023\n\013translation\030\002 \001(\002\022\023"
      "\n\013orientation\030\003 \001(\002\"2\n\017TwistLimitation\022\016"
      "\n\006linear\030\001 \001(\002\022\017\n\007angular\030\002 \001(\002\"1\n\020Wrenc"
      "hLimitation\022\r\n\005force\030\001 \001(\002\022\016\n\006torque\030\002 \001"
      "(\002\"T\n\027CartesianLimitationList\0229\n\013limitat"
      "ions\030\001 \003(\0132$.Kinova.Api.Base.CartesianLi"
      "mitation\"i\n\017JointLimitation\022\030\n\020joint_ide"
      "ntifier\030\001 \001(\r\022-\n\004type\030\002 \001(\0162\037.Kinova.Api"
      ".Base.LimitationType\022\r\n\005value\030\003 \001(\002\"U\n\025J"
      "ointsLimitationsList\022<\n\022joints_limitatio"
      "ns\030\001 \003(\0132 .Kinova.Api.Base.JointLimitati"
      "on\"\205\001\n\005Query\0225\n\017start_timestamp\030\001 \001(\0132\034."
      "Kinova.Api.Common.Timestamp\0223\n\rend_times"
      "tamp\030\002 \001(\0132\034.Kinova.Api.Common.Timestamp"
      "\022\020\n\010username\030\003 \001(\t\"\236\007\n\037ConfigurationChan"
      "geNotification\022>\n\005event\030\001 \001(\0162/.Kinova.A"
      "pi.Base.ConfigurationNotificationEvent\022/"
      "\n\ttimestamp\030\002 \001(\0132\034.Kinova.Api.Common.Ti"
      "mestamp\0229\n\013user_handle\030\003 \001(\0132$.Kinova.Ap"
      "i.Common.UserProfileHandle\022:\n\017sequence_h"
      "andle\030\004 \001(\0132\037.Kinova.Api.Base.SequenceHa"
      "ndleH\000\0226\n\raction_handle\030\005 \001(\0132\035.Kinova.A"
      "pi.Base.ActionHandleH\000\0228\n\016mapping_handle"
      "\030\006 \001(\0132\036.Kinova.Api.Base.MappingHandleH\000"
      "\022;\n\020map_group_handle\030\007 \001(\0132\037.Kinova.Api."
      "Base.MapGroupHandleH\000\0220\n\nmap_handle\030\010 \001("
      "\0132\032.Kinova.Api.Base.MapHandleH\000\022C\n\023user_"
      "profile_handle\030\t \001(\0132$.Kinova.Api.Common"
      ".UserProfileHandleH\000\022G\n\026protection_zone_"
      "handle\030\n \001(\0132%.Kinova.Api.Base.Protectio"
      "nZoneHandleH\000\0228\n\rsafety_handle\030\013 \001(\0132\037.K"
      "inova.Api.Common.SafetyHandleH\000\0228\n\016netwo"
      "rk_handle\030\014 \001(\0132\036.Kinova.Api.Base.Networ"
      "kHandleH\000\022%\n\004ssid\030\016 \001(\0132\025.Kinova.Api.Bas"
      "e.SsidH\000\022>\n\021controller_handle\030\020 \001(\0132!.Ki"
      "nova.Api.Base.ControllerHandleH\000\0221\n\nconn"
      "ection\030\017 \001(\0132\035.Kinova.Api.Common.Connect"
      "ionB\026\n\024configuration_change\"\306\002\n\027MappingI"
      "nfoNotification\022\035\n\025controller_identifier"
      "\030\001 \001(\r\0225\n\021active_map_handle\030\002 \001(\0132\032.Kino"
      "va.Api.Base.MapHandle\022/\n\ttimestamp\030\003 \001(\013"
      "2\034.Kinova.Api.Common.Timestamp\0229\n\013user_h"
      "andle\030\004 \001(\0132$.Kinova.Api.Common.UserProf"
      "ileHandle\0221\n\nconnection\030\005 \001(\0132\035.Kinova.A"
      "pi.Common.Connection\0226\n\016mapping_handle\030\006"
      " \001(\0132\036.Kinova.Api.Base.MappingHandle\"D\n\026"
      "ControlModeInformation\022*\n\004mode\030\001 \001(\0162\034.K"
      "inova.Api.Base.ControlMode\"\354\001\n\027ControlMo"
      "deNotification\0222\n\014control_mode\030\001 \001(\0162\034.K"
      "inova.Api.Base.ControlMode\022/\n\ttimestamp\030"
      "\002 \001(\0132\034.Kinova.Api.Common.Timestamp\0229\n\013u"
      "ser_handle\030\003 \001(\0132$.Kinova.Api.Common.Use"
      "rProfileHandle\0221\n\nconnection\030\004 \001(\0132\035.Kin"
      "ova.Api.Common.Connection\"O\n\027ServoingMod"
      "eInformation\0224\n\rservoing_mode\030\001 \001(\0162\035.Ki"
      "nova.Api.Base.ServoingMode\"\212\001\n\030Operating"
      "ModeInformation\0226\n\016operating_mode\030\001 \001(\0162"
      "\036.Kinova.Api.Base.OperatingMode\0226\n\rdevic"
      "e_handle\030\002 \001(\0132\037.Kinova.Api.Common.Devic"
      "eHandle\"\252\002\n\031OperatingModeNotification\0226\n"
      "\016operating_mode\030\001 \001(\0162\036.Kinova.Api.Base."
      "OperatingMode\022/\n\ttimestamp\030\002 \001(\0132\034.Kinov"
      "a.Api.Common.Timestamp\0229\n\013user_handle\030\003 "
      "\001(\0132$.Kinova.Api.Common.UserProfileHandl"
      "e\0221\n\nconnection\030\004 \001(\0132\035.Kinova.Api.Commo"
      "n.Connection\0226\n\rdevice_handle\030\005 \001(\0132\037.Ki"
      "nova.Api.Common.DeviceHandle\"\357\001\n\030Servoin"
      "gModeNotification\0224\n\rservoing_mode\030\001 \001(\016"
      "2\035.Kinova.Api.Base.ServoingMode\022/\n\ttimes"
      "tamp\030\002 \001(\0132\034.Kinova.Api.Common.Timestamp"
      "\0229\n\013user_handle\030\003 \001(\0132$.Kinova.Api.Commo"
      "n.UserProfileHandle\0221\n\nconnection\030\004 \001(\0132"
      "\035.Kinova.Api.Common.Connection\"\237\003\n\030Seque"
      "nceInfoNotification\022J\n\020event_identifier\030"
      "\001 \001(\01620.Kinova.Api.Base.EventIdSequenceI"
      "nfoNotification\0228\n\017sequence_handle\030\002 \001(\013"
      "2\037.Kinova.Api.Base.SequenceHandle\022\022\n\ntas"
      "k_index\030\003 \001(\r\022\030\n\020group_identifier\030\004 \001(\r\022"
      "/\n\ttimestamp\030\005 \001(\0132\034.Kinova.Api.Common.T"
      "imestamp\0229\n\013user_handle\030\006 \001(\0132$.Kinova.A"
      "pi.Common.UserProfileHandle\0220\n\rabort_det"
      "ails\030\007 \001(\0162\031.Kinova.Api.SubErrorCodes\0221\n"
      "\nconnection\030\010 \001(\0132\035.Kinova.Api.Common.Co"
      "nnection\"\216\001\n\023SequenceInformation\022J\n\020even"
      "t_identifier\030\001 \001(\01620.Kinova.Api.Base.Eve"
      "ntIdSequenceInfoNotification\022\022\n\ntask_ind"
      "ex\030\002 \001(\r\022\027\n\017task_identifier\030\003 \001(\r\"\247\002\n\032Pr"
      "otectionZoneNotification\0223\n\005event\030\001 \001(\0162"
      "$.Kinova.Api.Base.ProtectionZoneEvent\0225\n"
      "\006handle\030\002 \001(\0132%.Kinova.Api.Base.Protecti"
      "onZoneHandle\022/\n\ttimestamp\030\003 \001(\0132\034.Kinova"
      ".Api.Common.Timestamp\0229\n\013user_handle\030\004 \001"
      "(\0132$.Kinova.Api.Common.UserProfileHandle"
      "\0221\n\nconnection\030\005 \001(\0132\035.Kinova.Api.Common"
      ".Connection\"P\n\031ProtectionZoneInformation"
      "\0223\n\005event\030\001 \001(\0162$.Kinova.Api.Base.Protec"
      "tionZoneEvent\"\236\002\n\020UserNotification\022.\n\nus"
      "er_event\030\001 \001(\0162\032.Kinova.Api.Base.UserEve"
      "nt\022;\n\rmodified_user\030\002 \001(\0132$.Kinova.Api.C"
      "ommon.UserProfileHandle\022/\n\ttimestamp\030\003 \001"
      "(\0132\034.Kinova.Api.Common.Timestamp\0229\n\013user"
      "_handle\030\004 \001(\0132$.Kinova.Api.Common.UserPr"
      "ofileHandle\0221\n\nconnection\030\005 \001(\0132\035.Kinova"
      ".Api.Common.Connection\"`\n\020ControllerHand"
      "le\022-\n\004type\030\001 \001(\0162\037.Kinova.Api.Base.Contr"
      "ollerType\022\035\n\025controller_identifier\030\002 \001(\r"
      "\"\207\001\n\027ControllerElementHandle\022<\n\021controll"
      "er_handle\030\001 \001(\0132!.Kinova.Api.Base.Contro"
      "llerHandle\022\020\n\006button\030\002 \001(\rH\000\022\016\n\004axis\030\003 \001"
      "(\rH\000B\014\n\nidentifier\"\305\002\n\026ControllerNotific"
      "ation\022<\n\020controller_state\030\001 \001(\0132 .Kinova"
      ".Api.Base.ControllerStateH\000\022E\n\022controlle"
      "r_element\030\002 \001(\0132\'.Kinova.Api.Base.Contro"
      "llerElementStateH\000\022/\n\ttimestamp\030\003 \001(\0132\034."
      "Kinova.Api.Common.Timestamp\0229\n\013user_hand"
      "le\030\004 \001(\0132$.Kinova.Api.Common.UserProfile"
      "Handle\0221\n\nconnection\030\005 \001(\0132\035.Kinova.Api."
      "Common.ConnectionB\007\n\005state\"D\n\016Controller"
      "List\0222\n\007handles\030\001 \003(\0132!.Kinova.Api.Base."
      "ControllerHandle\"~\n\017ControllerState\0221\n\006h"
      "andle\030\001 \001(\0132!.Kinova.Api.Base.Controller"
      "Handle\0228\n\nevent_type\030\002 \001(\0162$.Kinova.Api."
      "Base.ControllerEventType\"\247\001\n\026ControllerE"
      "lementState\0228\n\006handle\030\001 \001(\0132(.Kinova.Api"
      ".Base.ControllerElementHandle\022\?\n\nevent_t"
      "ype\030\002 \001(\0162+.Kinova.Api.Base.ControllerEl"
      "ementEventType\022\022\n\naxis_value\030\003 \001(\002\"\202\003\n\022A"
      "ctionNotification\0222\n\014action_event\030\001 \001(\0162"
      "\034.Kinova.Api.Base.ActionEvent\022-\n\006handle\030"
      "\002 \001(\0132\035.Kinova.Api.Base.ActionHandle\022/\n\t"
      "timestamp\030\003 \001(\0132\034.Kinova.Api.Common.Time"
      "stamp\0229\n\013user_handle\030\004 \001(\0132$.Kinova.Api."
      "Common.UserProfileHandle\0220\n\rabort_detail"
      "s\030\005 \001(\0162\031.Kinova.Api.SubErrorCodes\0221\n\nco"
      "nnection\030\006 \001(\0132\035.Kinova.Api.Common.Conne"
      "ction\0228\n\017trajectory_info\030\007 \003(\0132\037.Kinova."
      "Api.Base.TrajectoryInfo\"\200\001\n\016TrajectoryIn"
      "fo\022A\n\024trajectory_info_type\030\001 \001(\0162#.Kinov"
      "a.Api.Base.TrajectoryInfoType\022\026\n\016waypoin"
      "t_index\030\002 \001(\r\022\023\n\013joint_index\030\003 \001(\r\"y\n\024Ac"
      "tionExecutionState\0222\n\014action_event\030\001 \001(\016"
      "2\034.Kinova.Api.Base.ActionEvent\022-\n\006handle"
      "\030\002 \001(\0132\035.Kinova.Api.Base.ActionHandle\"\224\002"
      "\n\026RobotEventNotification\022*\n\005event\030\001 \001(\0162"
      "\033.Kinova.Api.Base.RobotEvent\022/\n\006handle\030\002"
      " \001(\0132\037.Kinova.Api.Common.DeviceHandle\022/\n"
      "\ttimestamp\030\003 \001(\0132\034.Kinova.Api.Common.Tim"
      "estamp\0229\n\013user_handle\030\004 \001(\0132$.Kinova.Api"
      ".Common.UserProfileHandle\0221\n\nconnection\030"
      "\006 \001(\0132\035.Kinova.Api.Common.Connection\"\342\001\n"
      "\023FactoryNotification\022,\n\005event\030\001 \001(\0162\035.Ki"
      "nova.Api.Base.FactoryEvent\022/\n\ttimestamp\030"
      "\002 \001(\0132\034.Kinova.Api.Common.Timestamp\0229\n\013u"
      "ser_handle\030\003 \001(\0132$.Kinova.Api.Common.Use"
      "rProfileHandle\0221\n\nconnection\030\004 \001(\0132\035.Kin"
      "ova.Api.Common.Connection\"\342\001\n\023NetworkNot"
      "ification\022,\n\005event\030\001 \001(\0162\035.Kinova.Api.Ba"
      "se.NetworkEvent\022/\n\ttimestamp\030\002 \001(\0132\034.Kin"
      "ova.Api.Common.Timestamp\0229\n\013user_handle\030"
      "\003 \001(\0132$.Kinova.Api.Common.UserProfileHan"
      "dle\0221\n\nconnection\030\004 \001(\0132\035.Kinova.Api.Com"
      "mon.Connection\"n\n#ConfigurationChangeNot"
      "ificationList\022G\n\rnotifications\030\001 \003(\01320.K"
      "inova.Api.Base.ConfigurationChangeNotifi"
      "cation\"^\n\033MappingInfoNotificationList\022\?\n"
      "\rnotifications\030\001 \003(\0132(.Kinova.Api.Base.M"
      "appingInfoNotification\"^\n\033ControlModeNot"
      "ificationList\022\?\n\rnotifications\030\001 \003(\0132(.K"
      "inova.Api.Base.ControlModeNotification\"b"
      "\n\035OperatingModeNotificationList\022A\n\rnotif"
      "ications\030\001 \003(\0132*.Kinova.Api.Base.Operati"
      "ngModeNotification\"`\n\034ServoingModeNotifi"
      "cationList\022@\n\rnotifications\030\001 \003(\0132).Kino"
      "va.Api.Base.ServoingModeNotification\"`\n\034"
      "SequenceInfoNotificationList\022@\n\rnotifica"
      "tions\030\001 \003(\0132).Kinova.Api.Base.SequenceIn"
      "foNotification\"d\n\036ProtectionZoneNotifica"
      "tionList\022B\n\rnotifications\030\001 \003(\0132+.Kinova"
      ".Api.Base.ProtectionZoneNotification\"P\n\024"
      "UserNotificationList\0228\n\rnotifications\030\001 "
      "\003(\0132!.Kinova.Api.Base.UserNotification\"V"
      "\n\026SafetyNotificationList\022<\n\rnotification"
      "s\030\001 \003(\0132%.Kinova.Api.Common.SafetyNotifi"
      "cation\"\\\n\032ControllerNotificationList\022>\n\r"
      "notifications\030\001 \003(\0132\'.Kinova.Api.Base.Co"
      "ntrollerNotification\"T\n\026ActionNotificati"
      "onList\022:\n\rnotifications\030\001 \003(\0132#.Kinova.A"
      "pi.Base.ActionNotification\"\\\n\032RobotEvent"
      "NotificationList\022>\n\rnotifications\030\001 \003(\0132"
      "\'.Kinova.Api.Base.RobotEventNotification"
      "\"V\n\027NetworkNotificationList\022;\n\rnotificat"
      "ions\030\001 \003(\0132$.Kinova.Api.Base.NetworkNoti"
      "fication\"7\n\rMappingHandle\022\022\n\nidentifier\030"
      "\001 \001(\r\022\022\n\npermission\030\002 \001(\007\"E\n\013SafetyEvent"
      "\0226\n\rsafety_handle\030\001 \001(\0132\037.Kinova.Api.Com"
      "mon.SafetyHandle\"\234\001\n\017ControllerEvent\0228\n\n"
      "input_type\030\001 \001(\0162$.Kinova.Api.Base.Contr"
      "ollerInputType\0225\n\010behavior\030\002 \001(\0162#.Kinov"
      "a.Api.Base.ControllerBehavior\022\030\n\020input_i"
      "dentifier\030\003 \001(\r\"\220\001\n\tGpioEvent\0228\n\ninput_t"
      "ype\030\001 \001(\0162$.Kinova.Api.Base.ControllerIn"
      "putType\022/\n\010behavior\030\002 \001(\0162\035.Kinova.Api.B"
      "ase.GpioBehavior\022\030\n\020input_identifier\030\003 \001"
      "(\r\"\310\001\n\010MapEvent\0224\n\014safety_event\030\001 \001(\0132\034."
      "Kinova.Api.Base.SafetyEventH\000\0220\n\ngpio_ev"
      "ent\030\002 \001(\0132\032.Kinova.Api.Base.GpioEventH\000\022"
      "<\n\020controller_event\030\003 \001(\0132 .Kinova.Api.B"
      "ase.ControllerEventH\000\022\014\n\004name\030\004 \001(\tB\010\n\006e"
      "vents\"m\n\nMapElement\022(\n\005event\030\001 \001(\0132\031.Kin"
      "ova.Api.Base.MapEvent\022\'\n\006action\030\002 \001(\0132\027."
      "Kinova.Api.Base.Action\022\014\n\004name\030\003 \001(\t\"\266\001\n"
      "\021ActivateMapHandle\0226\n\016mapping_handle\030\001 \001"
      "(\0132\036.Kinova.Api.Base.MappingHandle\0229\n\020ma"
      "p_group_handle\030\002 \001(\0132\037.Kinova.Api.Base.M"
      "apGroupHandle\022.\n\nmap_handle\030\003 \001(\0132\032.Kino"
      "va.Api.Base.MapHandle\"n\n\003Map\022*\n\006handle\030\001"
      " \001(\0132\032.Kinova.Api.Base.MapHandle\022\014\n\004name"
      "\030\002 \001(\t\022-\n\010elements\030\003 \003(\0132\033.Kinova.Api.Ba"
      "se.MapElement\"3\n\tMapHandle\022\022\n\nidentifier"
      "\030\001 \001(\r\022\022\n\npermission\030\002 \001(\007\"1\n\007MapList\022&\n"
      "\010map_list\030\001 \003(\0132\024.Kinova.Api.Base.Map\"8\n"
      "\016MapGroupHandle\022\022\n\nidentifier\030\001 \001(\r\022\022\n\np"
      "ermission\030\002 \001(\007\"\335\002\n\010MapGroup\0225\n\014group_ha"
      "ndle\030\001 \001(\0132\037.Kinova.Api.Base.MapGroupHan"
      "dle\022\014\n\004name\030\002 \001(\t\022>\n\026related_mapping_han"
      "dle\030\003 \001(\0132\036.Kinova.Api.Base.MappingHandl"
      "e\022<\n\023parent_group_handle\030\004 \001(\0132\037.Kinova."
      "Api.Base.MapGroupHandle\022C\n\032children_map_"
      "group_handles\030\005 \003(\0132\037.Kinova.Api.Base.Ma"
      "pGroupHandle\022/\n\013map_handles\030\006 \003(\0132\032.Kino"
      "va.Api.Base.MapHandle\022\030\n\020application_dat"
      "a\030\007 \001(\t\"=\n\014MapGroupList\022-\n\nmap_groups\030\001 "
      "\003(\0132\031.Kinova.Api.Base.MapGroup\"\346\002\n\007Mappi"
      "ng\022.\n\006handle\030\001 \001(\0132\036.Kinova.Api.Base.Map"
      "pingHandle\022\014\n\004name\030\002 \001(\t\022\035\n\025controller_i"
      "dentifier\030\003 \001(\r\022@\n\027active_map_group_hand"
      "le\030\004 \001(\0132\037.Kinova.Api.Base.MapGroupHandl"
      "e\022:\n\021map_group_handles\030\005 \003(\0132\037.Kinova.Ap"
      "i.Base.MapGroupHandle\0225\n\021active_map_hand"
      "le\030\006 \001(\0132\032.Kinova.Api.Base.MapHandle\022/\n\013"
      "map_handles\030\007 \003(\0132\032.Kinova.Api.Base.MapH"
      "andle\022\030\n\020application_data\030\010 \001(\t\"9\n\013Mappi"
      "ngList\022*\n\010mappings\030\001 \003(\0132\030.Kinova.Api.Ba"
      "se.Mapping\"\326\001\n\024TransformationMatrix\022.\n\002r"
      "0\030\001 \001(\0132\".Kinova.Api.Base.Transformation"
      "Row\022.\n\002r1\030\002 \001(\0132\".Kinova.Api.Base.Transf"
      "ormationRow\022.\n\002r2\030\003 \001(\0132\".Kinova.Api.Bas"
      "e.TransformationRow\022.\n\002r3\030\004 \001(\0132\".Kinova"
      ".Api.Base.TransformationRow\"C\n\021Transform"
      "ationRow\022\n\n\002c0\030\001 \001(\002\022\n\n\002c1\030\002 \001(\002\022\n\n\002c2\030\003"
      " \001(\002\022\n\n\002c3\030\004 \001(\002\"Z\n\004Pose\022\t\n\001x\030\001 \001(\002\022\t\n\001y"
      "\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\017\n\007theta_x\030\004 \001(\002\022\017\n\007th"
      "eta_y\030\005 \001(\002\022\017\n\007theta_z\030\006 \001(\002\"+\n\010Position"
      "\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"@\n\013Ori"
      "entation\022\017\n\007theta_x\030\001 \001(\002\022\017\n\007theta_y\030\002 \001"
      "(\002\022\017\n\007theta_z\030\003 \001(\002\":\n\016CartesianSpeed\022\023\n"
      "\013translation\030\001 \001(\002\022\023\n\013orientation\030\002 \001(\002\""
      "m\n\035CartesianTrajectoryConstraint\0220\n\005spee"
      "d\030\001 \001(\0132\037.Kinova.Api.Base.CartesianSpeed"
      "H\000\022\022\n\010duration\030\002 \001(\002H\000B\006\n\004type\"h\n\031JointT"
      "rajectoryConstraint\022<\n\004type\030\001 \001(\0162..Kino"
      "va.Api.Base.JointTrajectoryConstraintTyp"
      "e\022\r\n\005value\030\002 \001(\002\"q\n\006Wrench\022\017\n\007force_x\030\001 "
      "\001(\002\022\017\n\007force_y\030\002 \001(\002\022\017\n\007force_z\030\003 \001(\002\022\020\n"
      "\010torque_x\030\004 \001(\002\022\020\n\010torque_y\030\005 \001(\002\022\020\n\010tor"
      "que_z\030\006 \001(\002\"v\n\005Twist\022\020\n\010linear_x\030\001 \001(\002\022\020"
      "\n\010linear_y\030\002 \001(\002\022\020\n\010linear_z\030\003 \001(\002\022\021\n\tan"
      "gular_x\030\004 \001(\002\022\021\n\tangular_y\030\005 \001(\002\022\021\n\tangu"
      "lar_z\030\006 \001(\002\"F\n\nAdmittance\0228\n\017admittance_"
      "mode\030\001 \001(\0162\037.Kinova.Api.Base.AdmittanceM"
      "ode\"\201\001\n\017ConstrainedPose\022*\n\013target_pose\030\001"
      " \001(\0132\025.Kinova.Api.Base.Pose\022B\n\nconstrain"
      "t\030\002 \001(\0132..Kinova.Api.Base.CartesianTraje"
      "ctoryConstraint\"\215\001\n\023ConstrainedPosition\022"
      "2\n\017target_position\030\001 \001(\0132\031.Kinova.Api.Ba"
      "se.Position\022B\n\nconstraint\030\002 \001(\0132..Kinova"
      ".Api.Base.CartesianTrajectoryConstraint\""
      "\226\001\n\026ConstrainedOrientation\0228\n\022target_ori"
      "entation\030\001 \001(\0132\034.Kinova.Api.Base.Orienta"
      "tion\022B\n\nconstraint\030\002 \001(\0132..Kinova.Api.Ba"
      "se.CartesianTrajectoryConstraint\"\272\001\n\rWre"
      "nchCommand\022C\n\017reference_frame\030\001 \001(\0162*.Ki"
      "nova.Api.Common.CartesianReferenceFrame\022"
      ")\n\004mode\030\002 \001(\0162\033.Kinova.Api.Base.WrenchMo"
      "de\022\'\n\006wrench\030\003 \001(\0132\027.Kinova.Api.Base.Wre"
      "nch\022\020\n\010duration\030\004 \001(\r\"\214\001\n\014TwistCommand\022C"
      "\n\017reference_frame\030\001 \001(\0162*.Kinova.Api.Com"
      "mon.CartesianReferenceFrame\022%\n\005twist\030\002 \001"
      "(\0132\026.Kinova.Api.Base.Twist\022\020\n\010duration\030\003"
      " \001(\r\"\214\001\n\026ConstrainedJointAngles\0222\n\014joint"
      "_angles\030\001 \001(\0132\034.Kinova.Api.Base.JointAng"
      "les\022>\n\nconstraint\030\002 \001(\0132*.Kinova.Api.Bas"
      "e.JointTrajectoryConstraint\"\200\001\n\025Constrai"
      "nedJointAngle\022\030\n\020joint_identifier\030\001 \001(\r\022"
      "\r\n\005value\030\002 \001(\002\022>\n\nconstraint\030\003 \001(\0132*.Kin"
      "ova.Api.Base.JointTrajectoryConstraint\"@"
      "\n\013JointAngles\0221\n\014joint_angles\030\001 \003(\0132\033.Ki"
      "nova.Api.Base.JointAngle\"5\n\nJointAngle\022\030"
      "\n\020joint_identifier\030\001 \001(\r\022\r\n\005value\030\002 \001(\002\""
      "R\n\013JointSpeeds\0221\n\014joint_speeds\030\001 \003(\0132\033.K"
      "inova.Api.Base.JointSpeed\022\020\n\010duration\030\002 "
      "\001(\r\"G\n\nJointSpeed\022\030\n\020joint_identifier\030\001 "
      "\001(\r\022\r\n\005value\030\002 \001(\002\022\020\n\010duration\030\003 \001(\r\"U\n\014"
      "JointTorques\0223\n\rjoint_torques\030\001 \003(\0132\034.Ki"
      "nova.Api.Base.JointTorque\022\020\n\010duration\030\002 "
      "\001(\r\"H\n\013JointTorque\022\030\n\020joint_identifier\030\001"
      " \001(\r\022\r\n\005value\030\002 \001(\002\022\020\n\010duration\030\003 \001(\r\"y\n"
      "\016GripperCommand\022*\n\004mode\030\001 \001(\0162\034.Kinova.A"
      "pi.Base.GripperMode\022)\n\007gripper\030\002 \001(\0132\030.K"
      "inova.Api.Base.Gripper\022\020\n\010duration\030\003 \001(\r"
      "\"<\n\016GripperRequest\022*\n\004mode\030\001 \001(\0162\034.Kinov"
      "a.Api.Base.GripperMode\"2\n\007Gripper\022\'\n\006fin"
      "ger\030\001 \003(\0132\027.Kinova.Api.Base.Finger\"2\n\006Fi"
      "nger\022\031\n\021finger_identifier\030\001 \001(\r\022\r\n\005value"
      "\030\002 \001(\002\"{\n\013GpioCommand\022\027\n\017port_identifier"
      "\030\001 \001(\r\022\026\n\016pin_identifier\030\002 \001(\r\022+\n\006action"
      "\030\003 \001(\0162\033.Kinova.Api.Base.GpioAction\022\016\n\006p"
      "eriod\030\004 \001(\r\"]\n\nSystemTime\022\013\n\003sec\030\001 \001(\r\022\013"
      "\n\003min\030\002 \001(\r\022\014\n\004hour\030\003 \001(\r\022\014\n\004mday\030\004 \001(\r\022"
      "\013\n\003mon\030\005 \001(\r\022\014\n\004year\030\006 \001(\r\"-\n\033Controller"
      "ConfigurationMode\022\016\n\006enable\030\001 \001(\010\"\346\001\n\027Co"
      "ntrollerConfiguration\0221\n\006handle\030\001 \001(\0132!."
      "Kinova.Api.Base.ControllerHandle\022\014\n\004name"
      "\030\002 \001(\t\022=\n\025active_mapping_handle\030\003 \001(\0132\036."
      "Kinova.Api.Base.MappingHandle\022$\n\034analog_"
      "input_identifier_enum\030\004 \001(\t\022%\n\035digital_i"
      "nput_identifier_enum\030\005 \001(\t\"j\n\033Controller"
      "ConfigurationList\022K\n\031controller_configur"
      "ations\030\001 \003(\0132(.Kinova.Api.Base.Controlle"
      "rConfiguration\"$\n\023ActuatorInformation\022\r\n"
      "\005count\030\001 \001(\r\"{\n\023ArmStateInformation\0221\n\014a"
      "ctive_state\030\001 \001(\0162\033.Kinova.Api.Common.Ar"
      "mState\0221\n\nconnection\030\002 \001(\0132\035.Kinova.Api."
      "Common.Connection\"\255\001\n\024ArmStateNotificati"
      "on\0221\n\014active_state\030\001 \001(\0162\033.Kinova.Api.Co"
      "mmon.ArmState\022/\n\ttimestamp\030\002 \001(\0132\034.Kinov"
      "a.Api.Common.Timestamp\0221\n\nconnection\030\003 \001"
      "(\0132\035.Kinova.Api.Common.Connection\"\251\001\n\016Ca"
      "pSenseConfig\022\022\n\nidentifier\030\001 \001(\r\022+\n\004mode"
      "\030\002 \001(\0162\035.Kinova.Api.Base.CapSenseMode\022\023\n"
      "\013threshold_a\030\003 \001(\002\022\023\n\013threshold_b\030\004 \001(\002\022"
      "\025\n\rsensitivity_a\030\005 \001(\002\022\025\n\rsensitivity_b\030"
      "\006 \001(\002\"A\n\nBridgeList\0223\n\014bridgeConfig\030\001 \003("
      "\0132\035.Kinova.Api.Base.BridgeConfig\"s\n\014Brid"
      "geResult\0224\n\tbridge_id\030\001 \001(\0132!.Kinova.Api"
      ".Base.BridgeIdentifier\022-\n\006status\030\002 \001(\0162\035"
      ".Kinova.Api.Base.BridgeStatus\"%\n\020BridgeI"
      "dentifier\022\021\n\tbridge_id\030\001 \001(\r\"\310\001\n\014BridgeC"
      "onfig\022\031\n\021device_identifier\030\001 \001(\r\022/\n\nbrid"
      "getype\030\002 \001(\0162\033.Kinova.Api.Base.BridgeTyp"
      "e\0226\n\013port_config\030\003 \001(\0132!.Kinova.Api.Base"
      ".BridgePortConfig\0224\n\tbridge_id\030\004 \001(\0132!.K"
      "inova.Api.Base.BridgeIdentifier\"9\n\020Bridg"
      "ePortConfig\022\023\n\013target_port\030\001 \001(\r\022\020\n\010out_"
      "port\030\002 \001(\r\"\246\001\n\032PreComputedJointTrajector"
      "y\0227\n\004mode\030\001 \001(\0162).Kinova.Api.Base.Trajec"
      "toryContinuityMode\022O\n\023trajectory_element"
      "s\030\002 \003(\01322.Kinova.Api.Base.PreComputedJoi"
      "ntTrajectoryElement\"\205\001\n!PreComputedJoint"
      "TrajectoryElement\022\024\n\014joint_angles\030\001 \003(\002\022"
      "\024\n\014joint_speeds\030\002 \003(\002\022\033\n\023joint_accelerat"
      "ions\030\003 \003(\002\022\027\n\017time_from_start\030\004 \001(\002\"\217\002\n\026"
      "TrajectoryErrorElement\0228\n\nerror_type\030\001 \001"
      "(\0162$.Kinova.Api.Base.TrajectoryErrorType"
      "\022H\n\020error_identifier\030\002 \001(\0162*.Kinova.Api."
      "Base.TrajectoryErrorIdentifierB\002\030\001\022\023\n\013er"
      "ror_value\030\003 \001(\002\022\021\n\tmin_value\030\004 \001(\002\022\021\n\tma"
      "x_value\030\005 \001(\002\022\r\n\005index\030\006 \001(\r\022\017\n\007message\030"
      "\007 \001(\t\022\026\n\016waypoint_index\030\010 \001(\r\"c\n\025Traject"
      "oryErrorReport\022J\n\031trajectory_error_eleme"
      "nts\030\001 \003(\0132\'.Kinova.Api.Base.TrajectoryEr"
      "rorElement\"\241\001\n\030WaypointValidationReport\022"
      "G\n\027trajectory_error_report\030\001 \001(\0132&.Kinov"
      "a.Api.Base.TrajectoryErrorReport\022<\n\025opti"
      "mal_waypoint_list\030\002 \001(\0132\035.Kinova.Api.Bas"
      "e.WaypointList\"\254\001\n\010Waypoint\022\014\n\004name\030\001 \001("
      "\t\022<\n\020angular_waypoint\030\002 \001(\0132 .Kinova.Api"
      ".Base.AngularWaypointH\000\022@\n\022cartesian_way"
      "point\030\003 \001(\0132\".Kinova.Api.Base.CartesianW"
      "aypointH\000B\022\n\020type_of_waypoint\"O\n\017Angular"
      "Waypoint\022\016\n\006angles\030\001 \003(\002\022\032\n\022maximum_velo"
      "cities\030\002 \003(\002\022\020\n\010duration\030\003 \001(\002\"\331\001\n\021Carte"
      "sianWaypoint\022#\n\004pose\030\001 \001(\0132\025.Kinova.Api."
      "Base.Pose\022C\n\017reference_frame\030\002 \001(\0162*.Kin"
      "ova.Api.Common.CartesianReferenceFrame\022\037"
      "\n\027maximum_linear_velocity\030\003 \001(\002\022 \n\030maxim"
      "um_angular_velocity\030\004 \001(\002\022\027\n\017blending_ra"
      "dius\030\005 \001(\002\"l\n\014WaypointList\022,\n\twaypoints\030"
      "\001 \003(\0132\031.Kinova.Api.Base.Waypoint\022\020\n\010dura"
      "tion\030\002 \001(\002\022\034\n\024use_optimal_blending\030\003 \001(\010"
      "\"o\n\036KinematicTrajectoryConstraints\022\032\n\022an"
      "gular_velocities\030\001 \003(\002\022\027\n\017linear_velocit"
      "y\030\002 \001(\002\022\030\n\020angular_velocity\030\003 \001(\002\"}\n\026Fir"
      "mwareBundleVersions\022\033\n\023main_bundle_versi"
      "on\030\001 \001(\t\022F\n\023components_versions\030\002 \003(\0132)."
      "Kinova.Api.Base.FirmwareComponentVersion"
      "\"L\n\030FirmwareComponentVersion\022\014\n\004name\030\001 \001"
      "(\t\022\017\n\007version\030\002 \001(\t\022\021\n\tdevice_id\030\003 \001(\r\"d"
      "\n\006IKData\022-\n\016cartesian_pose\030\001 \001(\0132\025.Kinov"
      "a.Api.Base.Pose\022+\n\005guess\030\002 \001(\0132\034.Kinova."
      "Api.Base.JointAngles*z\n\024GpioPinPropertyF"
      "lags\022\030\n\024GPIOPROPERTY_UNKNOWN\020\000\022\026\n\022GPIOPR"
      "OPERTY_INPUT\020\001\022\027\n\023GPIOPROPERTY_OUTPUT\020\002\022"
      "\027\n\023GPIOPROPERTY_ANALOG\020\004*5\n\016ServiceVersi"
      "on\022\016\n\nRESERVED_0\020\000\022\023\n\017CURRENT_VERSION\020\001*"
      "\251\004\n\nActionType\022\026\n\022UNSPECIFIED_ACTION\020\000\022\026"
      "\n\022SEND_TWIST_COMMAND\020\001\022\027\n\023SEND_WRENCH_CO"
      "MMAND\020\002\022\025\n\021SEND_JOINT_SPEEDS\020\004\022\016\n\nREACH_"
      "POSE\020\006\022\026\n\022REACH_JOINT_ANGLES\020\007\022\032\n\026TOGGLE"
      "_ADMITTANCE_MODE\020\r\022\014\n\010SNAPSHOT\020\016\022\032\n\026SWIT"
      "CH_CONTROL_MAPPING\020\020\022\023\n\017NAVIGATE_JOINTS\020"
      "\021\022\025\n\021NAVIGATE_MAPPINGS\020\022\022\020\n\014CHANGE_TWIST"
      "\020\026\022\027\n\023CHANGE_JOINT_SPEEDS\020\027\022\021\n\rCHANGE_WR"
      "ENCH\020\031\022\030\n\024APPLY_EMERGENCY_STOP\020\034\022\020\n\014CLEA"
      "R_FAULTS\020\035\022\016\n\nTIME_DELAY\020\037\022\022\n\016EXECUTE_AC"
      "TION\020 \022\030\n\024SEND_GRIPPER_COMMAND\020!\022\025\n\021SEND"
      "_GPIO_COMMAND\020\"\022\017\n\013STOP_ACTION\020#\022 \n\034PLAY"
      "_PRE_COMPUTED_TRAJECTORY\020\'\022\024\n\020EXECUTE_SE"
      "QUENCE\020(\022\031\n\025EXECUTE_WAYPOINT_LIST\020)*\223\001\n\014"
      "SnapshotType\022\030\n\024UNSPECIFIED_SNAPSHOT\020\000\022\037"
      "\n\033CARTESIAN_POSITION_SNAPSHOT\020\001\022\033\n\027JOINT"
      "_POSITION_SNAPSHOT\020\002\022\024\n\020GRIPPER_SNAPSHOT"
      "\020\003\022\025\n\021COMBINED_SNAPSHOT\020\004*p\n\013NetworkType"
      "\022\034\n\030UNSPECIFIED_NETWORK_TYPE\020\000\022\010\n\004WIFI\020\001"
      "\022\022\n\016WIRED_ETHERNET\020\002\022\022\n\016WIRED_MICROUSB\020\003"
      "\022\021\n\tWIRED_USB\020\004\032\002\010\001*w\n\020WifiSecurityType\022"
      "\036\n\032UNSPECIFIED_AUTHENTICATION\020\000\022\007\n\003WEP\020\001"
      "\022\021\n\rWPA2_PERSONAL\020\002\022\020\n\014WPA_PERSONAL\020\004\022\025\n"
      "\021NO_AUTHENTICATION\020\010*m\n\022WifiEncryptionTy"
      "pe\022\032\n\026UNSPECIFIED_ENCRYPTION\020\000\022\022\n\016AES_EN"
      "CRYPTION\020\001\022\023\n\017TKIP_ENCRYPTION\020\002\022\022\n\016WEP_E"
      "NCRYPTION\020\004*f\n\rSignalQuality\022\036\n\032UNSPECIF"
      "IED_SIGNAL_QUALITY\020\000\022\010\n\004POOR\020\001\022\010\n\004FAIR\020\002"
      "\022\010\n\004GOOD\020\003\022\r\n\tEXCELLENT\020\004\022\010\n\004NONE\020\005*S\n\tS"
      "hapeType\022\025\n\021UNSPECIFIED_SHAPE\020\000\022\014\n\010CYLIN"
      "DER\020\001\022\n\n\006SPHERE\020\002\022\025\n\021RECTANGULAR_PRISM\020\003"
      "*\217\001\n\016LimitationType\022\032\n\026UNSPECIFIED_LIMIT"
      "ATION\020\000\022\024\n\020FORCE_LIMITATION\020\001\022\033\n\027ACCELER"
      "ATION_LIMITATION\020\002\022\027\n\023VELOCITY_LIMITATIO"
      "N\020\003\022\025\n\021TORQUE_LIMITATION\020\004*\265\001\n\036Configura"
      "tionNotificationEvent\022#\n\037UNSPECIFIED_CON"
      "FIGURATION_EVENT\020\000\022\031\n\025CONFIGURATION_UPDA"
      "TED\020\001\022\031\n\025CONFIGURATION_DELETED\020\002\022\035\n\031CONF"
      "IGURATION_DELETED_ALL\020\003\022\031\n\025CONFIGURATION"
      "_CREATED\020\004*\230\002\n\013ControlMode\022\034\n\030UNSPECIFIE"
      "D_CONTROL_MODE\020\000\022\024\n\020ANGULAR_JOYSTICK\020\001\022\026"
      "\n\022CARTESIAN_JOYSTICK\020\002\022\026\n\022ANGULAR_TRAJEC"
      "TORY\020\004\022\030\n\024CARTESIAN_TRAJECTORY\020\005\022\030\n\024CART"
      "ESIAN_ADMITTANCE\020\006\022\024\n\020JOINT_ADMITTANCE\020\007"
      "\022\031\n\025NULL_SPACE_ADMITTANCE\020\010\022\021\n\rFORCE_CON"
      "TROL\020\n\022#\n\037FORCE_CONTROL_MOTION_RESTRICTE"
      "D\020\013\022\010\n\004IDLE\020\r*\311\001\n\rOperatingMode\022\036\n\032UNSPE"
      "CIFIED_OPERATING_MODE\020\000\022\024\n\020MAINTENANCE_M"
      "ODE\020\001\022\017\n\013UPDATE_MODE\020\002\022\031\n\025UPDATE_COMPLET"
      "ED_MODE\020\003\022\026\n\022UPDATE_FAILED_MODE\020\004\022\026\n\022SHU"
      "TTING_DOWN_MODE\020\005\022\014\n\010RUN_MODE\020\006\022\030\n\024UPDAT"
      "ING_DEVICE_MODE\020\007*u\n\014ServoingMode\022\035\n\031UNS"
      "PECIFIED_SERVOING_MODE\020\000\022\031\n\025SINGLE_LEVEL"
      "_SERVOING\020\002\022\026\n\022LOW_LEVEL_SERVOING\020\003\022\023\n\017B"
      "YPASS_SERVOING\020\004*\322\001\n\037EventIdSequenceInfo"
      "Notification\022\036\n\032UNSPECIFIED_SEQUENCE_EVE"
      "NT\020\000\022\026\n\022SEQUENCE_COMPLETED\020\001\022\024\n\020SEQUENCE"
      "_ABORTED\020\002\022\023\n\017SEQUENCE_PAUSED\020\003\022\031\n\025SEQUE"
      "NCE_TASK_STARTED\020\004\022\033\n\027SEQUENCE_TASK_COMP"
      "LETED\020\005\022\024\n\020SEQUENCE_STARTED\020\006*b\n\023Protect"
      "ionZoneEvent\022%\n!UNSPECIFIED_PROTECTION_Z"
      "ONE_EVENT\020\000\022\013\n\007REACHED\020\001\022\013\n\007ENTERED\020\002\022\n\n"
      "\006EXITED\020\003*F\n\tUserEvent\022\032\n\026UNSPECIFIED_US"
      "ER_EVENT\020\000\022\016\n\nLOGGED_OUT\020\001\022\r\n\tLOGGED_IN\020"
      "\002*\250\001\n\016ControllerType\022\037\n\033UNSPECIFIED_CONT"
      "ROLLER_TYPE\020\000\022\023\n\017XBOX_CONTROLLER\020\001\022\024\n\020WR"
      "IST_CONTROLLER\020\002\022\035\n\031BASIC_JOYSTICK_CONTR"
      "OLLER\020\003\022\030\n\024BASE_GPIO_CONTROLLER\020\004\022\021\n\rGPI"
      "O_JOYSTICK\020\005*n\n\023ControllerEventType\022 \n\034U"
      "NSPECIFIED_CONTROLLER_EVENT\020\000\022\033\n\027CONTROL"
      "LER_DISCONNECTED\020\001\022\030\n\024CONTROLLER_CONNECT"
      "ED\020\002*\210\001\n\032ControllerElementEventType\022(\n$U"
      "NSPECIFIED_CONTROLLER_ELEMENT_EVENT\020\000\022\016\n"
      "\nAXIS_MOVED\020\001\022\017\n\013BUTTON_DOWN\020\002\022\r\n\tBUTTON"
      "_UP\020\003\022\020\n\014BUTTON_CLICK\020\004*\263\002\n\013ActionEvent\022"
      "\034\n\030UNSPECIFIED_ACTION_EVENT\020\000\022\016\n\nACTION_"
      "END\020\001\022\020\n\014ACTION_ABORT\020\002\022\020\n\014ACTION_PAUSE\020"
      "\003\022\020\n\014ACTION_START\020\004\022\033\n\027ACTION_PREPROCESS"
      "_START\020\005\022\033\n\027ACTION_PREPROCESS_ABORT\020\006\022\031\n"
      "\025ACTION_PREPROCESS_END\020\007\022\034\n\030ACTION_POSTP"
      "ROCESS_START\020\010\022\034\n\030ACTION_POSTPROCESS_ABO"
      "RT\020\t\022\032\n\026ACTION_POSTPROCESS_END\020\n\022\023\n\017ACTI"
      "ON_FEEDBACK\020\013*}\n\nRobotEvent\022\033\n\027UNSPECIFI"
      "ED_ROBOT_EVENT\020\000\022\021\n\rARM_CONNECTED\020\001\022\024\n\020A"
      "RM_DISCONNECTED\020\002\022\022\n\016TOOL_CONNECTED\020\005\022\025\n"
      "\021TOOL_DISCONNECTED\020\006*U\n\013BackupEvent\022\034\n\030U"
      "NSPECIFIED_BACKUP_EVENT\020\000\022\023\n\017BACKUP_REST"
      "ORED\020\001\022\023\n\017BACKUP_UPLOADED\020\002*q\n\014FactoryEv"
      "ent\022\035\n\031UNSPECIFIED_FACTORY_EVENT\020\000\022\034\n\030FA"
      "CTORY_DEFAULT_RESTORED\020\001\022$\n NETWORK_FACT"
      "ORY_DEFAULT_RESTORED\020\002*\347\002\n\014NetworkEvent\022"
      "\035\n\031UNSPECIFIED_NETWORK_EVENT\020\000\022\022\n\016WIFI_C"
      "ONNECTED\020\001\022\025\n\021WIFI_DISCONNECTED\020\002\022\025\n\021WIF"
      "I_SCAN_STARTED\020\003\022\025\n\021WIFI_SCAN_RESULTS\020\004\022"
      "\024\n\020WIFI_SCAN_FAILED\020\005\022\022\n\016WIFI_NOT_FOUND\020"
      "\006\022\027\n\023WIFI_ASSOC_REJECTED\020\007\022\027\n\023WIFI_AUTH_"
      "WRONG_KEY\020\010\022\031\n\025WIFI_AUTH_CONN_FAILED\020\t\022\024"
      "\n\020WIFI_AUTH_FAILED\020\n\022\020\n\014WIFI_ENABLED\020\013\022\021"
      "\n\rWIFI_DISABLED\020\014\022\025\n\021BLUETOOTH_ENABLED\020\r"
      "\022\026\n\022BLUETOOTH_DISABLED\020\016*U\n\023ControllerIn"
      "putType\022%\n!UNSPECIFIED_CONTROLLER_INPUT_"
      "TYPE\020\000\022\n\n\006ANALOG\020\001\022\013\n\007DIGITAL\020\002*\310\001\n\022Cont"
      "rollerBehavior\022#\n\037UNSPECIFIED_CONTROLLER"
      "_BEHAVIOR\020\000\022\032\n\026CONTROLLER_BUTTON_DOWN\020\001\022"
      "\030\n\024CONTROLLER_BUTTON_UP\020\002\022\034\n\030CONTROLLER_"
      "AXIS_POSITIVE\020\003\022\034\n\030CONTROLLER_AXIS_NEGAT"
      "IVE\020\004\022\033\n\027CONTROLLER_BUTTON_CLICK\020\005*\311\010\n\020S"
      "afetyIdentifier\022&\n\"UNSPECIFIED_BASE_SAFE"
      "TY_IDENTIFIER\020\000\022\033\n\027FIRMWARE_UPDATE_FAILU"
      "RE\020\001\022 \n\034EXTERNAL_COMMUNICATION_ERROR\020\002\022\037"
      "\n\033MAXIMUM_AMBIENT_TEMPERATURE\020\004\022\034\n\030MAXIM"
      "UM_CORE_TEMPERATURE\020\010\022\017\n\013JOINT_FAULT\020\020\022\026"
      "\n\022CYCLIC_DATA_JITTER\020 \022\036\n\032REACHED_MAXIMU"
      "M_EVENT_LOGS\020@\022\032\n\025NO_KINEMATICS_SUPPORT\020"
      "\200\001\022\032\n\025BRAKE_REMOVAL_FAILURE\020\200\002\022\022\n\rNETWOR"
      "K_ERROR\020\200\004\022\031\n\024UNABLE_TO_REACH_POSE\020\200\010\022\032\n"
      "\025JOINT_DETECTION_ERROR\020\200\020\022!\n\034NETWORK_INI"
      "TIALIZATION_ERROR\020\200 \022\024\n\017MAXIMUM_CURRENT\020"
      "\200@\022\025\n\017MAXIMUM_VOLTAGE\020\200\200\001\022\025\n\017MINIMUM_VOL"
      "TAGE\020\200\200\002\022/\n)MAXIMUM_END_EFFECTOR_TRANSLA"
      "TION_VELOCITY\020\200\200\004\022/\n)MAXIMUM_END_EFFECTO"
      "R_ORIENTATION_VELOCITY\020\200\200\010\0223\n-MAXIMUM_EN"
      "D_EFFECTOR_TRANSLATION_ACCELERATION\020\200\200\020\022"
      "3\n-MAXIMUM_END_EFFECTOR_ORIENTATION_ACCE"
      "LERATION\020\200\200 \022,\n&MAXIMUM_END_EFFECTOR_TRA"
      "NSLATION_FORCE\020\200\200@\022-\n&MAXIMUM_END_EFFECT"
      "OR_ORIENTATION_FORCE\020\200\200\200\001\022#\n\034MAXIMUM_END"
      "_EFFECTOR_PAYLOAD\020\200\200\200\002\022\037\n\030EMERGENCY_STOP"
      "_ACTIVATED\020\200\200\200\004\022\037\n\030EMERGENCY_LINE_ACTIVA"
      "TED\020\200\200\200\010\022#\n\034INRUSH_CURRENT_LIMITER_FAULT"
      "\020\200\200\200\020\022\026\n\017NVRAM_CORRUPTED\020\200\200\200 \022$\n\035INCOMPA"
      "TIBLE_FIRMWARE_VERSION\020\200\200\200@\022!\n\031POWERON_S"
      "ELF_TEST_FAILURE\020\200\200\200\200\001\022#\n\033DISCRETE_INPUT"
      "_STUCK_ACTIVE\020\200\200\200\200\002\022!\n\031ARM_INTO_ILLEGAL_"
      "POSITION\020\200\200\200\200\004*|\n\035JointTrajectoryConstra"
      "intType\022 \n\034UNSPECIFIED_JOINT_CONSTRAINT\020"
      "\000\022\035\n\031JOINT_CONSTRAINT_DURATION\020\001\022\032\n\026JOIN"
      "T_CONSTRAINT_SPEED\020\002*S\n\nWrenchMode\022\033\n\027UN"
      "SPECIFIED_WRENCH_MODE\020\000\022\025\n\021WRENCH_RESTRI"
      "CTED\020\001\022\021\n\rWRENCH_NORMAL\020\002*i\n\016AdmittanceM"
      "ode\022\037\n\033UNSPECIFIED_ADMITTANCE_MODE\020\000\022\r\n\t"
      "CARTESIAN\020\001\022\t\n\005JOINT\020\002\022\016\n\nNULL_SPACE\020\003\022\014"
      "\n\010DISABLED\020\004*g\n\013GripperMode\022\034\n\030UNSPECIFI"
      "ED_GRIPPER_MODE\020\000\022\021\n\rGRIPPER_FORCE\020\001\022\021\n\r"
      "GRIPPER_SPEED\020\002\022\024\n\020GRIPPER_POSITION\020\003*\210\001"
      "\n\nGpioAction\022\033\n\027UNSPECIFIED_GPIO_ACTION\020"
      "\000\022\022\n\016GPIOACTION_SET\020\001\022\024\n\020GPIOACTION_CLEA"
      "R\020\002\022\031\n\025GPIOACTION_PULSE_HIGH\020\003\022\030\n\024GPIOAC"
      "TION_PULSE_LOW\020\004*e\n\023NavigationDirection\022"
      "$\n UNSPECIFIED_NAVIGATION_DIRECTION\020\000\022\010\n"
      "\004NEXT\020\001\022\006\n\002UP\020\002\022\010\n\004DOWN\020\003\022\014\n\010PREVIOUS\020\004*"
      "j\n\030JointNavigationDirection\022*\n&UNSPECIFI"
      "ED_JOINT_NAVIGATION_DIRECTION\020\000\022\016\n\nJOINT"
      "_NEXT\020\001\022\022\n\016JOINT_PREVIOUS\020\002*G\n\tSoundType"
      "\022\032\n\026UNSPECIFIED_SOUND_TYPE\020\000\022\016\n\nBIP_SERI"
      "ES\020\001\022\016\n\nSINGLE_BIP\020\002*M\n\010LedState\022\031\n\025UNSP"
      "ECIFIED_LED_STATE\020\000\022\013\n\007LED_OFF\020\001\022\r\n\tLED_"
      "PULSE\020\002\022\n\n\006LED_ON\020\003*\221\001\n\014GpioBehavior\022\035\n\031"
      "UNSPECIFIED_GPIO_BEHAVIOR\020\000\022\020\n\014GPIO_FALL"
      "ING\020\001\022\017\n\013GPIO_RISING\020\002\022\022\n\016GPIO_PULSE_LOW"
      "\020\003\022\023\n\017GPIO_PULSE_HIGH\020\004\022\026\n\022GPIO_ANALOG_C"
      "HANGE\020\005*\344\001\n\rGen3GpioPinId\022\023\n\017UNSPECIFIED"
      "_PIN\020\000\022\016\n\nGPIO_PIN_B\020\001\022\016\n\nGPIO_PIN_C\020\002\022\016"
      "\n\nGPIO_PIN_D\020\003\022\016\n\nGPIO_PIN_E\020\004\022\016\n\nGPIO_P"
      "IN_G\020\005\022\016\n\nGPIO_PIN_H\020\006\022\016\n\nGPIO_PIN_I\020\007\022\016"
      "\n\nGPIO_PIN_K\020\010\022\016\n\nGPIO_PIN_N\020\t\022\016\n\nGPIO_P"
      "IN_O\020\n\022\016\n\nGPIO_PIN_S\020\013\022\016\n\nGPIO_PIN_T\020\014*\246"
      "\003\n\035Xbox360DigitalInputIdentifier\022\037\n\033UNSP"
      "ECIFIED_XBOX360_DIGITAL\020\000\022\022\n\016XBOX360_PAD"
      "_UP\020\001\022\024\n\020XBOX360_PAD_DOWN\020\002\022\024\n\020XBOX360_P"
      "AD_LEFT\020\003\022\025\n\021XBOX360_PAD_RIGHT\020\004\022\035\n\031XBOX"
      "360_FILE_BUTTON_START\020\005\022 \n\034XBOX360_DOCUM"
      "ENT_BUTTON_BACK\020\006\022\035\n\031XBOX360_LEFT_THUMB_"
      "BUTTON\020\007\022\036\n\032XBOX360_RIGHT_THUMB_BUTTON\020\010"
      "\022\031\n\025XBOX360_LEFT_SHOULDER\020\t\022\032\n\026XBOX360_R"
      "IGHT_SHOULDER\020\n\022\024\n\020XBOX360_BUTTON_A\020\r\022\024\n"
      "\020XBOX360_BUTTON_B\020\016\022\024\n\020XBOX360_BUTTON_X\020"
      "\017\022\024\n\020XBOX360_BUTTON_Y\020\020*\335\001\n\034Xbox360Analo"
      "gInputIdentifier\022\036\n\032UNSPECIFIED_XBOX360_"
      "ANALOG\020\000\022\030\n\024XBOX360_THUMB_LEFT_X\020\001\022\030\n\024XB"
      "OX360_THUMB_LEFT_Y\020\002\022\031\n\025XBOX360_THUMB_RI"
      "GHT_X\020\003\022\031\n\025XBOX360_THUMB_RIGHT_Y\020\004\022\030\n\024XB"
      "OX360_TRIGGER_LEFT\020\005\022\031\n\025XBOX360_TRIGGER_"
      "RIGHT\020\006*{\n\033WristDigitalInputIdentifier\022\035"
      "\n\031UNSPECIFIED_WRIST_DIGITAL\020\000\022\022\n\016WRIST_B"
      "UTTON_1\020\001\022\022\n\016WRIST_BUTTON_2\020\002\022\025\n\021WRIST_B"
      "UTTON_BOTH\020\003*\201\001\n\014CapSenseMode\022\014\n\010RESERVE"
      "D\020\000\022\014\n\010INACTIVE\020\001\022\031\n\025ACTIVE_AUTO_THRESHO"
      "LD\020\002\022\024\n\020ACTIVE_NOISE_ATT\020\004\022\021\n\rACTIVE_NOR"
      "MAL\020\005\022\021\n\rCONFIGURATION\020\006*\353\001\n\014BridgeStatu"
      "s\022\024\n\020BRIDGE_STATUS_OK\020\000\022\"\n\036BRIDGE_STATUS"
      "_OUTP_UNAVAILABLE\020\001\022\037\n\033BRIDGE_STATUS_UNK"
      "NOWN_DEVID\020\002\022%\n!BRIDGE_STATUS_UNKNOWN_BR"
      "IDGE_TYPE\020\003\022\033\n\027BRIDGE_STATUS_NOT_FOUND\020\004"
      "\022!\n\035BRIDGE_STATUS_NOT_INITIALIZED\020\005\022\031\n\025B"
      "RIDGE_STATUS_UNKNOWN\020\006*W\n\nBridgeType\022\033\n\027"
      "BRIDGE_TYPE_UNSPECIFIED\020\000\022\024\n\020BRIDGE_TYPE"
      "_UART\020\001\022\026\n\022BRIDGE_TYPE_TELNET\020\002*\302\001\n\030Traj"
      "ectoryContinuityMode\022*\n&TRAJECTORY_CONTI"
      "NUITY_MODE_UNSPECIFIED\020\000\022\'\n#TRAJECTORY_C"
      "ONTINUITY_MODE_POSITION\020\001\022$\n TRAJECTORY_"
      "CONTINUITY_MODE_SPEED\020\002\022+\n\'TRAJECTORY_CO"
      "NTINUITY_MODE_ACCELERATION\020\003*\314\016\n\023Traject"
      "oryErrorType\022%\n!TRAJECTORY_ERROR_TYPE_UN"
      "SPECIFIED\020\000\022+\n\'TRAJECTORY_ERROR_TYPE_OUT"
      "SIDE_WORKSPACE\020\001\0221\n-TRAJECTORY_ERROR_TYP"
      "E_ACTUATOR_COUNT_MISMATCH\020\002\022*\n&TRAJECTOR"
      "Y_ERROR_TYPE_INVALID_DURATION\020\003\022)\n%TRAJE"
      "CTORY_ERROR_TYPE_JOINT_NO_MOTION\020\004\022+\n#TR"
      "AJECTORY_ERROR_TYPE_ZERO_DISTANCE\020\004\032\002\010\001\022"
      "-\n)TRAJECTORY_ERROR_TYPE_INVALID_JOINT_S"
      "PEED\020\005\022+\n#TRAJECTORY_ERROR_TYPE_INVALID_"
      "SPEED\020\005\032\002\010\001\022)\n!TRAJECTORY_ERROR_TYPE_LAR"
      "GE_SPEED\020\006\032\002\010\001\0224\n0TRAJECTORY_ERROR_TYPE_"
      "INVALID_JOINT_ACCELERATION\020\007\0222\n*TRAJECTO"
      "RY_ERROR_TYPE_INVALID_ACCELERATION\020\007\032\002\010\001"
      "\022+\n\'TRAJECTORY_ERROR_TYPE_INVALID_TIME_S"
      "TEP\020\010\0221\n-TRAJECTORY_ERROR_TYPE_INVALID_T"
      "RAJECTORY_SIZE\020\t\022(\n TRAJECTORY_ERROR_TYP"
      "E_LARGE_SIZE\020\t\032\002\010\001\022(\n TRAJECTORY_ERROR_T"
      "YPE_WRONG_MODE\020\n\032\002\010\001\0220\n,TRAJECTORY_ERROR"
      "_TYPE_INVALID_JOINT_POSITION\020\013\0222\n*TRAJEC"
      "TORY_ERROR_TYPE_JOINT_POSITION_LIMIT\020\013\032\002"
      "\010\001\022(\n TRAJECTORY_ERROR_TYPE_FILE_ERROR\020\014"
      "\032\002\010\001\022/\n\'TRAJECTORY_ERROR_TYPE_NO_FILE_IN"
      "_MEMORY\020\r\032\002\010\001\022/\n\'TRAJECTORY_ERROR_TYPE_I"
      "NDEX_OUT_OF_TRAJ\020\016\032\002\010\001\0224\n0TRAJECTORY_ERR"
      "OR_TYPE_TRAJECTORY_ALREADY_RUNNING\020\017\022-\n%"
      "TRAJECTORY_ERROR_TYPE_ALREADY_RUNNING\020\017\032"
      "\002\010\001\0222\n*TRAJECTORY_ERROR_TYPE_WRONG_START"
      "ING_POINT\020\020\032\002\010\001\0224\n,TRAJECTORY_ERROR_TYPE"
      "_CARTESIAN_CANNOT_START\020\021\032\002\010\001\0222\n*TRAJECT"
      "ORY_ERROR_TYPE_WRONG_STARTING_SPEED\020\022\032\002\010"
      "\001\022.\n&TRAJECTORY_ERROR_TYPE_INVALID_POSIT"
      "ION\020\023\032\002\010\001\0224\n0TRAJECTORY_ERROR_TYPE_INVAL"
      "ID_CARTESIAN_POSITION\020\024\0227\n3TRAJECTORY_ER"
      "ROR_TYPE_INVALID_CARTESIAN_ORIENTATION\020\025"
      "\022;\n7TRAJECTORY_ERROR_TYPE_INVALID_CARTES"
      "IAN_LINEAR_VELOCITY\020\026\022<\n8TRAJECTORY_ERRO"
      "R_TYPE_INVALID_CARTESIAN_ANGULAR_VELOCIT"
      "Y\020\027\022.\n*TRAJECTORY_ERROR_TYPE_INVALID_JOI"
      "NT_TORQUE\020\030\0225\n1TRAJECTORY_ERROR_TYPE_MUL"
      "TIPLE_WAYPOINT_TYPE_LIST\020\031\0222\n.TRAJECTORY"
      "_ERROR_TYPE_INITIAL_WAYPOINT_NO_STOP\020\032\0220"
      "\n,TRAJECTORY_ERROR_TYPE_FINAL_WAYPOINT_N"
      "O_STOP\020\033\0221\n-TRAJECTORY_ERROR_TYPE_INVALI"
      "D_BLENDING_RADIUS\020\034\0221\n-TRAJECTORY_ERROR_"
      "TYPE_INVALID_REFERENCE_FRAME\020\035\022\?\n;TRAJEC"
      "TORY_ERROR_TYPE_NUMERICAL_ERROR_IMPOSSIB"
      "LE_TRAJECTORY\020\036\032\002\020\001*\236\002\n\031TrajectoryErrorI"
      "dentifier\022+\n\'TRAJECTORY_ERROR_IDENTIFIER"
      "_UNSPECIFIED\020\000\022,\n(TRAJECTORY_ERROR_IDENT"
      "IFIER_UNAPPLICABLE\020\001\022$\n TRAJECTORY_ERROR"
      "_IDENTIFIER_TIME\020\002\022(\n$TRAJECTORY_ERROR_I"
      "DENTIFIER_POSITION\020\003\022(\n$TRAJECTORY_ERROR"
      "_IDENTIFIER_VELOCITY\020\004\022,\n(TRAJECTORY_ERR"
      "OR_IDENTIFIER_ACCELERATION\020\005*\327\003\n\022Traject"
      "oryInfoType\022&\n\"UNSPECIFIED_TRAJECTORY_IN"
      "FORMATION\020\000\022$\n JOINT_ACCELERATION_LIMIT_"
      "REACHED\020\001\022\035\n\031JOINT_SPEED_LIMIT_REACHED\020\002"
      "\022 \n\034JOINT_POSITION_LIMIT_REACHED\020\003\022\036\n\032JO"
      "INT_TORQUE_LIMIT_REACHED\020\004\022\026\n\022SINGULARIT"
      "Y_REGION\020\005\022\034\n\030INVERSE_KINEMATIC_FAILED\020\006"
      "\022(\n$CARTESIAN_ACCELERATION_LIMIT_REACHED"
      "\020\007\022!\n\035CARTESIAN_SPEED_LIMIT_REACHED\020\010\022$\n"
      " CARTESIAN_POSITION_LIMIT_REACHED\020\t\022\"\n\036C"
      "ARTESIAN_WRENCH_LIMIT_REACHED\020\n\022\034\n\030ENTER"
      "ING_PROTECTION_ZONE\020\013\022\024\n\020WAYPOINT_REACHE"
      "D\020\014\022\021\n\rTRAJECTORY_OK\020\r2\351e\n\004Base\022[\n\021Creat"
      "eUserProfile\022 .Kinova.Api.Base.FullUserP"
      "rofile\032$.Kinova.Api.Common.UserProfileHa"
      "ndle\022K\n\021UpdateUserProfile\022\034.Kinova.Api.B"
      "ase.UserProfile\032\030.Kinova.Api.Common.Empt"
      "y\022U\n\017ReadUserProfile\022$.Kinova.Api.Common"
      ".UserProfileHandle\032\034.Kinova.Api.Base.Use"
      "rProfile\022S\n\021DeleteUserProfile\022$.Kinova.A"
      "pi.Common.UserProfileHandle\032\030.Kinova.Api"
      ".Common.Empty\022Q\n\023ReadAllUserProfiles\022\030.K"
      "inova.Api.Common.Empty\032 .Kinova.Api.Base"
      ".UserProfileList\022C\n\014ReadAllUsers\022\030.Kinov"
      "a.Api.Common.Empty\032\031.Kinova.Api.Base.Use"
      "rList\022K\n\016ChangePassword\022\037.Kinova.Api.Bas"
      "e.PasswordChange\032\030.Kinova.Api.Common.Emp"
      "ty\022L\n\016CreateSequence\022\031.Kinova.Api.Base.S"
      "equence\032\037.Kinova.Api.Base.SequenceHandle"
      "\022E\n\016UpdateSequence\022\031.Kinova.Api.Base.Seq"
      "uence\032\030.Kinova.Api.Common.Empty\022J\n\014ReadS"
      "equence\022\037.Kinova.Api.Base.SequenceHandle"
      "\032\031.Kinova.Api.Base.Sequence\022K\n\016DeleteSeq"
      "uence\022\037.Kinova.Api.Base.SequenceHandle\032\030"
      ".Kinova.Api.Common.Empty\022K\n\020ReadAllSeque"
      "nces\022\030.Kinova.Api.Common.Empty\032\035.Kinova."
      "Api.Base.SequenceList\022I\n\014PlaySequence\022\037."
      "Kinova.Api.Base.SequenceHandle\032\030.Kinova."
      "Api.Common.Empty\022Y\n\024PlayAdvancedSequence"
      "\022\'.Kinova.Api.Base.AdvancedSequenceHandl"
      "e\032\030.Kinova.Api.Common.Empty\022B\n\014StopSeque"
      "nce\022\030.Kinova.Api.Common.Empty\032\030.Kinova.A"
      "pi.Common.Empty\022C\n\rPauseSequence\022\030.Kinov"
      "a.Api.Common.Empty\032\030.Kinova.Api.Common.E"
      "mpty\022D\n\016ResumeSequence\022\030.Kinova.Api.Comm"
      "on.Empty\032\030.Kinova.Api.Common.Empty\022^\n\024Cr"
      "eateProtectionZone\022\037.Kinova.Api.Base.Pro"
      "tectionZone\032%.Kinova.Api.Base.Protection"
      "ZoneHandle\022Q\n\024UpdateProtectionZone\022\037.Kin"
      "ova.Api.Base.ProtectionZone\032\030.Kinova.Api"
      ".Common.Empty\022\\\n\022ReadProtectionZone\022%.Ki"
      "nova.Api.Base.ProtectionZoneHandle\032\037.Kin"
      "ova.Api.Base.ProtectionZone\022W\n\024DeletePro"
      "tectionZone\022%.Kinova.Api.Base.Protection"
      "ZoneHandle\032\030.Kinova.Api.Common.Empty\022W\n\026"
      "ReadAllProtectionZones\022\030.Kinova.Api.Comm"
      "on.Empty\032#.Kinova.Api.Base.ProtectionZon"
      "eList\022I\n\rCreateMapping\022\030.Kinova.Api.Base"
      ".Mapping\032\036.Kinova.Api.Base.MappingHandle"
      "\022G\n\013ReadMapping\022\036.Kinova.Api.Base.Mappin"
      "gHandle\032\030.Kinova.Api.Base.Mapping\022C\n\rUpd"
      "ateMapping\022\030.Kinova.Api.Base.Mapping\032\030.K"
      "inova.Api.Common.Empty\022I\n\rDeleteMapping\022"
      "\036.Kinova.Api.Base.MappingHandle\032\030.Kinova"
      ".Api.Common.Empty\022I\n\017ReadAllMappings\022\030.K"
      "inova.Api.Common.Empty\032\034.Kinova.Api.Base"
      ".MappingList\022=\n\tCreateMap\022\024.Kinova.Api.B"
      "ase.Map\032\032.Kinova.Api.Base.MapHandle\022;\n\007R"
      "eadMap\022\032.Kinova.Api.Base.MapHandle\032\024.Kin"
      "ova.Api.Base.Map\022;\n\tUpdateMap\022\024.Kinova.A"
      "pi.Base.Map\032\030.Kinova.Api.Common.Empty\022A\n"
      "\tDeleteMap\022\032.Kinova.Api.Base.MapHandle\032\030"
      ".Kinova.Api.Common.Empty\022G\n\013ReadAllMaps\022"
      "\036.Kinova.Api.Base.MappingHandle\032\030.Kinova"
      ".Api.Base.MapList\022K\n\013ActivateMap\022\".Kinov"
      "a.Api.Base.ActivateMapHandle\032\030.Kinova.Ap"
      "i.Common.Empty\022F\n\014CreateAction\022\027.Kinova."
      "Api.Base.Action\032\035.Kinova.Api.Base.Action"
      "Handle\022D\n\nReadAction\022\035.Kinova.Api.Base.A"
      "ctionHandle\032\027.Kinova.Api.Base.Action\022S\n\016"
      "ReadAllActions\022$.Kinova.Api.Base.Request"
      "edActionType\032\033.Kinova.Api.Base.ActionLis"
      "t\022G\n\014DeleteAction\022\035.Kinova.Api.Base.Acti"
      "onHandle\032\030.Kinova.Api.Common.Empty\022A\n\014Up"
      "dateAction\022\027.Kinova.Api.Base.Action\032\030.Ki"
      "nova.Api.Common.Empty\022U\n\032ExecuteActionFr"
      "omReference\022\035.Kinova.Api.Base.ActionHand"
      "le\032\030.Kinova.Api.Common.Empty\022B\n\rExecuteA"
      "ction\022\027.Kinova.Api.Base.Action\032\030.Kinova."
      "Api.Common.Empty\022A\n\013PauseAction\022\030.Kinova"
      ".Api.Common.Empty\032\030.Kinova.Api.Common.Em"
      "pty\022@\n\nStopAction\022\030.Kinova.Api.Common.Em"
      "pty\032\030.Kinova.Api.Common.Empty\022B\n\014ResumeA"
      "ction\022\030.Kinova.Api.Common.Empty\032\030.Kinova"
      ".Api.Common.Empty\022Z\n\024GetIPv4Configuratio"
      "n\022\036.Kinova.Api.Base.NetworkHandle\032\".Kino"
      "va.Api.Base.IPv4Configuration\022X\n\024SetIPv4"
      "Configuration\022&.Kinova.Api.Base.FullIPv4"
      "Configuration\032\030.Kinova.Api.Common.Empty\022"
      "q\n\037SetCommunicationInterfaceEnable\0224.Kin"
      "ova.Api.Base.CommunicationInterfaceConfi"
      "guration\032\030.Kinova.Api.Common.Empty\022v\n\036Is"
      "CommunicationInterfaceEnable\022\036.Kinova.Ap"
      "i.Base.NetworkHandle\0324.Kinova.Api.Base.C"
      "ommunicationInterfaceConfiguration\022R\n\020Ge"
      "tAvailableWifi\022\030.Kinova.Api.Common.Empty"
      "\032$.Kinova.Api.Base.WifiInformationList\022M"
      "\n\022GetWifiInformation\022\025.Kinova.Api.Base.S"
      "sid\032 .Kinova.Api.Base.WifiInformation\022T\n"
      "\024AddWifiConfiguration\022\".Kinova.Api.Base."
      "WifiConfiguration\032\030.Kinova.Api.Common.Em"
      "pty\022J\n\027DeleteWifiConfiguration\022\025.Kinova."
      "Api.Base.Ssid\032\030.Kinova.Api.Common.Empty\022"
      "Y\n\025GetAllConfiguredWifis\022\030.Kinova.Api.Co"
      "mmon.Empty\032&.Kinova.Api.Base.WifiConfigu"
      "rationList\022>\n\013ConnectWifi\022\025.Kinova.Api.B"
      "ase.Ssid\032\030.Kinova.Api.Common.Empty\022D\n\016Di"
      "sconnectWifi\022\030.Kinova.Api.Common.Empty\032\030"
      ".Kinova.Api.Common.Empty\022Y\n\033GetConnected"
      "WifiInformation\022\030.Kinova.Api.Common.Empt"
      "y\032 .Kinova.Api.Base.WifiInformation\022N\n\013U"
      "nsubscribe\022%.Kinova.Api.Common.Notificat"
      "ionHandle\032\030.Kinova.Api.Common.Empty\022i\n\030C"
      "onfigurationChangeTopic\022&.Kinova.Api.Com"
      "mon.NotificationOptions\032%.Kinova.Api.Com"
      "mon.NotificationHandle\022a\n\020MappingInfoTop"
      "ic\022&.Kinova.Api.Common.NotificationOptio"
      "ns\032%.Kinova.Api.Common.NotificationHandl"
      "e\022a\n\020ControlModeTopic\022&.Kinova.Api.Commo"
      "n.NotificationOptions\032%.Kinova.Api.Commo"
      "n.NotificationHandle\022c\n\022OperatingModeTop"
      "ic\022&.Kinova.Api.Common.NotificationOptio"
      "ns\032%.Kinova.Api.Common.NotificationHandl"
      "e\022b\n\021SequenceInfoTopic\022&.Kinova.Api.Comm"
      "on.NotificationOptions\032%.Kinova.Api.Comm"
      "on.NotificationHandle\022d\n\023ProtectionZoneT"
      "opic\022&.Kinova.Api.Common.NotificationOpt"
      "ions\032%.Kinova.Api.Common.NotificationHan"
      "dle\022Z\n\tUserTopic\022&.Kinova.Api.Common.Not"
      "ificationOptions\032%.Kinova.Api.Common.Not"
      "ificationHandle\022`\n\017ControllerTopic\022&.Kin"
      "ova.Api.Common.NotificationOptions\032%.Kin"
      "ova.Api.Common.NotificationHandle\022\\\n\013Act"
      "ionTopic\022&.Kinova.Api.Common.Notificatio"
      "nOptions\032%.Kinova.Api.Common.Notificatio"
      "nHandle\022`\n\017RobotEventTopic\022&.Kinova.Api."
      "Common.NotificationOptions\032%.Kinova.Api."
      "Common.NotificationHandle\022U\n\027PlayCartesi"
      "anTrajectory\022 .Kinova.Api.Base.Constrain"
      "edPose\032\030.Kinova.Api.Common.Empty\022a\n\037Play"
      "CartesianTrajectoryPosition\022$.Kinova.Api"
      ".Base.ConstrainedPosition\032\030.Kinova.Api.C"
      "ommon.Empty\022g\n\"PlayCartesianTrajectoryOr"
      "ientation\022\'.Kinova.Api.Base.ConstrainedO"
      "rientation\032\030.Kinova.Api.Common.Empty\022:\n\004"
      "Stop\022\030.Kinova.Api.Common.Empty\032\030.Kinova."
      "Api.Common.Empty\022K\n\030GetMeasuredCartesian"
      "Pose\022\030.Kinova.Api.Common.Empty\032\025.Kinova."
      "Api.Base.Pose\022M\n\021SendWrenchCommand\022\036.Kin"
      "ova.Api.Base.WrenchCommand\032\030.Kinova.Api."
      "Common.Empty\022U\n\031SendWrenchJoystickComman"
      "d\022\036.Kinova.Api.Base.WrenchCommand\032\030.Kino"
      "va.Api.Common.Empty\022S\n\030SendTwistJoystick"
      "Command\022\035.Kinova.Api.Base.TwistCommand\032\030"
      ".Kinova.Api.Common.Empty\022K\n\020SendTwistCom"
      "mand\022\035.Kinova.Api.Base.TwistCommand\032\030.Ki"
      "nova.Api.Common.Empty\022X\n\023PlayJointTrajec"
      "tory\022\'.Kinova.Api.Base.ConstrainedJointA"
      "ngles\032\030.Kinova.Api.Common.Empty\022_\n\033PlayS"
      "electedJointTrajectory\022&.Kinova.Api.Base"
      ".ConstrainedJointAngle\032\030.Kinova.Api.Comm"
      "on.Empty\022P\n\026GetMeasuredJointAngles\022\030.Kin"
      "ova.Api.Common.Empty\032\034.Kinova.Api.Base.J"
      "ointAngles\022P\n\026SendJointSpeedsCommand\022\034.K"
      "inova.Api.Base.JointSpeeds\032\030.Kinova.Api."
      "Common.Empty\022V\n\035SendSelectedJointSpeedCo"
      "mmand\022\033.Kinova.Api.Base.JointSpeed\032\030.Kin"
      "ova.Api.Common.Empty\022O\n\022SendGripperComma"
      "nd\022\037.Kinova.Api.Base.GripperCommand\032\030.Ki"
      "nova.Api.Common.Empty\022W\n\032GetMeasuredGrip"
      "perMovement\022\037.Kinova.Api.Base.GripperReq"
      "uest\032\030.Kinova.Api.Base.Gripper\022F\n\rSetAdm"
      "ittance\022\033.Kinova.Api.Base.Admittance\032\030.K"
      "inova.Api.Common.Empty\022W\n\020SetOperatingMo"
      "de\022).Kinova.Api.Base.OperatingModeInform"
      "ation\032\030.Kinova.Api.Common.Empty\022H\n\022Apply"
      "EmergencyStop\022\030.Kinova.Api.Common.Empty\032"
      "\030.Kinova.Api.Common.Empty\022A\n\013ClearFaults"
      "\022\030.Kinova.Api.Common.Empty\032\030.Kinova.Api."
      "Common.Empty\022S\n\016GetControlMode\022\030.Kinova."
      "Api.Common.Empty\032\'.Kinova.Api.Base.Contr"
      "olModeInformation\022W\n\020GetOperatingMode\022\030."
      "Kinova.Api.Common.Empty\032).Kinova.Api.Bas"
      "e.OperatingModeInformation\022U\n\017SetServoin"
      "gMode\022(.Kinova.Api.Base.ServoingModeInfo"
      "rmation\032\030.Kinova.Api.Common.Empty\022U\n\017Get"
      "ServoingMode\022\030.Kinova.Api.Common.Empty\032("
      ".Kinova.Api.Base.ServoingModeInformation"
      "\022b\n\021ServoingModeTopic\022&.Kinova.Api.Commo"
      "n.NotificationOptions\032%.Kinova.Api.Commo"
      "n.NotificationHandle\022L\n\026RestoreFactorySe"
      "ttings\022\030.Kinova.Api.Common.Empty\032\030.Kinov"
      "a.Api.Common.Empty\022<\n\006Reboot\022\030.Kinova.Ap"
      "i.Common.Empty\032\030.Kinova.Api.Common.Empty"
      "\022]\n\014FactoryTopic\022&.Kinova.Api.Common.Not"
      "ificationOptions\032%.Kinova.Api.Common.Not"
      "ificationHandle\022W\n\032GetAllConnectedContro"
      "llers\022\030.Kinova.Api.Common.Empty\032\037.Kinova"
      ".Api.Base.ControllerList\022Y\n\022GetControlle"
      "rState\022!.Kinova.Api.Base.ControllerHandl"
      "e\032 .Kinova.Api.Base.ControllerState\022R\n\020G"
      "etActuatorCount\022\030.Kinova.Api.Common.Empt"
      "y\032$.Kinova.Api.Base.ActuatorInformation\022"
      "C\n\rStartWifiScan\022\030.Kinova.Api.Common.Emp"
      "ty\032\030.Kinova.Api.Common.Empty\022N\n\021GetConfi"
      "guredWifi\022\025.Kinova.Api.Base.Ssid\032\".Kinov"
      "a.Api.Base.WifiConfiguration\022]\n\014NetworkT"
      "opic\022&.Kinova.Api.Common.NotificationOpt"
      "ions\032%.Kinova.Api.Common.NotificationHan"
      "dle\022M\n\013GetArmState\022\030.Kinova.Api.Common.E"
      "mpty\032$.Kinova.Api.Base.ArmStateInformati"
      "on\022^\n\rArmStateTopic\022&.Kinova.Api.Common."
      "NotificationOptions\032%.Kinova.Api.Common."
      "NotificationHandle\022V\n\022GetIPv4Information"
      "\022\036.Kinova.Api.Base.NetworkHandle\032 .Kinov"
      "a.Api.Base.IPv4Information\022N\n\022SetWifiCou"
      "ntryCode\022\036.Kinova.Api.Common.CountryCode"
      "\032\030.Kinova.Api.Common.Empty\022N\n\022GetWifiCou"
      "ntryCode\022\030.Kinova.Api.Common.Empty\032\036.Kin"
      "ova.Api.Common.CountryCode\022N\n\021SetCapSens"
      "eConfig\022\037.Kinova.Api.Base.CapSenseConfig"
      "\032\030.Kinova.Api.Common.Empty\022N\n\021GetCapSens"
      "eConfig\022\030.Kinova.Api.Common.Empty\032\037.Kino"
      "va.Api.Base.CapSenseConfig\022c\n\037GetAllJoin"
      "tsSpeedHardLimitation\022\030.Kinova.Api.Commo"
      "n.Empty\032&.Kinova.Api.Base.JointsLimitati"
      "onsList\022d\n GetAllJointsTorqueHardLimitat"
      "ion\022\030.Kinova.Api.Common.Empty\032&.Kinova.A"
      "pi.Base.JointsLimitationsList\022T\n\026GetTwis"
      "tHardLimitation\022\030.Kinova.Api.Common.Empt"
      "y\032 .Kinova.Api.Base.TwistLimitation\022V\n\027G"
      "etWrenchHardLimitation\022\030.Kinova.Api.Comm"
      "on.Empty\032!.Kinova.Api.Base.WrenchLimitat"
      "ion\022X\n\036SendJointSpeedsJoystickCommand\022\034."
      "Kinova.Api.Base.JointSpeeds\032\030.Kinova.Api"
      ".Common.Empty\022^\n%SendSelectedJointSpeedJ"
      "oystickCommand\022\033.Kinova.Api.Base.JointSp"
      "eed\032\030.Kinova.Api.Common.Empty\022L\n\014EnableB"
      "ridge\022\035.Kinova.Api.Base.BridgeConfig\032\035.K"
      "inova.Api.Base.BridgeResult\022Q\n\rDisableBr"
      "idge\022!.Kinova.Api.Base.BridgeIdentifier\032"
      "\035.Kinova.Api.Base.BridgeResult\022F\n\rGetBri"
      "dgeList\022\030.Kinova.Api.Common.Empty\032\033.Kino"
      "va.Api.Base.BridgeList\022S\n\017GetBridgeConfi"
      "g\022!.Kinova.Api.Base.BridgeIdentifier\032\035.K"
      "inova.Api.Base.BridgeConfig\022g\n\036PlayPreCo"
      "mputedJointTrajectory\022+.Kinova.Api.Base."
      "PreComputedJointTrajectory\032\030.Kinova.Api."
      "Common.Empty\022r\n\027GetProductConfiguration\022"
      "\030.Kinova.Api.Common.Empty\032=.Kinova.Api.P"
      "roductConfiguration.CompleteProductConfi"
      "guration\022\204\001\n\"UpdateEndEffectorTypeConfig"
      "uration\022D.Kinova.Api.ProductConfiguratio"
      "n.ProductConfigurationEndEffectorType\032\030."
      "Kinova.Api.Common.Empty\022X\n\"RestoreFactor"
      "yProductConfiguration\022\030.Kinova.Api.Commo"
      "n.Empty\032\030.Kinova.Api.Common.Empty\022\\\n\030Get"
      "TrajectoryErrorReport\022\030.Kinova.Api.Commo"
      "n.Empty\032&.Kinova.Api.Base.TrajectoryErro"
      "rReport\022c\n\037GetAllJointsSpeedSoftLimitati"
      "on\022\030.Kinova.Api.Common.Empty\032&.Kinova.Ap"
      "i.Base.JointsLimitationsList\022d\n GetAllJo"
      "intsTorqueSoftLimitation\022\030.Kinova.Api.Co"
      "mmon.Empty\032&.Kinova.Api.Base.JointsLimit"
      "ationsList\022T\n\026GetTwistSoftLimitation\022\030.K"
      "inova.Api.Common.Empty\032 .Kinova.Api.Base"
      ".TwistLimitation\022V\n\027GetWrenchSoftLimitat"
      "ion\022\030.Kinova.Api.Common.Empty\032!.Kinova.A"
      "pi.Base.WrenchLimitation\022h\n\036SetControlle"
      "rConfigurationMode\022,.Kinova.Api.Base.Con"
      "trollerConfigurationMode\032\030.Kinova.Api.Co"
      "mmon.Empty\022h\n\036GetControllerConfiguration"
      "Mode\022\030.Kinova.Api.Common.Empty\032,.Kinova."
      "Api.Base.ControllerConfigurationMode\022N\n\r"
      "StartTeaching\022#.Kinova.Api.Base.Sequence"
      "TaskHandle\032\030.Kinova.Api.Common.Empty\022B\n\014"
      "StopTeaching\022\030.Kinova.Api.Common.Empty\032\030"
      ".Kinova.Api.Common.Empty\022d\n\020AddSequenceT"
      "asks\022+.Kinova.Api.Base.SequenceTasksConf"
      "iguration\032#.Kinova.Api.Base.SequenceTask"
      "sRange\022Z\n\022UpdateSequenceTask\022*.Kinova.Ap"
      "i.Base.SequenceTaskConfiguration\032\030.Kinov"
      "a.Api.Common.Empty\022Q\n\021SwapSequenceTasks\022"
      "\".Kinova.Api.Base.SequenceTasksPair\032\030.Ki"
      "nova.Api.Common.Empty\022V\n\020ReadSequenceTas"
      "k\022#.Kinova.Api.Base.SequenceTaskHandle\032\035"
      ".Kinova.Api.Base.SequenceTask\022W\n\024ReadAll"
      "SequenceTasks\022\037.Kinova.Api.Base.Sequence"
      "Handle\032\036.Kinova.Api.Base.SequenceTasks\022S"
      "\n\022DeleteSequenceTask\022#.Kinova.Api.Base.S"
      "equenceTaskHandle\032\030.Kinova.Api.Common.Em"
      "pty\022S\n\026DeleteAllSequenceTasks\022\037.Kinova.A"
      "pi.Base.SequenceHandle\032\030.Kinova.Api.Comm"
      "on.Empty\022C\n\014TakeSnapshot\022\031.Kinova.Api.Ba"
      "se.Snapshot\032\030.Kinova.Api.Common.Empty\022^\n"
      "\031GetFirmwareBundleVersions\022\030.Kinova.Api."
      "Common.Empty\032\'.Kinova.Api.Base.FirmwareB"
      "undleVersions\022T\n\031ExecuteWaypointTrajecto"
      "ry\022\035.Kinova.Api.Base.WaypointList\032\030.Kino"
      "va.Api.Common.Empty\022P\n\020MoveSequenceTask\022"
      "\".Kinova.Api.Base.SequenceTasksPair\032\030.Ki"
      "nova.Api.Common.Empty\022R\n\020DuplicateMappin"
      "g\022\036.Kinova.Api.Base.MappingHandle\032\036.Kino"
      "va.Api.Base.MappingHandle\022F\n\014DuplicateMa"
      "p\022\032.Kinova.Api.Base.MapHandle\032\032.Kinova.A"
      "pi.Base.MapHandle\022`\n\032SetControllerConfig"
      "uration\022(.Kinova.Api.Base.ControllerConf"
      "iguration\032\030.Kinova.Api.Common.Empty\022i\n\032G"
      "etControllerConfiguration\022!.Kinova.Api.B"
      "ase.ControllerHandle\032(.Kinova.Api.Base.C"
      "ontrollerConfiguration\022h\n\036GetAllControll"
      "erConfigurations\022\030.Kinova.Api.Common.Emp"
      "ty\032,.Kinova.Api.Base.ControllerConfigura"
      "tionList\022O\n\030ComputeForwardKinematics\022\034.K"
      "inova.Api.Base.JointAngles\032\025.Kinova.Api."
      "Base.Pose\022Q\n\030ComputeInverseKinematics\022\027."
      "Kinova.Api.Base.IKData\032\034.Kinova.Api.Base"
      ".JointAngles\022`\n\024ValidateWaypointList\022\035.K"
      "inova.Api.Base.WaypointList\032).Kinova.Api"
      ".Base.WaypointValidationReport\022P\n\022SetWif"
      "iEnableState\022 .Kinova.Api.Base.WifiEnabl"
      "eState\032\030.Kinova.Api.Common.Empty\022P\n\022GetW"
      "ifiEnableState\022\030.Kinova.Api.Common.Empty"
      "\032 .Kinova.Api.Base.WifiEnableState\022Z\n\027Se"
      "tBluetoothEnableState\022%.Kinova.Api.Base."
      "BluetoothEnableState\032\030.Kinova.Api.Common"
      ".Empty\022Z\n\027GetBluetoothEnableState\022\030.Kino"
      "va.Api.Common.Empty\032%.Kinova.Api.Base.Bl"
      "uetoothEnableStateP\000P\001P\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 46712);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Base.proto", &protobuf_RegisterTypes);
  ::protobuf_Common_2eproto::AddDescriptors();
  ::protobuf_Errors_2eproto::AddDescriptors();
  ::protobuf_ProductConfiguration_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Base_2eproto
namespace Kinova {
namespace Api {
namespace Base {
const ::google::protobuf::EnumDescriptor* GpioPinPropertyFlags_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[0];
}
bool GpioPinPropertyFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServiceVersion_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[1];
}
bool ServiceVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActionType_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[2];
}
bool ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 6:
    case 7:
    case 13:
    case 14:
    case 16:
    case 17:
    case 18:
    case 22:
    case 23:
    case 25:
    case 28:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 39:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SnapshotType_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[3];
}
bool SnapshotType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NetworkType_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[4];
}
bool NetworkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WifiSecurityType_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[5];
}
bool WifiSecurityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WifiEncryptionType_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[6];
}
bool WifiEncryptionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SignalQuality_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[7];
}
bool SignalQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ShapeType_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[8];
}
bool ShapeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LimitationType_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[9];
}
bool LimitationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConfigurationNotificationEvent_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[10];
}
bool ConfigurationNotificationEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ControlMode_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[11];
}
bool ControlMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OperatingMode_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[12];
}
bool OperatingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServoingMode_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[13];
}
bool ServoingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EventIdSequenceInfoNotification_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[14];
}
bool EventIdSequenceInfoNotification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProtectionZoneEvent_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[15];
}
bool ProtectionZoneEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UserEvent_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[16];
}
bool UserEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ControllerType_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[17];
}
bool ControllerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ControllerEventType_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[18];
}
bool ControllerEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ControllerElementEventType_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[19];
}
bool ControllerElementEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActionEvent_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[20];
}
bool ActionEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RobotEvent_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[21];
}
bool RobotEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BackupEvent_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[22];
}
bool BackupEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FactoryEvent_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[23];
}
bool FactoryEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NetworkEvent_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[24];
}
bool NetworkEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ControllerInputType_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[25];
}
bool ControllerInputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ControllerBehavior_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[26];
}
bool ControllerBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SafetyIdentifier_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[27];
}
bool SafetyIdentifier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
    case 134217728:
    case 268435456:
    case 536870912:
    case 1073741824:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JointTrajectoryConstraintType_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[28];
}
bool JointTrajectoryConstraintType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WrenchMode_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[29];
}
bool WrenchMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AdmittanceMode_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[30];
}
bool AdmittanceMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GripperMode_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[31];
}
bool GripperMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GpioAction_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[32];
}
bool GpioAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NavigationDirection_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[33];
}
bool NavigationDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JointNavigationDirection_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[34];
}
bool JointNavigationDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SoundType_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[35];
}
bool SoundType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LedState_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[36];
}
bool LedState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GpioBehavior_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[37];
}
bool GpioBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Gen3GpioPinId_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[38];
}
bool Gen3GpioPinId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Xbox360DigitalInputIdentifier_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[39];
}
bool Xbox360DigitalInputIdentifier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Xbox360AnalogInputIdentifier_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[40];
}
bool Xbox360AnalogInputIdentifier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WristDigitalInputIdentifier_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[41];
}
bool WristDigitalInputIdentifier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CapSenseMode_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[42];
}
bool CapSenseMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BridgeStatus_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[43];
}
bool BridgeStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BridgeType_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[44];
}
bool BridgeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TrajectoryContinuityMode_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[45];
}
bool TrajectoryContinuityMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TrajectoryErrorType_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[46];
}
bool TrajectoryErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TrajectoryErrorIdentifier_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[47];
}
bool TrajectoryErrorIdentifier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TrajectoryInfoType_descriptor() {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Base_2eproto::file_level_enum_descriptors[48];
}
bool TrajectoryInfoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GpioConfigurationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GpioConfigurationList::kPortConfigurationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GpioConfigurationList::GpioConfigurationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_GpioConfigurationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.GpioConfigurationList)
}
GpioConfigurationList::GpioConfigurationList(const GpioConfigurationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      port_configurations_(from.port_configurations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.GpioConfigurationList)
}

void GpioConfigurationList::SharedCtor() {
}

GpioConfigurationList::~GpioConfigurationList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.GpioConfigurationList)
  SharedDtor();
}

void GpioConfigurationList::SharedDtor() {
}

void GpioConfigurationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GpioConfigurationList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GpioConfigurationList& GpioConfigurationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_GpioConfigurationList.base);
  return *internal_default_instance();
}


void GpioConfigurationList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.GpioConfigurationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  port_configurations_.Clear();
  _internal_metadata_.Clear();
}

bool GpioConfigurationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.GpioConfigurationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.GpioConfiguration port_configurations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_port_configurations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.GpioConfigurationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.GpioConfigurationList)
  return false;
#undef DO_
}

void GpioConfigurationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.GpioConfigurationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.GpioConfiguration port_configurations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->port_configurations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->port_configurations(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.GpioConfigurationList)
}

::google::protobuf::uint8* GpioConfigurationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.GpioConfigurationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.GpioConfiguration port_configurations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->port_configurations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->port_configurations(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.GpioConfigurationList)
  return target;
}

size_t GpioConfigurationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.GpioConfigurationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.GpioConfiguration port_configurations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->port_configurations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->port_configurations(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpioConfigurationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.GpioConfigurationList)
  GOOGLE_DCHECK_NE(&from, this);
  const GpioConfigurationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GpioConfigurationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.GpioConfigurationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.GpioConfigurationList)
    MergeFrom(*source);
  }
}

void GpioConfigurationList::MergeFrom(const GpioConfigurationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.GpioConfigurationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  port_configurations_.MergeFrom(from.port_configurations_);
}

void GpioConfigurationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.GpioConfigurationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpioConfigurationList::CopyFrom(const GpioConfigurationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.GpioConfigurationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioConfigurationList::IsInitialized() const {
  return true;
}

void GpioConfigurationList::Swap(GpioConfigurationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GpioConfigurationList::InternalSwap(GpioConfigurationList* other) {
  using std::swap;
  CastToBase(&port_configurations_)->InternalSwap(CastToBase(&other->port_configurations_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GpioConfigurationList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GpioConfiguration::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GpioConfiguration::kPortNumberFieldNumber;
const int GpioConfiguration::kPinConfigurationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GpioConfiguration::GpioConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_GpioConfiguration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.GpioConfiguration)
}
GpioConfiguration::GpioConfiguration(const GpioConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pin_configurations_(from.pin_configurations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  port_number_ = from.port_number_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.GpioConfiguration)
}

void GpioConfiguration::SharedCtor() {
  port_number_ = 0u;
}

GpioConfiguration::~GpioConfiguration() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.GpioConfiguration)
  SharedDtor();
}

void GpioConfiguration::SharedDtor() {
}

void GpioConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GpioConfiguration::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GpioConfiguration& GpioConfiguration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_GpioConfiguration.base);
  return *internal_default_instance();
}


void GpioConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.GpioConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pin_configurations_.Clear();
  port_number_ = 0u;
  _internal_metadata_.Clear();
}

bool GpioConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.GpioConfiguration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 port_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Kinova.Api.Base.GpioPinConfiguration pin_configurations = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pin_configurations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.GpioConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.GpioConfiguration)
  return false;
#undef DO_
}

void GpioConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.GpioConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port_number = 1;
  if (this->port_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port_number(), output);
  }

  // repeated .Kinova.Api.Base.GpioPinConfiguration pin_configurations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pin_configurations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->pin_configurations(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.GpioConfiguration)
}

::google::protobuf::uint8* GpioConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.GpioConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port_number = 1;
  if (this->port_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port_number(), target);
  }

  // repeated .Kinova.Api.Base.GpioPinConfiguration pin_configurations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pin_configurations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->pin_configurations(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.GpioConfiguration)
  return target;
}

size_t GpioConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.GpioConfiguration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.GpioPinConfiguration pin_configurations = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->pin_configurations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pin_configurations(static_cast<int>(i)));
    }
  }

  // uint32 port_number = 1;
  if (this->port_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpioConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.GpioConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const GpioConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GpioConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.GpioConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.GpioConfiguration)
    MergeFrom(*source);
  }
}

void GpioConfiguration::MergeFrom(const GpioConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.GpioConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pin_configurations_.MergeFrom(from.pin_configurations_);
  if (from.port_number() != 0) {
    set_port_number(from.port_number());
  }
}

void GpioConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.GpioConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpioConfiguration::CopyFrom(const GpioConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.GpioConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioConfiguration::IsInitialized() const {
  return true;
}

void GpioConfiguration::Swap(GpioConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GpioConfiguration::InternalSwap(GpioConfiguration* other) {
  using std::swap;
  CastToBase(&pin_configurations_)->InternalSwap(CastToBase(&other->pin_configurations_));
  swap(port_number_, other->port_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GpioConfiguration::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GpioPinConfiguration::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GpioPinConfiguration::kPinIdFieldNumber;
const int GpioPinConfiguration::kPinPropertyFieldNumber;
const int GpioPinConfiguration::kOutputEnableFieldNumber;
const int GpioPinConfiguration::kDefaultOutputValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GpioPinConfiguration::GpioPinConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_GpioPinConfiguration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.GpioPinConfiguration)
}
GpioPinConfiguration::GpioPinConfiguration(const GpioPinConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pin_id_, &from.pin_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_output_value_) -
    reinterpret_cast<char*>(&pin_id_)) + sizeof(default_output_value_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.GpioPinConfiguration)
}

void GpioPinConfiguration::SharedCtor() {
  ::memset(&pin_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_output_value_) -
      reinterpret_cast<char*>(&pin_id_)) + sizeof(default_output_value_));
}

GpioPinConfiguration::~GpioPinConfiguration() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.GpioPinConfiguration)
  SharedDtor();
}

void GpioPinConfiguration::SharedDtor() {
}

void GpioPinConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GpioPinConfiguration::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GpioPinConfiguration& GpioPinConfiguration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_GpioPinConfiguration.base);
  return *internal_default_instance();
}


void GpioPinConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.GpioPinConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pin_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_output_value_) -
      reinterpret_cast<char*>(&pin_id_)) + sizeof(default_output_value_));
  _internal_metadata_.Clear();
}

bool GpioPinConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.GpioPinConfiguration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 pin_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pin_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.GpioPinPropertyFlags pin_property = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pin_property(static_cast< ::Kinova::Api::Base::GpioPinPropertyFlags >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool output_enable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &output_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool default_output_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &default_output_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.GpioPinConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.GpioPinConfiguration)
  return false;
#undef DO_
}

void GpioPinConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.GpioPinConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pin_id = 1;
  if (this->pin_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pin_id(), output);
  }

  // .Kinova.Api.Base.GpioPinPropertyFlags pin_property = 2;
  if (this->pin_property() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pin_property(), output);
  }

  // bool output_enable = 3;
  if (this->output_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->output_enable(), output);
  }

  // bool default_output_value = 4;
  if (this->default_output_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->default_output_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.GpioPinConfiguration)
}

::google::protobuf::uint8* GpioPinConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.GpioPinConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pin_id = 1;
  if (this->pin_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pin_id(), target);
  }

  // .Kinova.Api.Base.GpioPinPropertyFlags pin_property = 2;
  if (this->pin_property() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pin_property(), target);
  }

  // bool output_enable = 3;
  if (this->output_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->output_enable(), target);
  }

  // bool default_output_value = 4;
  if (this->default_output_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->default_output_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.GpioPinConfiguration)
  return target;
}

size_t GpioPinConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.GpioPinConfiguration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 pin_id = 1;
  if (this->pin_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pin_id());
  }

  // .Kinova.Api.Base.GpioPinPropertyFlags pin_property = 2;
  if (this->pin_property() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pin_property());
  }

  // bool output_enable = 3;
  if (this->output_enable() != 0) {
    total_size += 1 + 1;
  }

  // bool default_output_value = 4;
  if (this->default_output_value() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpioPinConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.GpioPinConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const GpioPinConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GpioPinConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.GpioPinConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.GpioPinConfiguration)
    MergeFrom(*source);
  }
}

void GpioPinConfiguration::MergeFrom(const GpioPinConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.GpioPinConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pin_id() != 0) {
    set_pin_id(from.pin_id());
  }
  if (from.pin_property() != 0) {
    set_pin_property(from.pin_property());
  }
  if (from.output_enable() != 0) {
    set_output_enable(from.output_enable());
  }
  if (from.default_output_value() != 0) {
    set_default_output_value(from.default_output_value());
  }
}

void GpioPinConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.GpioPinConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpioPinConfiguration::CopyFrom(const GpioPinConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.GpioPinConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioPinConfiguration::IsInitialized() const {
  return true;
}

void GpioPinConfiguration::Swap(GpioPinConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GpioPinConfiguration::InternalSwap(GpioPinConfiguration* other) {
  using std::swap;
  swap(pin_id_, other->pin_id_);
  swap(pin_property_, other->pin_property_);
  swap(output_enable_, other->output_enable_);
  swap(default_output_value_, other->default_output_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GpioPinConfiguration::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FullUserProfile::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_FullUserProfile_default_instance_._instance.get_mutable()->user_profile_ = const_cast< ::Kinova::Api::Base::UserProfile*>(
      ::Kinova::Api::Base::UserProfile::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FullUserProfile::kUserProfileFieldNumber;
const int FullUserProfile::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FullUserProfile::FullUserProfile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_FullUserProfile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.FullUserProfile)
}
FullUserProfile::FullUserProfile(const FullUserProfile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_user_profile()) {
    user_profile_ = new ::Kinova::Api::Base::UserProfile(*from.user_profile_);
  } else {
    user_profile_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.FullUserProfile)
}

void FullUserProfile::SharedCtor() {
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_profile_ = NULL;
}

FullUserProfile::~FullUserProfile() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.FullUserProfile)
  SharedDtor();
}

void FullUserProfile::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_profile_;
}

void FullUserProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FullUserProfile::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FullUserProfile& FullUserProfile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_FullUserProfile.base);
  return *internal_default_instance();
}


void FullUserProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.FullUserProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && user_profile_ != NULL) {
    delete user_profile_;
  }
  user_profile_ = NULL;
  _internal_metadata_.Clear();
}

bool FullUserProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.FullUserProfile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.UserProfile user_profile = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.FullUserProfile.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.FullUserProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.FullUserProfile)
  return false;
#undef DO_
}

void FullUserProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.FullUserProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.UserProfile user_profile = 1;
  if (this->has_user_profile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_user_profile(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.FullUserProfile.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.FullUserProfile)
}

::google::protobuf::uint8* FullUserProfile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.FullUserProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.UserProfile user_profile = 1;
  if (this->has_user_profile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_user_profile(), deterministic, target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.FullUserProfile.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.FullUserProfile)
  return target;
}

size_t FullUserProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.FullUserProfile)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // .Kinova.Api.Base.UserProfile user_profile = 1;
  if (this->has_user_profile()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_profile_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullUserProfile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.FullUserProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const FullUserProfile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FullUserProfile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.FullUserProfile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.FullUserProfile)
    MergeFrom(*source);
  }
}

void FullUserProfile::MergeFrom(const FullUserProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.FullUserProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_user_profile()) {
    mutable_user_profile()->::Kinova::Api::Base::UserProfile::MergeFrom(from.user_profile());
  }
}

void FullUserProfile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.FullUserProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullUserProfile::CopyFrom(const FullUserProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.FullUserProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullUserProfile::IsInitialized() const {
  return true;
}

void FullUserProfile::Swap(FullUserProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FullUserProfile::InternalSwap(FullUserProfile* other) {
  using std::swap;
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_profile_, other->user_profile_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FullUserProfile::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserProfile::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_UserProfile_default_instance_._instance.get_mutable()->handle_ = const_cast< ::Kinova::Api::Common::UserProfileHandle*>(
      ::Kinova::Api::Common::UserProfileHandle::internal_default_instance());
}
void UserProfile::clear_handle() {
  if (GetArenaNoVirtual() == NULL && handle_ != NULL) {
    delete handle_;
  }
  handle_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserProfile::kHandleFieldNumber;
const int UserProfile::kUsernameFieldNumber;
const int UserProfile::kFirstnameFieldNumber;
const int UserProfile::kLastnameFieldNumber;
const int UserProfile::kApplicationDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserProfile::UserProfile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_UserProfile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.UserProfile)
}
UserProfile::UserProfile(const UserProfile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  firstname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.firstname().size() > 0) {
    firstname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firstname_);
  }
  lastname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lastname().size() > 0) {
    lastname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lastname_);
  }
  application_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.application_data().size() > 0) {
    application_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_data_);
  }
  if (from.has_handle()) {
    handle_ = new ::Kinova::Api::Common::UserProfileHandle(*from.handle_);
  } else {
    handle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.UserProfile)
}

void UserProfile::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firstname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_ = NULL;
}

UserProfile::~UserProfile() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.UserProfile)
  SharedDtor();
}

void UserProfile::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firstname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete handle_;
}

void UserProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserProfile::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserProfile& UserProfile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_UserProfile.base);
  return *internal_default_instance();
}


void UserProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.UserProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firstname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && handle_ != NULL) {
    delete handle_;
  }
  handle_ = NULL;
  _internal_metadata_.Clear();
}

bool UserProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.UserProfile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Common.UserProfileHandle handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.UserProfile.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string firstname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firstname().data(), static_cast<int>(this->firstname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.UserProfile.firstname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lastname = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lastname().data(), static_cast<int>(this->lastname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.UserProfile.lastname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string application_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->application_data().data(), static_cast<int>(this->application_data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.UserProfile.application_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.UserProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.UserProfile)
  return false;
#undef DO_
}

void UserProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.UserProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.UserProfileHandle handle = 1;
  if (this->has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_handle(), output);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.UserProfile.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // string firstname = 3;
  if (this->firstname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firstname().data(), static_cast<int>(this->firstname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.UserProfile.firstname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->firstname(), output);
  }

  // string lastname = 4;
  if (this->lastname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lastname().data(), static_cast<int>(this->lastname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.UserProfile.lastname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->lastname(), output);
  }

  // string application_data = 5;
  if (this->application_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_data().data(), static_cast<int>(this->application_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.UserProfile.application_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->application_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.UserProfile)
}

::google::protobuf::uint8* UserProfile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.UserProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.UserProfileHandle handle = 1;
  if (this->has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_handle(), deterministic, target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.UserProfile.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // string firstname = 3;
  if (this->firstname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firstname().data(), static_cast<int>(this->firstname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.UserProfile.firstname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->firstname(), target);
  }

  // string lastname = 4;
  if (this->lastname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lastname().data(), static_cast<int>(this->lastname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.UserProfile.lastname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lastname(), target);
  }

  // string application_data = 5;
  if (this->application_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_data().data(), static_cast<int>(this->application_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.UserProfile.application_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->application_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.UserProfile)
  return target;
}

size_t UserProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.UserProfile)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string firstname = 3;
  if (this->firstname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firstname());
  }

  // string lastname = 4;
  if (this->lastname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lastname());
  }

  // string application_data = 5;
  if (this->application_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->application_data());
  }

  // .Kinova.Api.Common.UserProfileHandle handle = 1;
  if (this->has_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserProfile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.UserProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const UserProfile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserProfile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.UserProfile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.UserProfile)
    MergeFrom(*source);
  }
}

void UserProfile::MergeFrom(const UserProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.UserProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.firstname().size() > 0) {

    firstname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firstname_);
  }
  if (from.lastname().size() > 0) {

    lastname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lastname_);
  }
  if (from.application_data().size() > 0) {

    application_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_data_);
  }
  if (from.has_handle()) {
    mutable_handle()->::Kinova::Api::Common::UserProfileHandle::MergeFrom(from.handle());
  }
}

void UserProfile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.UserProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserProfile::CopyFrom(const UserProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.UserProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserProfile::IsInitialized() const {
  return true;
}

void UserProfile::Swap(UserProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserProfile::InternalSwap(UserProfile* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  firstname_.Swap(&other->firstname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lastname_.Swap(&other->lastname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  application_data_.Swap(&other->application_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(handle_, other->handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserProfile::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserProfileList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserProfileList::kUserProfilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserProfileList::UserProfileList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_UserProfileList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.UserProfileList)
}
UserProfileList::UserProfileList(const UserProfileList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      user_profiles_(from.user_profiles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.UserProfileList)
}

void UserProfileList::SharedCtor() {
}

UserProfileList::~UserProfileList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.UserProfileList)
  SharedDtor();
}

void UserProfileList::SharedDtor() {
}

void UserProfileList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserProfileList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserProfileList& UserProfileList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_UserProfileList.base);
  return *internal_default_instance();
}


void UserProfileList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.UserProfileList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_profiles_.Clear();
  _internal_metadata_.Clear();
}

bool UserProfileList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.UserProfileList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.UserProfile user_profiles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_user_profiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.UserProfileList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.UserProfileList)
  return false;
#undef DO_
}

void UserProfileList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.UserProfileList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.UserProfile user_profiles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_profiles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->user_profiles(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.UserProfileList)
}

::google::protobuf::uint8* UserProfileList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.UserProfileList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.UserProfile user_profiles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_profiles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->user_profiles(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.UserProfileList)
  return target;
}

size_t UserProfileList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.UserProfileList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.UserProfile user_profiles = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->user_profiles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->user_profiles(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserProfileList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.UserProfileList)
  GOOGLE_DCHECK_NE(&from, this);
  const UserProfileList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserProfileList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.UserProfileList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.UserProfileList)
    MergeFrom(*source);
  }
}

void UserProfileList::MergeFrom(const UserProfileList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.UserProfileList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_profiles_.MergeFrom(from.user_profiles_);
}

void UserProfileList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.UserProfileList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserProfileList::CopyFrom(const UserProfileList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.UserProfileList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserProfileList::IsInitialized() const {
  return true;
}

void UserProfileList::Swap(UserProfileList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserProfileList::InternalSwap(UserProfileList* other) {
  using std::swap;
  CastToBase(&user_profiles_)->InternalSwap(CastToBase(&other->user_profiles_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserProfileList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserList::InitAsDefaultInstance() {
}
void UserList::clear_user_handles() {
  user_handles_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserList::kUserHandlesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserList::UserList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_UserList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.UserList)
}
UserList::UserList(const UserList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      user_handles_(from.user_handles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.UserList)
}

void UserList::SharedCtor() {
}

UserList::~UserList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.UserList)
  SharedDtor();
}

void UserList::SharedDtor() {
}

void UserList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserList& UserList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_UserList.base);
  return *internal_default_instance();
}


void UserList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.UserList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_handles_.Clear();
  _internal_metadata_.Clear();
}

bool UserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.UserList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Common.UserProfileHandle user_handles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_user_handles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.UserList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.UserList)
  return false;
#undef DO_
}

void UserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.UserList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Common.UserProfileHandle user_handles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_handles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->user_handles(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.UserList)
}

::google::protobuf::uint8* UserList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.UserList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Common.UserProfileHandle user_handles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_handles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->user_handles(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.UserList)
  return target;
}

size_t UserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.UserList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Common.UserProfileHandle user_handles = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->user_handles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->user_handles(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.UserList)
  GOOGLE_DCHECK_NE(&from, this);
  const UserList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.UserList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.UserList)
    MergeFrom(*source);
  }
}

void UserList::MergeFrom(const UserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.UserList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_handles_.MergeFrom(from.user_handles_);
}

void UserList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.UserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserList::CopyFrom(const UserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.UserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserList::IsInitialized() const {
  return true;
}

void UserList::Swap(UserList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserList::InternalSwap(UserList* other) {
  using std::swap;
  CastToBase(&user_handles_)->InternalSwap(CastToBase(&other->user_handles_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PasswordChange::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_PasswordChange_default_instance_._instance.get_mutable()->handle_ = const_cast< ::Kinova::Api::Common::UserProfileHandle*>(
      ::Kinova::Api::Common::UserProfileHandle::internal_default_instance());
}
void PasswordChange::clear_handle() {
  if (GetArenaNoVirtual() == NULL && handle_ != NULL) {
    delete handle_;
  }
  handle_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PasswordChange::kHandleFieldNumber;
const int PasswordChange::kOldPasswordFieldNumber;
const int PasswordChange::kNewPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PasswordChange::PasswordChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_PasswordChange.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.PasswordChange)
}
PasswordChange::PasswordChange(const PasswordChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  old_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.old_password().size() > 0) {
    old_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_password_);
  }
  new_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.new_password().size() > 0) {
    new_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_password_);
  }
  if (from.has_handle()) {
    handle_ = new ::Kinova::Api::Common::UserProfileHandle(*from.handle_);
  } else {
    handle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.PasswordChange)
}

void PasswordChange::SharedCtor() {
  old_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_ = NULL;
}

PasswordChange::~PasswordChange() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.PasswordChange)
  SharedDtor();
}

void PasswordChange::SharedDtor() {
  old_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete handle_;
}

void PasswordChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PasswordChange::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PasswordChange& PasswordChange::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_PasswordChange.base);
  return *internal_default_instance();
}


void PasswordChange::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.PasswordChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  old_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && handle_ != NULL) {
    delete handle_;
  }
  handle_ = NULL;
  _internal_metadata_.Clear();
}

bool PasswordChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.PasswordChange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Common.UserProfileHandle handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string old_password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->old_password().data(), static_cast<int>(this->old_password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.PasswordChange.old_password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string new_password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->new_password().data(), static_cast<int>(this->new_password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.PasswordChange.new_password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.PasswordChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.PasswordChange)
  return false;
#undef DO_
}

void PasswordChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.PasswordChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.UserProfileHandle handle = 1;
  if (this->has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_handle(), output);
  }

  // string old_password = 2;
  if (this->old_password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->old_password().data(), static_cast<int>(this->old_password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.PasswordChange.old_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->old_password(), output);
  }

  // string new_password = 3;
  if (this->new_password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_password().data(), static_cast<int>(this->new_password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.PasswordChange.new_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->new_password(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.PasswordChange)
}

::google::protobuf::uint8* PasswordChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.PasswordChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.UserProfileHandle handle = 1;
  if (this->has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_handle(), deterministic, target);
  }

  // string old_password = 2;
  if (this->old_password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->old_password().data(), static_cast<int>(this->old_password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.PasswordChange.old_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->old_password(), target);
  }

  // string new_password = 3;
  if (this->new_password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_password().data(), static_cast<int>(this->new_password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.PasswordChange.new_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->new_password(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.PasswordChange)
  return target;
}

size_t PasswordChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.PasswordChange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string old_password = 2;
  if (this->old_password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->old_password());
  }

  // string new_password = 3;
  if (this->new_password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->new_password());
  }

  // .Kinova.Api.Common.UserProfileHandle handle = 1;
  if (this->has_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PasswordChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.PasswordChange)
  GOOGLE_DCHECK_NE(&from, this);
  const PasswordChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PasswordChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.PasswordChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.PasswordChange)
    MergeFrom(*source);
  }
}

void PasswordChange::MergeFrom(const PasswordChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.PasswordChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.old_password().size() > 0) {

    old_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_password_);
  }
  if (from.new_password().size() > 0) {

    new_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_password_);
  }
  if (from.has_handle()) {
    mutable_handle()->::Kinova::Api::Common::UserProfileHandle::MergeFrom(from.handle());
  }
}

void PasswordChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.PasswordChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PasswordChange::CopyFrom(const PasswordChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.PasswordChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasswordChange::IsInitialized() const {
  return true;
}

void PasswordChange::Swap(PasswordChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PasswordChange::InternalSwap(PasswordChange* other) {
  using std::swap;
  old_password_.Swap(&other->old_password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  new_password_.Swap(&other->new_password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(handle_, other->handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PasswordChange::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SequenceHandle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequenceHandle::kIdentifierFieldNumber;
const int SequenceHandle::kPermissionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequenceHandle::SequenceHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_SequenceHandle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.SequenceHandle)
}
SequenceHandle::SequenceHandle(const SequenceHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&identifier_, &from.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.SequenceHandle)
}

void SequenceHandle::SharedCtor() {
  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
}

SequenceHandle::~SequenceHandle() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.SequenceHandle)
  SharedDtor();
}

void SequenceHandle::SharedDtor() {
}

void SequenceHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SequenceHandle::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SequenceHandle& SequenceHandle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_SequenceHandle.base);
  return *internal_default_instance();
}


void SequenceHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.SequenceHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
  _internal_metadata_.Clear();
}

bool SequenceHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.SequenceHandle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 permission = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.SequenceHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.SequenceHandle)
  return false;
#undef DO_
}

void SequenceHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.SequenceHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->identifier(), output);
  }

  // fixed32 permission = 2;
  if (this->permission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->permission(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.SequenceHandle)
}

::google::protobuf::uint8* SequenceHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.SequenceHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->identifier(), target);
  }

  // fixed32 permission = 2;
  if (this->permission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->permission(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.SequenceHandle)
  return target;
}

size_t SequenceHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.SequenceHandle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->identifier());
  }

  // fixed32 permission = 2;
  if (this->permission() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequenceHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.SequenceHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const SequenceHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SequenceHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.SequenceHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.SequenceHandle)
    MergeFrom(*source);
  }
}

void SequenceHandle::MergeFrom(const SequenceHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.SequenceHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.identifier() != 0) {
    set_identifier(from.identifier());
  }
  if (from.permission() != 0) {
    set_permission(from.permission());
  }
}

void SequenceHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.SequenceHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequenceHandle::CopyFrom(const SequenceHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.SequenceHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceHandle::IsInitialized() const {
  return true;
}

void SequenceHandle::Swap(SequenceHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequenceHandle::InternalSwap(SequenceHandle* other) {
  using std::swap;
  swap(identifier_, other->identifier_);
  swap(permission_, other->permission_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SequenceHandle::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AdvancedSequenceHandle::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_AdvancedSequenceHandle_default_instance_._instance.get_mutable()->handle_ = const_cast< ::Kinova::Api::Base::SequenceHandle*>(
      ::Kinova::Api::Base::SequenceHandle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdvancedSequenceHandle::kHandleFieldNumber;
const int AdvancedSequenceHandle::kInLoopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdvancedSequenceHandle::AdvancedSequenceHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_AdvancedSequenceHandle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.AdvancedSequenceHandle)
}
AdvancedSequenceHandle::AdvancedSequenceHandle(const AdvancedSequenceHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_handle()) {
    handle_ = new ::Kinova::Api::Base::SequenceHandle(*from.handle_);
  } else {
    handle_ = NULL;
  }
  in_loop_ = from.in_loop_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.AdvancedSequenceHandle)
}

void AdvancedSequenceHandle::SharedCtor() {
  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_loop_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(in_loop_));
}

AdvancedSequenceHandle::~AdvancedSequenceHandle() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.AdvancedSequenceHandle)
  SharedDtor();
}

void AdvancedSequenceHandle::SharedDtor() {
  if (this != internal_default_instance()) delete handle_;
}

void AdvancedSequenceHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AdvancedSequenceHandle::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AdvancedSequenceHandle& AdvancedSequenceHandle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_AdvancedSequenceHandle.base);
  return *internal_default_instance();
}


void AdvancedSequenceHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.AdvancedSequenceHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && handle_ != NULL) {
    delete handle_;
  }
  handle_ = NULL;
  in_loop_ = false;
  _internal_metadata_.Clear();
}

bool AdvancedSequenceHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.AdvancedSequenceHandle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.SequenceHandle handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool in_loop = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_loop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.AdvancedSequenceHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.AdvancedSequenceHandle)
  return false;
#undef DO_
}

void AdvancedSequenceHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.AdvancedSequenceHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.SequenceHandle handle = 1;
  if (this->has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_handle(), output);
  }

  // bool in_loop = 2;
  if (this->in_loop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->in_loop(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.AdvancedSequenceHandle)
}

::google::protobuf::uint8* AdvancedSequenceHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.AdvancedSequenceHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.SequenceHandle handle = 1;
  if (this->has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_handle(), deterministic, target);
  }

  // bool in_loop = 2;
  if (this->in_loop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->in_loop(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.AdvancedSequenceHandle)
  return target;
}

size_t AdvancedSequenceHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.AdvancedSequenceHandle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.SequenceHandle handle = 1;
  if (this->has_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  // bool in_loop = 2;
  if (this->in_loop() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdvancedSequenceHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.AdvancedSequenceHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const AdvancedSequenceHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdvancedSequenceHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.AdvancedSequenceHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.AdvancedSequenceHandle)
    MergeFrom(*source);
  }
}

void AdvancedSequenceHandle::MergeFrom(const AdvancedSequenceHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.AdvancedSequenceHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_handle()) {
    mutable_handle()->::Kinova::Api::Base::SequenceHandle::MergeFrom(from.handle());
  }
  if (from.in_loop() != 0) {
    set_in_loop(from.in_loop());
  }
}

void AdvancedSequenceHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.AdvancedSequenceHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvancedSequenceHandle::CopyFrom(const AdvancedSequenceHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.AdvancedSequenceHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvancedSequenceHandle::IsInitialized() const {
  return true;
}

void AdvancedSequenceHandle::Swap(AdvancedSequenceHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdvancedSequenceHandle::InternalSwap(AdvancedSequenceHandle* other) {
  using std::swap;
  swap(handle_, other->handle_);
  swap(in_loop_, other->in_loop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AdvancedSequenceHandle::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SequenceTaskHandle::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_SequenceTaskHandle_default_instance_._instance.get_mutable()->sequence_handle_ = const_cast< ::Kinova::Api::Base::SequenceHandle*>(
      ::Kinova::Api::Base::SequenceHandle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequenceTaskHandle::kSequenceHandleFieldNumber;
const int SequenceTaskHandle::kTaskIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequenceTaskHandle::SequenceTaskHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_SequenceTaskHandle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.SequenceTaskHandle)
}
SequenceTaskHandle::SequenceTaskHandle(const SequenceTaskHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sequence_handle()) {
    sequence_handle_ = new ::Kinova::Api::Base::SequenceHandle(*from.sequence_handle_);
  } else {
    sequence_handle_ = NULL;
  }
  task_index_ = from.task_index_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.SequenceTaskHandle)
}

void SequenceTaskHandle::SharedCtor() {
  ::memset(&sequence_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_index_) -
      reinterpret_cast<char*>(&sequence_handle_)) + sizeof(task_index_));
}

SequenceTaskHandle::~SequenceTaskHandle() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.SequenceTaskHandle)
  SharedDtor();
}

void SequenceTaskHandle::SharedDtor() {
  if (this != internal_default_instance()) delete sequence_handle_;
}

void SequenceTaskHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SequenceTaskHandle::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SequenceTaskHandle& SequenceTaskHandle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_SequenceTaskHandle.base);
  return *internal_default_instance();
}


void SequenceTaskHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.SequenceTaskHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sequence_handle_ != NULL) {
    delete sequence_handle_;
  }
  sequence_handle_ = NULL;
  task_index_ = 0u;
  _internal_metadata_.Clear();
}

bool SequenceTaskHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.SequenceTaskHandle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.SequenceHandle sequence_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sequence_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 task_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.SequenceTaskHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.SequenceTaskHandle)
  return false;
#undef DO_
}

void SequenceTaskHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.SequenceTaskHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.SequenceHandle sequence_handle = 1;
  if (this->has_sequence_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sequence_handle(), output);
  }

  // uint32 task_index = 2;
  if (this->task_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.SequenceTaskHandle)
}

::google::protobuf::uint8* SequenceTaskHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.SequenceTaskHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.SequenceHandle sequence_handle = 1;
  if (this->has_sequence_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sequence_handle(), deterministic, target);
  }

  // uint32 task_index = 2;
  if (this->task_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.SequenceTaskHandle)
  return target;
}

size_t SequenceTaskHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.SequenceTaskHandle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.SequenceHandle sequence_handle = 1;
  if (this->has_sequence_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sequence_handle_);
  }

  // uint32 task_index = 2;
  if (this->task_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->task_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequenceTaskHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.SequenceTaskHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const SequenceTaskHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SequenceTaskHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.SequenceTaskHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.SequenceTaskHandle)
    MergeFrom(*source);
  }
}

void SequenceTaskHandle::MergeFrom(const SequenceTaskHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.SequenceTaskHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sequence_handle()) {
    mutable_sequence_handle()->::Kinova::Api::Base::SequenceHandle::MergeFrom(from.sequence_handle());
  }
  if (from.task_index() != 0) {
    set_task_index(from.task_index());
  }
}

void SequenceTaskHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.SequenceTaskHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequenceTaskHandle::CopyFrom(const SequenceTaskHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.SequenceTaskHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceTaskHandle::IsInitialized() const {
  return true;
}

void SequenceTaskHandle::Swap(SequenceTaskHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequenceTaskHandle::InternalSwap(SequenceTaskHandle* other) {
  using std::swap;
  swap(sequence_handle_, other->sequence_handle_);
  swap(task_index_, other->task_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SequenceTaskHandle::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SequenceTask::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_SequenceTask_default_instance_._instance.get_mutable()->action_ = const_cast< ::Kinova::Api::Base::Action*>(
      ::Kinova::Api::Base::Action::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequenceTask::kGroupIdentifierFieldNumber;
const int SequenceTask::kActionFieldNumber;
const int SequenceTask::kApplicationDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequenceTask::SequenceTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_SequenceTask.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.SequenceTask)
}
SequenceTask::SequenceTask(const SequenceTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  application_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.application_data().size() > 0) {
    application_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_data_);
  }
  if (from.has_action()) {
    action_ = new ::Kinova::Api::Base::Action(*from.action_);
  } else {
    action_ = NULL;
  }
  group_identifier_ = from.group_identifier_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.SequenceTask)
}

void SequenceTask::SharedCtor() {
  application_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_identifier_) -
      reinterpret_cast<char*>(&action_)) + sizeof(group_identifier_));
}

SequenceTask::~SequenceTask() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.SequenceTask)
  SharedDtor();
}

void SequenceTask::SharedDtor() {
  application_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete action_;
}

void SequenceTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SequenceTask::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SequenceTask& SequenceTask::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_SequenceTask.base);
  return *internal_default_instance();
}


void SequenceTask::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.SequenceTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  application_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && action_ != NULL) {
    delete action_;
  }
  action_ = NULL;
  group_identifier_ = 0u;
  _internal_metadata_.Clear();
}

bool SequenceTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.SequenceTask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 group_identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.Action action = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string application_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->application_data().data(), static_cast<int>(this->application_data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.SequenceTask.application_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.SequenceTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.SequenceTask)
  return false;
#undef DO_
}

void SequenceTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.SequenceTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_identifier = 1;
  if (this->group_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_identifier(), output);
  }

  // .Kinova.Api.Base.Action action = 2;
  if (this->has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_action(), output);
  }

  // string application_data = 3;
  if (this->application_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_data().data(), static_cast<int>(this->application_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.SequenceTask.application_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->application_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.SequenceTask)
}

::google::protobuf::uint8* SequenceTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.SequenceTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_identifier = 1;
  if (this->group_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_identifier(), target);
  }

  // .Kinova.Api.Base.Action action = 2;
  if (this->has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_action(), deterministic, target);
  }

  // string application_data = 3;
  if (this->application_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_data().data(), static_cast<int>(this->application_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.SequenceTask.application_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->application_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.SequenceTask)
  return target;
}

size_t SequenceTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.SequenceTask)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string application_data = 3;
  if (this->application_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->application_data());
  }

  // .Kinova.Api.Base.Action action = 2;
  if (this->has_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *action_);
  }

  // uint32 group_identifier = 1;
  if (this->group_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_identifier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequenceTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.SequenceTask)
  GOOGLE_DCHECK_NE(&from, this);
  const SequenceTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SequenceTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.SequenceTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.SequenceTask)
    MergeFrom(*source);
  }
}

void SequenceTask::MergeFrom(const SequenceTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.SequenceTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.application_data().size() > 0) {

    application_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_data_);
  }
  if (from.has_action()) {
    mutable_action()->::Kinova::Api::Base::Action::MergeFrom(from.action());
  }
  if (from.group_identifier() != 0) {
    set_group_identifier(from.group_identifier());
  }
}

void SequenceTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.SequenceTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequenceTask::CopyFrom(const SequenceTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.SequenceTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceTask::IsInitialized() const {
  return true;
}

void SequenceTask::Swap(SequenceTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequenceTask::InternalSwap(SequenceTask* other) {
  using std::swap;
  application_data_.Swap(&other->application_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(action_, other->action_);
  swap(group_identifier_, other->group_identifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SequenceTask::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SequenceTasks::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequenceTasks::kSequenceTasksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequenceTasks::SequenceTasks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_SequenceTasks.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.SequenceTasks)
}
SequenceTasks::SequenceTasks(const SequenceTasks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sequence_tasks_(from.sequence_tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.SequenceTasks)
}

void SequenceTasks::SharedCtor() {
}

SequenceTasks::~SequenceTasks() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.SequenceTasks)
  SharedDtor();
}

void SequenceTasks::SharedDtor() {
}

void SequenceTasks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SequenceTasks::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SequenceTasks& SequenceTasks::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_SequenceTasks.base);
  return *internal_default_instance();
}


void SequenceTasks::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.SequenceTasks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_tasks_.Clear();
  _internal_metadata_.Clear();
}

bool SequenceTasks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.SequenceTasks)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.SequenceTask sequence_tasks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sequence_tasks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.SequenceTasks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.SequenceTasks)
  return false;
#undef DO_
}

void SequenceTasks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.SequenceTasks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.SequenceTask sequence_tasks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sequence_tasks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->sequence_tasks(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.SequenceTasks)
}

::google::protobuf::uint8* SequenceTasks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.SequenceTasks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.SequenceTask sequence_tasks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sequence_tasks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sequence_tasks(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.SequenceTasks)
  return target;
}

size_t SequenceTasks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.SequenceTasks)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.SequenceTask sequence_tasks = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sequence_tasks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sequence_tasks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequenceTasks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.SequenceTasks)
  GOOGLE_DCHECK_NE(&from, this);
  const SequenceTasks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SequenceTasks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.SequenceTasks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.SequenceTasks)
    MergeFrom(*source);
  }
}

void SequenceTasks::MergeFrom(const SequenceTasks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.SequenceTasks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sequence_tasks_.MergeFrom(from.sequence_tasks_);
}

void SequenceTasks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.SequenceTasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequenceTasks::CopyFrom(const SequenceTasks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.SequenceTasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceTasks::IsInitialized() const {
  return true;
}

void SequenceTasks::Swap(SequenceTasks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequenceTasks::InternalSwap(SequenceTasks* other) {
  using std::swap;
  CastToBase(&sequence_tasks_)->InternalSwap(CastToBase(&other->sequence_tasks_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SequenceTasks::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SequenceTasksConfiguration::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_SequenceTasksConfiguration_default_instance_._instance.get_mutable()->sequence_task_handle_ = const_cast< ::Kinova::Api::Base::SequenceTaskHandle*>(
      ::Kinova::Api::Base::SequenceTaskHandle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequenceTasksConfiguration::kSequenceTaskHandleFieldNumber;
const int SequenceTasksConfiguration::kSequenceTasksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequenceTasksConfiguration::SequenceTasksConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_SequenceTasksConfiguration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.SequenceTasksConfiguration)
}
SequenceTasksConfiguration::SequenceTasksConfiguration(const SequenceTasksConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sequence_tasks_(from.sequence_tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sequence_task_handle()) {
    sequence_task_handle_ = new ::Kinova::Api::Base::SequenceTaskHandle(*from.sequence_task_handle_);
  } else {
    sequence_task_handle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.SequenceTasksConfiguration)
}

void SequenceTasksConfiguration::SharedCtor() {
  sequence_task_handle_ = NULL;
}

SequenceTasksConfiguration::~SequenceTasksConfiguration() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.SequenceTasksConfiguration)
  SharedDtor();
}

void SequenceTasksConfiguration::SharedDtor() {
  if (this != internal_default_instance()) delete sequence_task_handle_;
}

void SequenceTasksConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SequenceTasksConfiguration::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SequenceTasksConfiguration& SequenceTasksConfiguration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_SequenceTasksConfiguration.base);
  return *internal_default_instance();
}


void SequenceTasksConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.SequenceTasksConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_tasks_.Clear();
  if (GetArenaNoVirtual() == NULL && sequence_task_handle_ != NULL) {
    delete sequence_task_handle_;
  }
  sequence_task_handle_ = NULL;
  _internal_metadata_.Clear();
}

bool SequenceTasksConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.SequenceTasksConfiguration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.SequenceTaskHandle sequence_task_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sequence_task_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Kinova.Api.Base.SequenceTask sequence_tasks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sequence_tasks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.SequenceTasksConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.SequenceTasksConfiguration)
  return false;
#undef DO_
}

void SequenceTasksConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.SequenceTasksConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.SequenceTaskHandle sequence_task_handle = 1;
  if (this->has_sequence_task_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sequence_task_handle(), output);
  }

  // repeated .Kinova.Api.Base.SequenceTask sequence_tasks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sequence_tasks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->sequence_tasks(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.SequenceTasksConfiguration)
}

::google::protobuf::uint8* SequenceTasksConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.SequenceTasksConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.SequenceTaskHandle sequence_task_handle = 1;
  if (this->has_sequence_task_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sequence_task_handle(), deterministic, target);
  }

  // repeated .Kinova.Api.Base.SequenceTask sequence_tasks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sequence_tasks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->sequence_tasks(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.SequenceTasksConfiguration)
  return target;
}

size_t SequenceTasksConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.SequenceTasksConfiguration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.SequenceTask sequence_tasks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sequence_tasks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sequence_tasks(static_cast<int>(i)));
    }
  }

  // .Kinova.Api.Base.SequenceTaskHandle sequence_task_handle = 1;
  if (this->has_sequence_task_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sequence_task_handle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequenceTasksConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.SequenceTasksConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const SequenceTasksConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SequenceTasksConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.SequenceTasksConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.SequenceTasksConfiguration)
    MergeFrom(*source);
  }
}

void SequenceTasksConfiguration::MergeFrom(const SequenceTasksConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.SequenceTasksConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sequence_tasks_.MergeFrom(from.sequence_tasks_);
  if (from.has_sequence_task_handle()) {
    mutable_sequence_task_handle()->::Kinova::Api::Base::SequenceTaskHandle::MergeFrom(from.sequence_task_handle());
  }
}

void SequenceTasksConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.SequenceTasksConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequenceTasksConfiguration::CopyFrom(const SequenceTasksConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.SequenceTasksConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceTasksConfiguration::IsInitialized() const {
  return true;
}

void SequenceTasksConfiguration::Swap(SequenceTasksConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequenceTasksConfiguration::InternalSwap(SequenceTasksConfiguration* other) {
  using std::swap;
  CastToBase(&sequence_tasks_)->InternalSwap(CastToBase(&other->sequence_tasks_));
  swap(sequence_task_handle_, other->sequence_task_handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SequenceTasksConfiguration::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SequenceTaskConfiguration::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_SequenceTaskConfiguration_default_instance_._instance.get_mutable()->sequence_task_handle_ = const_cast< ::Kinova::Api::Base::SequenceTaskHandle*>(
      ::Kinova::Api::Base::SequenceTaskHandle::internal_default_instance());
  ::Kinova::Api::Base::_SequenceTaskConfiguration_default_instance_._instance.get_mutable()->sequence_task_ = const_cast< ::Kinova::Api::Base::SequenceTask*>(
      ::Kinova::Api::Base::SequenceTask::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequenceTaskConfiguration::kSequenceTaskHandleFieldNumber;
const int SequenceTaskConfiguration::kSequenceTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequenceTaskConfiguration::SequenceTaskConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_SequenceTaskConfiguration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.SequenceTaskConfiguration)
}
SequenceTaskConfiguration::SequenceTaskConfiguration(const SequenceTaskConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sequence_task_handle()) {
    sequence_task_handle_ = new ::Kinova::Api::Base::SequenceTaskHandle(*from.sequence_task_handle_);
  } else {
    sequence_task_handle_ = NULL;
  }
  if (from.has_sequence_task()) {
    sequence_task_ = new ::Kinova::Api::Base::SequenceTask(*from.sequence_task_);
  } else {
    sequence_task_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.SequenceTaskConfiguration)
}

void SequenceTaskConfiguration::SharedCtor() {
  ::memset(&sequence_task_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_task_) -
      reinterpret_cast<char*>(&sequence_task_handle_)) + sizeof(sequence_task_));
}

SequenceTaskConfiguration::~SequenceTaskConfiguration() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.SequenceTaskConfiguration)
  SharedDtor();
}

void SequenceTaskConfiguration::SharedDtor() {
  if (this != internal_default_instance()) delete sequence_task_handle_;
  if (this != internal_default_instance()) delete sequence_task_;
}

void SequenceTaskConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SequenceTaskConfiguration::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SequenceTaskConfiguration& SequenceTaskConfiguration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_SequenceTaskConfiguration.base);
  return *internal_default_instance();
}


void SequenceTaskConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.SequenceTaskConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sequence_task_handle_ != NULL) {
    delete sequence_task_handle_;
  }
  sequence_task_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && sequence_task_ != NULL) {
    delete sequence_task_;
  }
  sequence_task_ = NULL;
  _internal_metadata_.Clear();
}

bool SequenceTaskConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.SequenceTaskConfiguration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.SequenceTaskHandle sequence_task_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sequence_task_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.SequenceTask sequence_task = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sequence_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.SequenceTaskConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.SequenceTaskConfiguration)
  return false;
#undef DO_
}

void SequenceTaskConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.SequenceTaskConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.SequenceTaskHandle sequence_task_handle = 1;
  if (this->has_sequence_task_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sequence_task_handle(), output);
  }

  // .Kinova.Api.Base.SequenceTask sequence_task = 2;
  if (this->has_sequence_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_sequence_task(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.SequenceTaskConfiguration)
}

::google::protobuf::uint8* SequenceTaskConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.SequenceTaskConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.SequenceTaskHandle sequence_task_handle = 1;
  if (this->has_sequence_task_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sequence_task_handle(), deterministic, target);
  }

  // .Kinova.Api.Base.SequenceTask sequence_task = 2;
  if (this->has_sequence_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_sequence_task(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.SequenceTaskConfiguration)
  return target;
}

size_t SequenceTaskConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.SequenceTaskConfiguration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.SequenceTaskHandle sequence_task_handle = 1;
  if (this->has_sequence_task_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sequence_task_handle_);
  }

  // .Kinova.Api.Base.SequenceTask sequence_task = 2;
  if (this->has_sequence_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sequence_task_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequenceTaskConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.SequenceTaskConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const SequenceTaskConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SequenceTaskConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.SequenceTaskConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.SequenceTaskConfiguration)
    MergeFrom(*source);
  }
}

void SequenceTaskConfiguration::MergeFrom(const SequenceTaskConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.SequenceTaskConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sequence_task_handle()) {
    mutable_sequence_task_handle()->::Kinova::Api::Base::SequenceTaskHandle::MergeFrom(from.sequence_task_handle());
  }
  if (from.has_sequence_task()) {
    mutable_sequence_task()->::Kinova::Api::Base::SequenceTask::MergeFrom(from.sequence_task());
  }
}

void SequenceTaskConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.SequenceTaskConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequenceTaskConfiguration::CopyFrom(const SequenceTaskConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.SequenceTaskConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceTaskConfiguration::IsInitialized() const {
  return true;
}

void SequenceTaskConfiguration::Swap(SequenceTaskConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequenceTaskConfiguration::InternalSwap(SequenceTaskConfiguration* other) {
  using std::swap;
  swap(sequence_task_handle_, other->sequence_task_handle_);
  swap(sequence_task_, other->sequence_task_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SequenceTaskConfiguration::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SequenceTasksRange::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequenceTasksRange::kFirstTaskIndexFieldNumber;
const int SequenceTasksRange::kSecondTaskIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequenceTasksRange::SequenceTasksRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_SequenceTasksRange.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.SequenceTasksRange)
}
SequenceTasksRange::SequenceTasksRange(const SequenceTasksRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&first_task_index_, &from.first_task_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&second_task_index_) -
    reinterpret_cast<char*>(&first_task_index_)) + sizeof(second_task_index_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.SequenceTasksRange)
}

void SequenceTasksRange::SharedCtor() {
  ::memset(&first_task_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&second_task_index_) -
      reinterpret_cast<char*>(&first_task_index_)) + sizeof(second_task_index_));
}

SequenceTasksRange::~SequenceTasksRange() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.SequenceTasksRange)
  SharedDtor();
}

void SequenceTasksRange::SharedDtor() {
}

void SequenceTasksRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SequenceTasksRange::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SequenceTasksRange& SequenceTasksRange::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_SequenceTasksRange.base);
  return *internal_default_instance();
}


void SequenceTasksRange::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.SequenceTasksRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&first_task_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&second_task_index_) -
      reinterpret_cast<char*>(&first_task_index_)) + sizeof(second_task_index_));
  _internal_metadata_.Clear();
}

bool SequenceTasksRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.SequenceTasksRange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 first_task_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_task_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 second_task_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &second_task_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.SequenceTasksRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.SequenceTasksRange)
  return false;
#undef DO_
}

void SequenceTasksRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.SequenceTasksRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 first_task_index = 1;
  if (this->first_task_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->first_task_index(), output);
  }

  // uint32 second_task_index = 2;
  if (this->second_task_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->second_task_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.SequenceTasksRange)
}

::google::protobuf::uint8* SequenceTasksRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.SequenceTasksRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 first_task_index = 1;
  if (this->first_task_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->first_task_index(), target);
  }

  // uint32 second_task_index = 2;
  if (this->second_task_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->second_task_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.SequenceTasksRange)
  return target;
}

size_t SequenceTasksRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.SequenceTasksRange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 first_task_index = 1;
  if (this->first_task_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->first_task_index());
  }

  // uint32 second_task_index = 2;
  if (this->second_task_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->second_task_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequenceTasksRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.SequenceTasksRange)
  GOOGLE_DCHECK_NE(&from, this);
  const SequenceTasksRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SequenceTasksRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.SequenceTasksRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.SequenceTasksRange)
    MergeFrom(*source);
  }
}

void SequenceTasksRange::MergeFrom(const SequenceTasksRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.SequenceTasksRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.first_task_index() != 0) {
    set_first_task_index(from.first_task_index());
  }
  if (from.second_task_index() != 0) {
    set_second_task_index(from.second_task_index());
  }
}

void SequenceTasksRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.SequenceTasksRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequenceTasksRange::CopyFrom(const SequenceTasksRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.SequenceTasksRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceTasksRange::IsInitialized() const {
  return true;
}

void SequenceTasksRange::Swap(SequenceTasksRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequenceTasksRange::InternalSwap(SequenceTasksRange* other) {
  using std::swap;
  swap(first_task_index_, other->first_task_index_);
  swap(second_task_index_, other->second_task_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SequenceTasksRange::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SequenceTasksPair::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_SequenceTasksPair_default_instance_._instance.get_mutable()->sequence_handle_ = const_cast< ::Kinova::Api::Base::SequenceHandle*>(
      ::Kinova::Api::Base::SequenceHandle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequenceTasksPair::kSequenceHandleFieldNumber;
const int SequenceTasksPair::kFirstTaskIndexFieldNumber;
const int SequenceTasksPair::kSecondTaskIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequenceTasksPair::SequenceTasksPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_SequenceTasksPair.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.SequenceTasksPair)
}
SequenceTasksPair::SequenceTasksPair(const SequenceTasksPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sequence_handle()) {
    sequence_handle_ = new ::Kinova::Api::Base::SequenceHandle(*from.sequence_handle_);
  } else {
    sequence_handle_ = NULL;
  }
  ::memcpy(&first_task_index_, &from.first_task_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&second_task_index_) -
    reinterpret_cast<char*>(&first_task_index_)) + sizeof(second_task_index_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.SequenceTasksPair)
}

void SequenceTasksPair::SharedCtor() {
  ::memset(&sequence_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&second_task_index_) -
      reinterpret_cast<char*>(&sequence_handle_)) + sizeof(second_task_index_));
}

SequenceTasksPair::~SequenceTasksPair() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.SequenceTasksPair)
  SharedDtor();
}

void SequenceTasksPair::SharedDtor() {
  if (this != internal_default_instance()) delete sequence_handle_;
}

void SequenceTasksPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SequenceTasksPair::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SequenceTasksPair& SequenceTasksPair::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_SequenceTasksPair.base);
  return *internal_default_instance();
}


void SequenceTasksPair::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.SequenceTasksPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sequence_handle_ != NULL) {
    delete sequence_handle_;
  }
  sequence_handle_ = NULL;
  ::memset(&first_task_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&second_task_index_) -
      reinterpret_cast<char*>(&first_task_index_)) + sizeof(second_task_index_));
  _internal_metadata_.Clear();
}

bool SequenceTasksPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.SequenceTasksPair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.SequenceHandle sequence_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sequence_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 first_task_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_task_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 second_task_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &second_task_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.SequenceTasksPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.SequenceTasksPair)
  return false;
#undef DO_
}

void SequenceTasksPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.SequenceTasksPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.SequenceHandle sequence_handle = 1;
  if (this->has_sequence_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sequence_handle(), output);
  }

  // uint32 first_task_index = 2;
  if (this->first_task_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->first_task_index(), output);
  }

  // uint32 second_task_index = 3;
  if (this->second_task_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->second_task_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.SequenceTasksPair)
}

::google::protobuf::uint8* SequenceTasksPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.SequenceTasksPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.SequenceHandle sequence_handle = 1;
  if (this->has_sequence_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sequence_handle(), deterministic, target);
  }

  // uint32 first_task_index = 2;
  if (this->first_task_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->first_task_index(), target);
  }

  // uint32 second_task_index = 3;
  if (this->second_task_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->second_task_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.SequenceTasksPair)
  return target;
}

size_t SequenceTasksPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.SequenceTasksPair)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.SequenceHandle sequence_handle = 1;
  if (this->has_sequence_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sequence_handle_);
  }

  // uint32 first_task_index = 2;
  if (this->first_task_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->first_task_index());
  }

  // uint32 second_task_index = 3;
  if (this->second_task_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->second_task_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequenceTasksPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.SequenceTasksPair)
  GOOGLE_DCHECK_NE(&from, this);
  const SequenceTasksPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SequenceTasksPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.SequenceTasksPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.SequenceTasksPair)
    MergeFrom(*source);
  }
}

void SequenceTasksPair::MergeFrom(const SequenceTasksPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.SequenceTasksPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sequence_handle()) {
    mutable_sequence_handle()->::Kinova::Api::Base::SequenceHandle::MergeFrom(from.sequence_handle());
  }
  if (from.first_task_index() != 0) {
    set_first_task_index(from.first_task_index());
  }
  if (from.second_task_index() != 0) {
    set_second_task_index(from.second_task_index());
  }
}

void SequenceTasksPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.SequenceTasksPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequenceTasksPair::CopyFrom(const SequenceTasksPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.SequenceTasksPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceTasksPair::IsInitialized() const {
  return true;
}

void SequenceTasksPair::Swap(SequenceTasksPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequenceTasksPair::InternalSwap(SequenceTasksPair* other) {
  using std::swap;
  swap(sequence_handle_, other->sequence_handle_);
  swap(first_task_index_, other->first_task_index_);
  swap(second_task_index_, other->second_task_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SequenceTasksPair::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sequence::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_Sequence_default_instance_._instance.get_mutable()->handle_ = const_cast< ::Kinova::Api::Base::SequenceHandle*>(
      ::Kinova::Api::Base::SequenceHandle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sequence::kHandleFieldNumber;
const int Sequence::kNameFieldNumber;
const int Sequence::kApplicationDataFieldNumber;
const int Sequence::kTasksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sequence::Sequence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Sequence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Sequence)
}
Sequence::Sequence(const Sequence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  application_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.application_data().size() > 0) {
    application_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_data_);
  }
  if (from.has_handle()) {
    handle_ = new ::Kinova::Api::Base::SequenceHandle(*from.handle_);
  } else {
    handle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Sequence)
}

void Sequence::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_ = NULL;
}

Sequence::~Sequence() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Sequence)
  SharedDtor();
}

void Sequence::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete handle_;
}

void Sequence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sequence::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sequence& Sequence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Sequence.base);
  return *internal_default_instance();
}


void Sequence::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Sequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && handle_ != NULL) {
    delete handle_;
  }
  handle_ = NULL;
  _internal_metadata_.Clear();
}

bool Sequence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Sequence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.SequenceHandle handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.Sequence.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string application_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->application_data().data(), static_cast<int>(this->application_data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.Sequence.application_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Kinova.Api.Base.SequenceTask tasks = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Sequence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Sequence)
  return false;
#undef DO_
}

void Sequence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Sequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.SequenceHandle handle = 1;
  if (this->has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_handle(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.Sequence.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string application_data = 3;
  if (this->application_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_data().data(), static_cast<int>(this->application_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.Sequence.application_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->application_data(), output);
  }

  // repeated .Kinova.Api.Base.SequenceTask tasks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tasks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->tasks(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Sequence)
}

::google::protobuf::uint8* Sequence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Sequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.SequenceHandle handle = 1;
  if (this->has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_handle(), deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.Sequence.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string application_data = 3;
  if (this->application_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_data().data(), static_cast<int>(this->application_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.Sequence.application_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->application_data(), target);
  }

  // repeated .Kinova.Api.Base.SequenceTask tasks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tasks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->tasks(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Sequence)
  return target;
}

size_t Sequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Sequence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.SequenceTask tasks = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->tasks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tasks(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string application_data = 3;
  if (this->application_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->application_data());
  }

  // .Kinova.Api.Base.SequenceHandle handle = 1;
  if (this->has_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sequence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Sequence)
  GOOGLE_DCHECK_NE(&from, this);
  const Sequence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sequence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Sequence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Sequence)
    MergeFrom(*source);
  }
}

void Sequence::MergeFrom(const Sequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Sequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.application_data().size() > 0) {

    application_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_data_);
  }
  if (from.has_handle()) {
    mutable_handle()->::Kinova::Api::Base::SequenceHandle::MergeFrom(from.handle());
  }
}

void Sequence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sequence::CopyFrom(const Sequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sequence::IsInitialized() const {
  return true;
}

void Sequence::Swap(Sequence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sequence::InternalSwap(Sequence* other) {
  using std::swap;
  CastToBase(&tasks_)->InternalSwap(CastToBase(&other->tasks_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  application_data_.Swap(&other->application_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(handle_, other->handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sequence::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SequenceList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequenceList::kSequenceListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequenceList::SequenceList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_SequenceList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.SequenceList)
}
SequenceList::SequenceList(const SequenceList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sequence_list_(from.sequence_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.SequenceList)
}

void SequenceList::SharedCtor() {
}

SequenceList::~SequenceList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.SequenceList)
  SharedDtor();
}

void SequenceList::SharedDtor() {
}

void SequenceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SequenceList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SequenceList& SequenceList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_SequenceList.base);
  return *internal_default_instance();
}


void SequenceList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.SequenceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_list_.Clear();
  _internal_metadata_.Clear();
}

bool SequenceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.SequenceList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.Sequence sequence_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sequence_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.SequenceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.SequenceList)
  return false;
#undef DO_
}

void SequenceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.SequenceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.Sequence sequence_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sequence_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->sequence_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.SequenceList)
}

::google::protobuf::uint8* SequenceList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.SequenceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.Sequence sequence_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sequence_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sequence_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.SequenceList)
  return target;
}

size_t SequenceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.SequenceList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.Sequence sequence_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sequence_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sequence_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequenceList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.SequenceList)
  GOOGLE_DCHECK_NE(&from, this);
  const SequenceList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SequenceList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.SequenceList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.SequenceList)
    MergeFrom(*source);
  }
}

void SequenceList::MergeFrom(const SequenceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.SequenceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sequence_list_.MergeFrom(from.sequence_list_);
}

void SequenceList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.SequenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequenceList::CopyFrom(const SequenceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.SequenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceList::IsInitialized() const {
  return true;
}

void SequenceList::Swap(SequenceList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequenceList::InternalSwap(SequenceList* other) {
  using std::swap;
  CastToBase(&sequence_list_)->InternalSwap(CastToBase(&other->sequence_list_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SequenceList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AppendActionInformation::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_AppendActionInformation_default_instance_._instance.get_mutable()->sequence_handle_ = const_cast< ::Kinova::Api::Base::SequenceHandle*>(
      ::Kinova::Api::Base::SequenceHandle::internal_default_instance());
  ::Kinova::Api::Base::_AppendActionInformation_default_instance_._instance.get_mutable()->action_ = const_cast< ::Kinova::Api::Base::Action*>(
      ::Kinova::Api::Base::Action::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendActionInformation::kSequenceHandleFieldNumber;
const int AppendActionInformation::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendActionInformation::AppendActionInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_AppendActionInformation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.AppendActionInformation)
}
AppendActionInformation::AppendActionInformation(const AppendActionInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sequence_handle()) {
    sequence_handle_ = new ::Kinova::Api::Base::SequenceHandle(*from.sequence_handle_);
  } else {
    sequence_handle_ = NULL;
  }
  if (from.has_action()) {
    action_ = new ::Kinova::Api::Base::Action(*from.action_);
  } else {
    action_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.AppendActionInformation)
}

void AppendActionInformation::SharedCtor() {
  ::memset(&sequence_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&sequence_handle_)) + sizeof(action_));
}

AppendActionInformation::~AppendActionInformation() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.AppendActionInformation)
  SharedDtor();
}

void AppendActionInformation::SharedDtor() {
  if (this != internal_default_instance()) delete sequence_handle_;
  if (this != internal_default_instance()) delete action_;
}

void AppendActionInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AppendActionInformation::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AppendActionInformation& AppendActionInformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_AppendActionInformation.base);
  return *internal_default_instance();
}


void AppendActionInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.AppendActionInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sequence_handle_ != NULL) {
    delete sequence_handle_;
  }
  sequence_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && action_ != NULL) {
    delete action_;
  }
  action_ = NULL;
  _internal_metadata_.Clear();
}

bool AppendActionInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.AppendActionInformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.SequenceHandle sequence_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sequence_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.Action action = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.AppendActionInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.AppendActionInformation)
  return false;
#undef DO_
}

void AppendActionInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.AppendActionInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.SequenceHandle sequence_handle = 1;
  if (this->has_sequence_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sequence_handle(), output);
  }

  // .Kinova.Api.Base.Action action = 2;
  if (this->has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_action(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.AppendActionInformation)
}

::google::protobuf::uint8* AppendActionInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.AppendActionInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.SequenceHandle sequence_handle = 1;
  if (this->has_sequence_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sequence_handle(), deterministic, target);
  }

  // .Kinova.Api.Base.Action action = 2;
  if (this->has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_action(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.AppendActionInformation)
  return target;
}

size_t AppendActionInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.AppendActionInformation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.SequenceHandle sequence_handle = 1;
  if (this->has_sequence_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sequence_handle_);
  }

  // .Kinova.Api.Base.Action action = 2;
  if (this->has_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *action_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendActionInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.AppendActionInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendActionInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AppendActionInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.AppendActionInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.AppendActionInformation)
    MergeFrom(*source);
  }
}

void AppendActionInformation::MergeFrom(const AppendActionInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.AppendActionInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sequence_handle()) {
    mutable_sequence_handle()->::Kinova::Api::Base::SequenceHandle::MergeFrom(from.sequence_handle());
  }
  if (from.has_action()) {
    mutable_action()->::Kinova::Api::Base::Action::MergeFrom(from.action());
  }
}

void AppendActionInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.AppendActionInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendActionInformation::CopyFrom(const AppendActionInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.AppendActionInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendActionInformation::IsInitialized() const {
  return true;
}

void AppendActionInformation::Swap(AppendActionInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendActionInformation::InternalSwap(AppendActionInformation* other) {
  using std::swap;
  swap(sequence_handle_, other->sequence_handle_);
  swap(action_, other->action_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AppendActionInformation::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionHandle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionHandle::kIdentifierFieldNumber;
const int ActionHandle::kActionTypeFieldNumber;
const int ActionHandle::kPermissionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionHandle::ActionHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ActionHandle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ActionHandle)
}
ActionHandle::ActionHandle(const ActionHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&identifier_, &from.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ActionHandle)
}

void ActionHandle::SharedCtor() {
  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
}

ActionHandle::~ActionHandle() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ActionHandle)
  SharedDtor();
}

void ActionHandle::SharedDtor() {
}

void ActionHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionHandle::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionHandle& ActionHandle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ActionHandle.base);
  return *internal_default_instance();
}


void ActionHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ActionHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
  _internal_metadata_.Clear();
}

bool ActionHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ActionHandle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.ActionType action_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action_type(static_cast< ::Kinova::Api::Base::ActionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 permission = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ActionHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ActionHandle)
  return false;
#undef DO_
}

void ActionHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ActionHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->identifier(), output);
  }

  // .Kinova.Api.Base.ActionType action_type = 2;
  if (this->action_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action_type(), output);
  }

  // fixed32 permission = 3;
  if (this->permission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->permission(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ActionHandle)
}

::google::protobuf::uint8* ActionHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ActionHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->identifier(), target);
  }

  // .Kinova.Api.Base.ActionType action_type = 2;
  if (this->action_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action_type(), target);
  }

  // fixed32 permission = 3;
  if (this->permission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->permission(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ActionHandle)
  return target;
}

size_t ActionHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ActionHandle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->identifier());
  }

  // .Kinova.Api.Base.ActionType action_type = 2;
  if (this->action_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action_type());
  }

  // fixed32 permission = 3;
  if (this->permission() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ActionHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ActionHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ActionHandle)
    MergeFrom(*source);
  }
}

void ActionHandle::MergeFrom(const ActionHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ActionHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.identifier() != 0) {
    set_identifier(from.identifier());
  }
  if (from.action_type() != 0) {
    set_action_type(from.action_type());
  }
  if (from.permission() != 0) {
    set_permission(from.permission());
  }
}

void ActionHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ActionHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionHandle::CopyFrom(const ActionHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ActionHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionHandle::IsInitialized() const {
  return true;
}

void ActionHandle::Swap(ActionHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionHandle::InternalSwap(ActionHandle* other) {
  using std::swap;
  swap(identifier_, other->identifier_);
  swap(action_type_, other->action_type_);
  swap(permission_, other->permission_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionHandle::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestedActionType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestedActionType::kActionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestedActionType::RequestedActionType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_RequestedActionType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.RequestedActionType)
}
RequestedActionType::RequestedActionType(const RequestedActionType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_type_ = from.action_type_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.RequestedActionType)
}

void RequestedActionType::SharedCtor() {
  action_type_ = 0;
}

RequestedActionType::~RequestedActionType() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.RequestedActionType)
  SharedDtor();
}

void RequestedActionType::SharedDtor() {
}

void RequestedActionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestedActionType::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestedActionType& RequestedActionType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_RequestedActionType.base);
  return *internal_default_instance();
}


void RequestedActionType::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.RequestedActionType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_type_ = 0;
  _internal_metadata_.Clear();
}

bool RequestedActionType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.RequestedActionType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ActionType action_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action_type(static_cast< ::Kinova::Api::Base::ActionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.RequestedActionType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.RequestedActionType)
  return false;
#undef DO_
}

void RequestedActionType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.RequestedActionType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ActionType action_type = 1;
  if (this->action_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.RequestedActionType)
}

::google::protobuf::uint8* RequestedActionType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.RequestedActionType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ActionType action_type = 1;
  if (this->action_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.RequestedActionType)
  return target;
}

size_t RequestedActionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.RequestedActionType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.ActionType action_type = 1;
  if (this->action_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestedActionType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.RequestedActionType)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestedActionType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestedActionType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.RequestedActionType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.RequestedActionType)
    MergeFrom(*source);
  }
}

void RequestedActionType::MergeFrom(const RequestedActionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.RequestedActionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action_type() != 0) {
    set_action_type(from.action_type());
  }
}

void RequestedActionType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.RequestedActionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestedActionType::CopyFrom(const RequestedActionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.RequestedActionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestedActionType::IsInitialized() const {
  return true;
}

void RequestedActionType::Swap(RequestedActionType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestedActionType::InternalSwap(RequestedActionType* other) {
  using std::swap;
  swap(action_type_, other->action_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestedActionType::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Action::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_Action_default_instance_._instance.get_mutable()->handle_ = const_cast< ::Kinova::Api::Base::ActionHandle*>(
      ::Kinova::Api::Base::ActionHandle::internal_default_instance());
  ::Kinova::Api::Base::_Action_default_instance_.send_twist_command_ = const_cast< ::Kinova::Api::Base::TwistCommand*>(
      ::Kinova::Api::Base::TwistCommand::internal_default_instance());
  ::Kinova::Api::Base::_Action_default_instance_.send_wrench_command_ = const_cast< ::Kinova::Api::Base::WrenchCommand*>(
      ::Kinova::Api::Base::WrenchCommand::internal_default_instance());
  ::Kinova::Api::Base::_Action_default_instance_.send_joint_speeds_ = const_cast< ::Kinova::Api::Base::JointSpeeds*>(
      ::Kinova::Api::Base::JointSpeeds::internal_default_instance());
  ::Kinova::Api::Base::_Action_default_instance_.reach_pose_ = const_cast< ::Kinova::Api::Base::ConstrainedPose*>(
      ::Kinova::Api::Base::ConstrainedPose::internal_default_instance());
  ::Kinova::Api::Base::_Action_default_instance_.reach_joint_angles_ = const_cast< ::Kinova::Api::Base::ConstrainedJointAngles*>(
      ::Kinova::Api::Base::ConstrainedJointAngles::internal_default_instance());
  ::Kinova::Api::Base::_Action_default_instance_.toggle_admittance_mode_ = 0;
  ::Kinova::Api::Base::_Action_default_instance_.snapshot_ = const_cast< ::Kinova::Api::Base::Snapshot*>(
      ::Kinova::Api::Base::Snapshot::internal_default_instance());
  ::Kinova::Api::Base::_Action_default_instance_.switch_control_mapping_ = const_cast< ::Kinova::Api::Base::SwitchControlMapping*>(
      ::Kinova::Api::Base::SwitchControlMapping::internal_default_instance());
  ::Kinova::Api::Base::_Action_default_instance_.navigate_joints_ = 0;
  ::Kinova::Api::Base::_Action_default_instance_.navigate_mappings_ = 0;
  ::Kinova::Api::Base::_Action_default_instance_.change_twist_ = const_cast< ::Kinova::Api::Base::ChangeTwist*>(
      ::Kinova::Api::Base::ChangeTwist::internal_default_instance());
  ::Kinova::Api::Base::_Action_default_instance_.change_joint_speeds_ = const_cast< ::Kinova::Api::Base::ChangeJointSpeeds*>(
      ::Kinova::Api::Base::ChangeJointSpeeds::internal_default_instance());
  ::Kinova::Api::Base::_Action_default_instance_.change_wrench_ = const_cast< ::Kinova::Api::Base::ChangeWrench*>(
      ::Kinova::Api::Base::ChangeWrench::internal_default_instance());
  ::Kinova::Api::Base::_Action_default_instance_.apply_emergency_stop_ = const_cast< ::Kinova::Api::Base::EmergencyStop*>(
      ::Kinova::Api::Base::EmergencyStop::internal_default_instance());
  ::Kinova::Api::Base::_Action_default_instance_.clear_faults_ = const_cast< ::Kinova::Api::Base::Faults*>(
      ::Kinova::Api::Base::Faults::internal_default_instance());
  ::Kinova::Api::Base::_Action_default_instance_.delay_ = const_cast< ::Kinova::Api::Base::Delay*>(
      ::Kinova::Api::Base::Delay::internal_default_instance());
  ::Kinova::Api::Base::_Action_default_instance_.execute_action_ = const_cast< ::Kinova::Api::Base::ActionHandle*>(
      ::Kinova::Api::Base::ActionHandle::internal_default_instance());
  ::Kinova::Api::Base::_Action_default_instance_.send_gripper_command_ = const_cast< ::Kinova::Api::Base::GripperCommand*>(
      ::Kinova::Api::Base::GripperCommand::internal_default_instance());
  ::Kinova::Api::Base::_Action_default_instance_.send_gpio_command_ = const_cast< ::Kinova::Api::Base::GpioCommand*>(
      ::Kinova::Api::Base::GpioCommand::internal_default_instance());
  ::Kinova::Api::Base::_Action_default_instance_.stop_action_ = const_cast< ::Kinova::Api::Base::Stop*>(
      ::Kinova::Api::Base::Stop::internal_default_instance());
  ::Kinova::Api::Base::_Action_default_instance_.play_pre_computed_trajectory_ = const_cast< ::Kinova::Api::Base::PreComputedJointTrajectory*>(
      ::Kinova::Api::Base::PreComputedJointTrajectory::internal_default_instance());
  ::Kinova::Api::Base::_Action_default_instance_.execute_sequence_ = const_cast< ::Kinova::Api::Base::SequenceHandle*>(
      ::Kinova::Api::Base::SequenceHandle::internal_default_instance());
  ::Kinova::Api::Base::_Action_default_instance_.execute_waypoint_list_ = const_cast< ::Kinova::Api::Base::WaypointList*>(
      ::Kinova::Api::Base::WaypointList::internal_default_instance());
}
void Action::set_allocated_send_twist_command(::Kinova::Api::Base::TwistCommand* send_twist_command) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action_parameters();
  if (send_twist_command) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      send_twist_command = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, send_twist_command, submessage_arena);
    }
    set_has_send_twist_command();
    action_parameters_.send_twist_command_ = send_twist_command;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Action.send_twist_command)
}
void Action::set_allocated_send_wrench_command(::Kinova::Api::Base::WrenchCommand* send_wrench_command) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action_parameters();
  if (send_wrench_command) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      send_wrench_command = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, send_wrench_command, submessage_arena);
    }
    set_has_send_wrench_command();
    action_parameters_.send_wrench_command_ = send_wrench_command;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Action.send_wrench_command)
}
void Action::set_allocated_send_joint_speeds(::Kinova::Api::Base::JointSpeeds* send_joint_speeds) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action_parameters();
  if (send_joint_speeds) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      send_joint_speeds = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, send_joint_speeds, submessage_arena);
    }
    set_has_send_joint_speeds();
    action_parameters_.send_joint_speeds_ = send_joint_speeds;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Action.send_joint_speeds)
}
void Action::set_allocated_reach_pose(::Kinova::Api::Base::ConstrainedPose* reach_pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action_parameters();
  if (reach_pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reach_pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reach_pose, submessage_arena);
    }
    set_has_reach_pose();
    action_parameters_.reach_pose_ = reach_pose;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Action.reach_pose)
}
void Action::set_allocated_reach_joint_angles(::Kinova::Api::Base::ConstrainedJointAngles* reach_joint_angles) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action_parameters();
  if (reach_joint_angles) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reach_joint_angles = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reach_joint_angles, submessage_arena);
    }
    set_has_reach_joint_angles();
    action_parameters_.reach_joint_angles_ = reach_joint_angles;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Action.reach_joint_angles)
}
void Action::set_allocated_snapshot(::Kinova::Api::Base::Snapshot* snapshot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action_parameters();
  if (snapshot) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      snapshot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    set_has_snapshot();
    action_parameters_.snapshot_ = snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Action.snapshot)
}
void Action::set_allocated_switch_control_mapping(::Kinova::Api::Base::SwitchControlMapping* switch_control_mapping) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action_parameters();
  if (switch_control_mapping) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      switch_control_mapping = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, switch_control_mapping, submessage_arena);
    }
    set_has_switch_control_mapping();
    action_parameters_.switch_control_mapping_ = switch_control_mapping;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Action.switch_control_mapping)
}
void Action::set_allocated_change_twist(::Kinova::Api::Base::ChangeTwist* change_twist) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action_parameters();
  if (change_twist) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      change_twist = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, change_twist, submessage_arena);
    }
    set_has_change_twist();
    action_parameters_.change_twist_ = change_twist;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Action.change_twist)
}
void Action::set_allocated_change_joint_speeds(::Kinova::Api::Base::ChangeJointSpeeds* change_joint_speeds) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action_parameters();
  if (change_joint_speeds) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      change_joint_speeds = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, change_joint_speeds, submessage_arena);
    }
    set_has_change_joint_speeds();
    action_parameters_.change_joint_speeds_ = change_joint_speeds;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Action.change_joint_speeds)
}
void Action::set_allocated_change_wrench(::Kinova::Api::Base::ChangeWrench* change_wrench) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action_parameters();
  if (change_wrench) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      change_wrench = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, change_wrench, submessage_arena);
    }
    set_has_change_wrench();
    action_parameters_.change_wrench_ = change_wrench;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Action.change_wrench)
}
void Action::set_allocated_apply_emergency_stop(::Kinova::Api::Base::EmergencyStop* apply_emergency_stop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action_parameters();
  if (apply_emergency_stop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      apply_emergency_stop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, apply_emergency_stop, submessage_arena);
    }
    set_has_apply_emergency_stop();
    action_parameters_.apply_emergency_stop_ = apply_emergency_stop;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Action.apply_emergency_stop)
}
void Action::set_allocated_clear_faults(::Kinova::Api::Base::Faults* clear_faults) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action_parameters();
  if (clear_faults) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      clear_faults = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, clear_faults, submessage_arena);
    }
    set_has_clear_faults();
    action_parameters_.clear_faults_ = clear_faults;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Action.clear_faults)
}
void Action::set_allocated_delay(::Kinova::Api::Base::Delay* delay) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action_parameters();
  if (delay) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      delay = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, delay, submessage_arena);
    }
    set_has_delay();
    action_parameters_.delay_ = delay;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Action.delay)
}
void Action::set_allocated_execute_action(::Kinova::Api::Base::ActionHandle* execute_action) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action_parameters();
  if (execute_action) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      execute_action = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, execute_action, submessage_arena);
    }
    set_has_execute_action();
    action_parameters_.execute_action_ = execute_action;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Action.execute_action)
}
void Action::set_allocated_send_gripper_command(::Kinova::Api::Base::GripperCommand* send_gripper_command) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action_parameters();
  if (send_gripper_command) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      send_gripper_command = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, send_gripper_command, submessage_arena);
    }
    set_has_send_gripper_command();
    action_parameters_.send_gripper_command_ = send_gripper_command;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Action.send_gripper_command)
}
void Action::set_allocated_send_gpio_command(::Kinova::Api::Base::GpioCommand* send_gpio_command) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action_parameters();
  if (send_gpio_command) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      send_gpio_command = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, send_gpio_command, submessage_arena);
    }
    set_has_send_gpio_command();
    action_parameters_.send_gpio_command_ = send_gpio_command;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Action.send_gpio_command)
}
void Action::set_allocated_stop_action(::Kinova::Api::Base::Stop* stop_action) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action_parameters();
  if (stop_action) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stop_action = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stop_action, submessage_arena);
    }
    set_has_stop_action();
    action_parameters_.stop_action_ = stop_action;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Action.stop_action)
}
void Action::set_allocated_play_pre_computed_trajectory(::Kinova::Api::Base::PreComputedJointTrajectory* play_pre_computed_trajectory) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action_parameters();
  if (play_pre_computed_trajectory) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      play_pre_computed_trajectory = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, play_pre_computed_trajectory, submessage_arena);
    }
    set_has_play_pre_computed_trajectory();
    action_parameters_.play_pre_computed_trajectory_ = play_pre_computed_trajectory;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Action.play_pre_computed_trajectory)
}
void Action::set_allocated_execute_sequence(::Kinova::Api::Base::SequenceHandle* execute_sequence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action_parameters();
  if (execute_sequence) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      execute_sequence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, execute_sequence, submessage_arena);
    }
    set_has_execute_sequence();
    action_parameters_.execute_sequence_ = execute_sequence;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Action.execute_sequence)
}
void Action::set_allocated_execute_waypoint_list(::Kinova::Api::Base::WaypointList* execute_waypoint_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action_parameters();
  if (execute_waypoint_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      execute_waypoint_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, execute_waypoint_list, submessage_arena);
    }
    set_has_execute_waypoint_list();
    action_parameters_.execute_waypoint_list_ = execute_waypoint_list;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Action.execute_waypoint_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Action::kHandleFieldNumber;
const int Action::kNameFieldNumber;
const int Action::kApplicationDataFieldNumber;
const int Action::kSendTwistCommandFieldNumber;
const int Action::kSendWrenchCommandFieldNumber;
const int Action::kSendJointSpeedsFieldNumber;
const int Action::kReachPoseFieldNumber;
const int Action::kReachJointAnglesFieldNumber;
const int Action::kToggleAdmittanceModeFieldNumber;
const int Action::kSnapshotFieldNumber;
const int Action::kSwitchControlMappingFieldNumber;
const int Action::kNavigateJointsFieldNumber;
const int Action::kNavigateMappingsFieldNumber;
const int Action::kChangeTwistFieldNumber;
const int Action::kChangeJointSpeedsFieldNumber;
const int Action::kChangeWrenchFieldNumber;
const int Action::kApplyEmergencyStopFieldNumber;
const int Action::kClearFaultsFieldNumber;
const int Action::kDelayFieldNumber;
const int Action::kExecuteActionFieldNumber;
const int Action::kSendGripperCommandFieldNumber;
const int Action::kSendGpioCommandFieldNumber;
const int Action::kStopActionFieldNumber;
const int Action::kPlayPreComputedTrajectoryFieldNumber;
const int Action::kExecuteSequenceFieldNumber;
const int Action::kExecuteWaypointListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Action::Action()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Action.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Action)
}
Action::Action(const Action& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  application_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.application_data().size() > 0) {
    application_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_data_);
  }
  if (from.has_handle()) {
    handle_ = new ::Kinova::Api::Base::ActionHandle(*from.handle_);
  } else {
    handle_ = NULL;
  }
  clear_has_action_parameters();
  switch (from.action_parameters_case()) {
    case kSendTwistCommand: {
      mutable_send_twist_command()->::Kinova::Api::Base::TwistCommand::MergeFrom(from.send_twist_command());
      break;
    }
    case kSendWrenchCommand: {
      mutable_send_wrench_command()->::Kinova::Api::Base::WrenchCommand::MergeFrom(from.send_wrench_command());
      break;
    }
    case kSendJointSpeeds: {
      mutable_send_joint_speeds()->::Kinova::Api::Base::JointSpeeds::MergeFrom(from.send_joint_speeds());
      break;
    }
    case kReachPose: {
      mutable_reach_pose()->::Kinova::Api::Base::ConstrainedPose::MergeFrom(from.reach_pose());
      break;
    }
    case kReachJointAngles: {
      mutable_reach_joint_angles()->::Kinova::Api::Base::ConstrainedJointAngles::MergeFrom(from.reach_joint_angles());
      break;
    }
    case kToggleAdmittanceMode: {
      set_toggle_admittance_mode(from.toggle_admittance_mode());
      break;
    }
    case kSnapshot: {
      mutable_snapshot()->::Kinova::Api::Base::Snapshot::MergeFrom(from.snapshot());
      break;
    }
    case kSwitchControlMapping: {
      mutable_switch_control_mapping()->::Kinova::Api::Base::SwitchControlMapping::MergeFrom(from.switch_control_mapping());
      break;
    }
    case kNavigateJoints: {
      set_navigate_joints(from.navigate_joints());
      break;
    }
    case kNavigateMappings: {
      set_navigate_mappings(from.navigate_mappings());
      break;
    }
    case kChangeTwist: {
      mutable_change_twist()->::Kinova::Api::Base::ChangeTwist::MergeFrom(from.change_twist());
      break;
    }
    case kChangeJointSpeeds: {
      mutable_change_joint_speeds()->::Kinova::Api::Base::ChangeJointSpeeds::MergeFrom(from.change_joint_speeds());
      break;
    }
    case kChangeWrench: {
      mutable_change_wrench()->::Kinova::Api::Base::ChangeWrench::MergeFrom(from.change_wrench());
      break;
    }
    case kApplyEmergencyStop: {
      mutable_apply_emergency_stop()->::Kinova::Api::Base::EmergencyStop::MergeFrom(from.apply_emergency_stop());
      break;
    }
    case kClearFaults: {
      mutable_clear_faults()->::Kinova::Api::Base::Faults::MergeFrom(from.clear_faults());
      break;
    }
    case kDelay: {
      mutable_delay()->::Kinova::Api::Base::Delay::MergeFrom(from.delay());
      break;
    }
    case kExecuteAction: {
      mutable_execute_action()->::Kinova::Api::Base::ActionHandle::MergeFrom(from.execute_action());
      break;
    }
    case kSendGripperCommand: {
      mutable_send_gripper_command()->::Kinova::Api::Base::GripperCommand::MergeFrom(from.send_gripper_command());
      break;
    }
    case kSendGpioCommand: {
      mutable_send_gpio_command()->::Kinova::Api::Base::GpioCommand::MergeFrom(from.send_gpio_command());
      break;
    }
    case kStopAction: {
      mutable_stop_action()->::Kinova::Api::Base::Stop::MergeFrom(from.stop_action());
      break;
    }
    case kPlayPreComputedTrajectory: {
      mutable_play_pre_computed_trajectory()->::Kinova::Api::Base::PreComputedJointTrajectory::MergeFrom(from.play_pre_computed_trajectory());
      break;
    }
    case kExecuteSequence: {
      mutable_execute_sequence()->::Kinova::Api::Base::SequenceHandle::MergeFrom(from.execute_sequence());
      break;
    }
    case kExecuteWaypointList: {
      mutable_execute_waypoint_list()->::Kinova::Api::Base::WaypointList::MergeFrom(from.execute_waypoint_list());
      break;
    }
    case ACTION_PARAMETERS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Action)
}

void Action::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_ = NULL;
  clear_has_action_parameters();
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Action)
  SharedDtor();
}

void Action::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete handle_;
  if (has_action_parameters()) {
    clear_action_parameters();
  }
}

void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Action& Action::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Action.base);
  return *internal_default_instance();
}


void Action::clear_action_parameters() {
// @@protoc_insertion_point(one_of_clear_start:Kinova.Api.Base.Action)
  switch (action_parameters_case()) {
    case kSendTwistCommand: {
      delete action_parameters_.send_twist_command_;
      break;
    }
    case kSendWrenchCommand: {
      delete action_parameters_.send_wrench_command_;
      break;
    }
    case kSendJointSpeeds: {
      delete action_parameters_.send_joint_speeds_;
      break;
    }
    case kReachPose: {
      delete action_parameters_.reach_pose_;
      break;
    }
    case kReachJointAngles: {
      delete action_parameters_.reach_joint_angles_;
      break;
    }
    case kToggleAdmittanceMode: {
      // No need to clear
      break;
    }
    case kSnapshot: {
      delete action_parameters_.snapshot_;
      break;
    }
    case kSwitchControlMapping: {
      delete action_parameters_.switch_control_mapping_;
      break;
    }
    case kNavigateJoints: {
      // No need to clear
      break;
    }
    case kNavigateMappings: {
      // No need to clear
      break;
    }
    case kChangeTwist: {
      delete action_parameters_.change_twist_;
      break;
    }
    case kChangeJointSpeeds: {
      delete action_parameters_.change_joint_speeds_;
      break;
    }
    case kChangeWrench: {
      delete action_parameters_.change_wrench_;
      break;
    }
    case kApplyEmergencyStop: {
      delete action_parameters_.apply_emergency_stop_;
      break;
    }
    case kClearFaults: {
      delete action_parameters_.clear_faults_;
      break;
    }
    case kDelay: {
      delete action_parameters_.delay_;
      break;
    }
    case kExecuteAction: {
      delete action_parameters_.execute_action_;
      break;
    }
    case kSendGripperCommand: {
      delete action_parameters_.send_gripper_command_;
      break;
    }
    case kSendGpioCommand: {
      delete action_parameters_.send_gpio_command_;
      break;
    }
    case kStopAction: {
      delete action_parameters_.stop_action_;
      break;
    }
    case kPlayPreComputedTrajectory: {
      delete action_parameters_.play_pre_computed_trajectory_;
      break;
    }
    case kExecuteSequence: {
      delete action_parameters_.execute_sequence_;
      break;
    }
    case kExecuteWaypointList: {
      delete action_parameters_.execute_waypoint_list_;
      break;
    }
    case ACTION_PARAMETERS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_PARAMETERS_NOT_SET;
}


void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && handle_ != NULL) {
    delete handle_;
  }
  handle_ = NULL;
  clear_action_parameters();
  _internal_metadata_.Clear();
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Action)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ActionHandle handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.Action.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string application_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->application_data().data(), static_cast<int>(this->application_data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.Action.application_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.TwistCommand send_twist_command = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_send_twist_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.WrenchCommand send_wrench_command = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_send_wrench_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.JointSpeeds send_joint_speeds = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_send_joint_speeds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.ConstrainedPose reach_pose = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reach_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.ConstrainedJointAngles reach_joint_angles = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reach_joint_angles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.AdmittanceMode toggle_admittance_mode = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_toggle_admittance_mode(static_cast< ::Kinova::Api::Base::AdmittanceMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.Snapshot snapshot = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_snapshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.SwitchControlMapping switch_control_mapping = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_switch_control_mapping()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.JointNavigationDirection navigate_joints = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_navigate_joints(static_cast< ::Kinova::Api::Base::JointNavigationDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.NavigationDirection navigate_mappings = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_navigate_mappings(static_cast< ::Kinova::Api::Base::NavigationDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.ChangeTwist change_twist = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_change_twist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.ChangeJointSpeeds change_joint_speeds = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_change_joint_speeds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.ChangeWrench change_wrench = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_change_wrench()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.EmergencyStop apply_emergency_stop = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_apply_emergency_stop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.Faults clear_faults = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clear_faults()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.Delay delay = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.ActionHandle execute_action = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_execute_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.GripperCommand send_gripper_command = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_send_gripper_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.GpioCommand send_gpio_command = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_send_gpio_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.Stop stop_action = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.PreComputedJointTrajectory play_pre_computed_trajectory = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 314 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_play_pre_computed_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.SequenceHandle execute_sequence = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_execute_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.WaypointList execute_waypoint_list = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 330 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_execute_waypoint_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Action)
  return false;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ActionHandle handle = 1;
  if (this->has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_handle(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.Action.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string application_data = 3;
  if (this->application_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_data().data(), static_cast<int>(this->application_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.Action.application_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->application_data(), output);
  }

  // .Kinova.Api.Base.TwistCommand send_twist_command = 4;
  if (has_send_twist_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_send_twist_command(), output);
  }

  // .Kinova.Api.Base.WrenchCommand send_wrench_command = 5;
  if (has_send_wrench_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_send_wrench_command(), output);
  }

  // .Kinova.Api.Base.JointSpeeds send_joint_speeds = 7;
  if (has_send_joint_speeds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_send_joint_speeds(), output);
  }

  // .Kinova.Api.Base.ConstrainedPose reach_pose = 9;
  if (has_reach_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_reach_pose(), output);
  }

  // .Kinova.Api.Base.ConstrainedJointAngles reach_joint_angles = 10;
  if (has_reach_joint_angles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_reach_joint_angles(), output);
  }

  // .Kinova.Api.Base.AdmittanceMode toggle_admittance_mode = 16;
  if (has_toggle_admittance_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->toggle_admittance_mode(), output);
  }

  // .Kinova.Api.Base.Snapshot snapshot = 17;
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_snapshot(), output);
  }

  // .Kinova.Api.Base.SwitchControlMapping switch_control_mapping = 19;
  if (has_switch_control_mapping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_switch_control_mapping(), output);
  }

  // .Kinova.Api.Base.JointNavigationDirection navigate_joints = 20;
  if (has_navigate_joints()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->navigate_joints(), output);
  }

  // .Kinova.Api.Base.NavigationDirection navigate_mappings = 21;
  if (has_navigate_mappings()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->navigate_mappings(), output);
  }

  // .Kinova.Api.Base.ChangeTwist change_twist = 25;
  if (has_change_twist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->_internal_change_twist(), output);
  }

  // .Kinova.Api.Base.ChangeJointSpeeds change_joint_speeds = 26;
  if (has_change_joint_speeds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->_internal_change_joint_speeds(), output);
  }

  // .Kinova.Api.Base.ChangeWrench change_wrench = 28;
  if (has_change_wrench()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->_internal_change_wrench(), output);
  }

  // .Kinova.Api.Base.EmergencyStop apply_emergency_stop = 31;
  if (has_apply_emergency_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->_internal_apply_emergency_stop(), output);
  }

  // .Kinova.Api.Base.Faults clear_faults = 32;
  if (has_clear_faults()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->_internal_clear_faults(), output);
  }

  // .Kinova.Api.Base.Delay delay = 34;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->_internal_delay(), output);
  }

  // .Kinova.Api.Base.ActionHandle execute_action = 35;
  if (has_execute_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->_internal_execute_action(), output);
  }

  // .Kinova.Api.Base.GripperCommand send_gripper_command = 36;
  if (has_send_gripper_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->_internal_send_gripper_command(), output);
  }

  // .Kinova.Api.Base.GpioCommand send_gpio_command = 37;
  if (has_send_gpio_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->_internal_send_gpio_command(), output);
  }

  // .Kinova.Api.Base.Stop stop_action = 38;
  if (has_stop_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->_internal_stop_action(), output);
  }

  // .Kinova.Api.Base.PreComputedJointTrajectory play_pre_computed_trajectory = 39;
  if (has_play_pre_computed_trajectory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->_internal_play_pre_computed_trajectory(), output);
  }

  // .Kinova.Api.Base.SequenceHandle execute_sequence = 40;
  if (has_execute_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->_internal_execute_sequence(), output);
  }

  // .Kinova.Api.Base.WaypointList execute_waypoint_list = 41;
  if (has_execute_waypoint_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->_internal_execute_waypoint_list(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Action)
}

::google::protobuf::uint8* Action::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ActionHandle handle = 1;
  if (this->has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_handle(), deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.Action.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string application_data = 3;
  if (this->application_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_data().data(), static_cast<int>(this->application_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.Action.application_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->application_data(), target);
  }

  // .Kinova.Api.Base.TwistCommand send_twist_command = 4;
  if (has_send_twist_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_send_twist_command(), deterministic, target);
  }

  // .Kinova.Api.Base.WrenchCommand send_wrench_command = 5;
  if (has_send_wrench_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_send_wrench_command(), deterministic, target);
  }

  // .Kinova.Api.Base.JointSpeeds send_joint_speeds = 7;
  if (has_send_joint_speeds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_send_joint_speeds(), deterministic, target);
  }

  // .Kinova.Api.Base.ConstrainedPose reach_pose = 9;
  if (has_reach_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_reach_pose(), deterministic, target);
  }

  // .Kinova.Api.Base.ConstrainedJointAngles reach_joint_angles = 10;
  if (has_reach_joint_angles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_reach_joint_angles(), deterministic, target);
  }

  // .Kinova.Api.Base.AdmittanceMode toggle_admittance_mode = 16;
  if (has_toggle_admittance_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->toggle_admittance_mode(), target);
  }

  // .Kinova.Api.Base.Snapshot snapshot = 17;
  if (has_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_snapshot(), deterministic, target);
  }

  // .Kinova.Api.Base.SwitchControlMapping switch_control_mapping = 19;
  if (has_switch_control_mapping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_switch_control_mapping(), deterministic, target);
  }

  // .Kinova.Api.Base.JointNavigationDirection navigate_joints = 20;
  if (has_navigate_joints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->navigate_joints(), target);
  }

  // .Kinova.Api.Base.NavigationDirection navigate_mappings = 21;
  if (has_navigate_mappings()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->navigate_mappings(), target);
  }

  // .Kinova.Api.Base.ChangeTwist change_twist = 25;
  if (has_change_twist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->_internal_change_twist(), deterministic, target);
  }

  // .Kinova.Api.Base.ChangeJointSpeeds change_joint_speeds = 26;
  if (has_change_joint_speeds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, this->_internal_change_joint_speeds(), deterministic, target);
  }

  // .Kinova.Api.Base.ChangeWrench change_wrench = 28;
  if (has_change_wrench()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, this->_internal_change_wrench(), deterministic, target);
  }

  // .Kinova.Api.Base.EmergencyStop apply_emergency_stop = 31;
  if (has_apply_emergency_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, this->_internal_apply_emergency_stop(), deterministic, target);
  }

  // .Kinova.Api.Base.Faults clear_faults = 32;
  if (has_clear_faults()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, this->_internal_clear_faults(), deterministic, target);
  }

  // .Kinova.Api.Base.Delay delay = 34;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        34, this->_internal_delay(), deterministic, target);
  }

  // .Kinova.Api.Base.ActionHandle execute_action = 35;
  if (has_execute_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        35, this->_internal_execute_action(), deterministic, target);
  }

  // .Kinova.Api.Base.GripperCommand send_gripper_command = 36;
  if (has_send_gripper_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        36, this->_internal_send_gripper_command(), deterministic, target);
  }

  // .Kinova.Api.Base.GpioCommand send_gpio_command = 37;
  if (has_send_gpio_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        37, this->_internal_send_gpio_command(), deterministic, target);
  }

  // .Kinova.Api.Base.Stop stop_action = 38;
  if (has_stop_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        38, this->_internal_stop_action(), deterministic, target);
  }

  // .Kinova.Api.Base.PreComputedJointTrajectory play_pre_computed_trajectory = 39;
  if (has_play_pre_computed_trajectory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        39, this->_internal_play_pre_computed_trajectory(), deterministic, target);
  }

  // .Kinova.Api.Base.SequenceHandle execute_sequence = 40;
  if (has_execute_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        40, this->_internal_execute_sequence(), deterministic, target);
  }

  // .Kinova.Api.Base.WaypointList execute_waypoint_list = 41;
  if (has_execute_waypoint_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        41, this->_internal_execute_waypoint_list(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Action)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string application_data = 3;
  if (this->application_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->application_data());
  }

  // .Kinova.Api.Base.ActionHandle handle = 1;
  if (this->has_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  switch (action_parameters_case()) {
    // .Kinova.Api.Base.TwistCommand send_twist_command = 4;
    case kSendTwistCommand: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_parameters_.send_twist_command_);
      break;
    }
    // .Kinova.Api.Base.WrenchCommand send_wrench_command = 5;
    case kSendWrenchCommand: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_parameters_.send_wrench_command_);
      break;
    }
    // .Kinova.Api.Base.JointSpeeds send_joint_speeds = 7;
    case kSendJointSpeeds: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_parameters_.send_joint_speeds_);
      break;
    }
    // .Kinova.Api.Base.ConstrainedPose reach_pose = 9;
    case kReachPose: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_parameters_.reach_pose_);
      break;
    }
    // .Kinova.Api.Base.ConstrainedJointAngles reach_joint_angles = 10;
    case kReachJointAngles: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_parameters_.reach_joint_angles_);
      break;
    }
    // .Kinova.Api.Base.AdmittanceMode toggle_admittance_mode = 16;
    case kToggleAdmittanceMode: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->toggle_admittance_mode());
      break;
    }
    // .Kinova.Api.Base.Snapshot snapshot = 17;
    case kSnapshot: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_parameters_.snapshot_);
      break;
    }
    // .Kinova.Api.Base.SwitchControlMapping switch_control_mapping = 19;
    case kSwitchControlMapping: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_parameters_.switch_control_mapping_);
      break;
    }
    // .Kinova.Api.Base.JointNavigationDirection navigate_joints = 20;
    case kNavigateJoints: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->navigate_joints());
      break;
    }
    // .Kinova.Api.Base.NavigationDirection navigate_mappings = 21;
    case kNavigateMappings: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->navigate_mappings());
      break;
    }
    // .Kinova.Api.Base.ChangeTwist change_twist = 25;
    case kChangeTwist: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_parameters_.change_twist_);
      break;
    }
    // .Kinova.Api.Base.ChangeJointSpeeds change_joint_speeds = 26;
    case kChangeJointSpeeds: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_parameters_.change_joint_speeds_);
      break;
    }
    // .Kinova.Api.Base.ChangeWrench change_wrench = 28;
    case kChangeWrench: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_parameters_.change_wrench_);
      break;
    }
    // .Kinova.Api.Base.EmergencyStop apply_emergency_stop = 31;
    case kApplyEmergencyStop: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_parameters_.apply_emergency_stop_);
      break;
    }
    // .Kinova.Api.Base.Faults clear_faults = 32;
    case kClearFaults: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_parameters_.clear_faults_);
      break;
    }
    // .Kinova.Api.Base.Delay delay = 34;
    case kDelay: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_parameters_.delay_);
      break;
    }
    // .Kinova.Api.Base.ActionHandle execute_action = 35;
    case kExecuteAction: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_parameters_.execute_action_);
      break;
    }
    // .Kinova.Api.Base.GripperCommand send_gripper_command = 36;
    case kSendGripperCommand: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_parameters_.send_gripper_command_);
      break;
    }
    // .Kinova.Api.Base.GpioCommand send_gpio_command = 37;
    case kSendGpioCommand: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_parameters_.send_gpio_command_);
      break;
    }
    // .Kinova.Api.Base.Stop stop_action = 38;
    case kStopAction: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_parameters_.stop_action_);
      break;
    }
    // .Kinova.Api.Base.PreComputedJointTrajectory play_pre_computed_trajectory = 39;
    case kPlayPreComputedTrajectory: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_parameters_.play_pre_computed_trajectory_);
      break;
    }
    // .Kinova.Api.Base.SequenceHandle execute_sequence = 40;
    case kExecuteSequence: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_parameters_.execute_sequence_);
      break;
    }
    // .Kinova.Api.Base.WaypointList execute_waypoint_list = 41;
    case kExecuteWaypointList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_parameters_.execute_waypoint_list_);
      break;
    }
    case ACTION_PARAMETERS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const Action* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Action>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Action)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.application_data().size() > 0) {

    application_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_data_);
  }
  if (from.has_handle()) {
    mutable_handle()->::Kinova::Api::Base::ActionHandle::MergeFrom(from.handle());
  }
  switch (from.action_parameters_case()) {
    case kSendTwistCommand: {
      mutable_send_twist_command()->::Kinova::Api::Base::TwistCommand::MergeFrom(from.send_twist_command());
      break;
    }
    case kSendWrenchCommand: {
      mutable_send_wrench_command()->::Kinova::Api::Base::WrenchCommand::MergeFrom(from.send_wrench_command());
      break;
    }
    case kSendJointSpeeds: {
      mutable_send_joint_speeds()->::Kinova::Api::Base::JointSpeeds::MergeFrom(from.send_joint_speeds());
      break;
    }
    case kReachPose: {
      mutable_reach_pose()->::Kinova::Api::Base::ConstrainedPose::MergeFrom(from.reach_pose());
      break;
    }
    case kReachJointAngles: {
      mutable_reach_joint_angles()->::Kinova::Api::Base::ConstrainedJointAngles::MergeFrom(from.reach_joint_angles());
      break;
    }
    case kToggleAdmittanceMode: {
      set_toggle_admittance_mode(from.toggle_admittance_mode());
      break;
    }
    case kSnapshot: {
      mutable_snapshot()->::Kinova::Api::Base::Snapshot::MergeFrom(from.snapshot());
      break;
    }
    case kSwitchControlMapping: {
      mutable_switch_control_mapping()->::Kinova::Api::Base::SwitchControlMapping::MergeFrom(from.switch_control_mapping());
      break;
    }
    case kNavigateJoints: {
      set_navigate_joints(from.navigate_joints());
      break;
    }
    case kNavigateMappings: {
      set_navigate_mappings(from.navigate_mappings());
      break;
    }
    case kChangeTwist: {
      mutable_change_twist()->::Kinova::Api::Base::ChangeTwist::MergeFrom(from.change_twist());
      break;
    }
    case kChangeJointSpeeds: {
      mutable_change_joint_speeds()->::Kinova::Api::Base::ChangeJointSpeeds::MergeFrom(from.change_joint_speeds());
      break;
    }
    case kChangeWrench: {
      mutable_change_wrench()->::Kinova::Api::Base::ChangeWrench::MergeFrom(from.change_wrench());
      break;
    }
    case kApplyEmergencyStop: {
      mutable_apply_emergency_stop()->::Kinova::Api::Base::EmergencyStop::MergeFrom(from.apply_emergency_stop());
      break;
    }
    case kClearFaults: {
      mutable_clear_faults()->::Kinova::Api::Base::Faults::MergeFrom(from.clear_faults());
      break;
    }
    case kDelay: {
      mutable_delay()->::Kinova::Api::Base::Delay::MergeFrom(from.delay());
      break;
    }
    case kExecuteAction: {
      mutable_execute_action()->::Kinova::Api::Base::ActionHandle::MergeFrom(from.execute_action());
      break;
    }
    case kSendGripperCommand: {
      mutable_send_gripper_command()->::Kinova::Api::Base::GripperCommand::MergeFrom(from.send_gripper_command());
      break;
    }
    case kSendGpioCommand: {
      mutable_send_gpio_command()->::Kinova::Api::Base::GpioCommand::MergeFrom(from.send_gpio_command());
      break;
    }
    case kStopAction: {
      mutable_stop_action()->::Kinova::Api::Base::Stop::MergeFrom(from.stop_action());
      break;
    }
    case kPlayPreComputedTrajectory: {
      mutable_play_pre_computed_trajectory()->::Kinova::Api::Base::PreComputedJointTrajectory::MergeFrom(from.play_pre_computed_trajectory());
      break;
    }
    case kExecuteSequence: {
      mutable_execute_sequence()->::Kinova::Api::Base::SequenceHandle::MergeFrom(from.execute_sequence());
      break;
    }
    case kExecuteWaypointList: {
      mutable_execute_waypoint_list()->::Kinova::Api::Base::WaypointList::MergeFrom(from.execute_waypoint_list());
      break;
    }
    case ACTION_PARAMETERS_NOT_SET: {
      break;
    }
  }
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::Swap(Action* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action::InternalSwap(Action* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  application_data_.Swap(&other->application_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(handle_, other->handle_);
  swap(action_parameters_, other->action_parameters_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Snapshot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Snapshot::kSnapshotTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Snapshot::Snapshot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Snapshot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Snapshot)
}
Snapshot::Snapshot(const Snapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshot_type_ = from.snapshot_type_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Snapshot)
}

void Snapshot::SharedCtor() {
  snapshot_type_ = 0;
}

Snapshot::~Snapshot() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Snapshot)
  SharedDtor();
}

void Snapshot::SharedDtor() {
}

void Snapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Snapshot::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Snapshot& Snapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Snapshot.base);
  return *internal_default_instance();
}


void Snapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Snapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshot_type_ = 0;
  _internal_metadata_.Clear();
}

bool Snapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Snapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.SnapshotType snapshot_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_snapshot_type(static_cast< ::Kinova::Api::Base::SnapshotType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Snapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Snapshot)
  return false;
#undef DO_
}

void Snapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Snapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.SnapshotType snapshot_type = 1;
  if (this->snapshot_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->snapshot_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Snapshot)
}

::google::protobuf::uint8* Snapshot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Snapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.SnapshotType snapshot_type = 1;
  if (this->snapshot_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->snapshot_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Snapshot)
  return target;
}

size_t Snapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Snapshot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.SnapshotType snapshot_type = 1;
  if (this->snapshot_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->snapshot_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Snapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const Snapshot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Snapshot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Snapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Snapshot)
    MergeFrom(*source);
  }
}

void Snapshot::MergeFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.snapshot_type() != 0) {
    set_snapshot_type(from.snapshot_type());
  }
}

void Snapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snapshot::CopyFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snapshot::IsInitialized() const {
  return true;
}

void Snapshot::Swap(Snapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Snapshot::InternalSwap(Snapshot* other) {
  using std::swap;
  swap(snapshot_type_, other->snapshot_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Snapshot::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SwitchControlMapping::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_SwitchControlMapping_default_instance_._instance.get_mutable()->map_group_handle_ = const_cast< ::Kinova::Api::Base::MapGroupHandle*>(
      ::Kinova::Api::Base::MapGroupHandle::internal_default_instance());
  ::Kinova::Api::Base::_SwitchControlMapping_default_instance_._instance.get_mutable()->map_handle_ = const_cast< ::Kinova::Api::Base::MapHandle*>(
      ::Kinova::Api::Base::MapHandle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SwitchControlMapping::kControllerIdentifierFieldNumber;
const int SwitchControlMapping::kMapGroupHandleFieldNumber;
const int SwitchControlMapping::kMapHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SwitchControlMapping::SwitchControlMapping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_SwitchControlMapping.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.SwitchControlMapping)
}
SwitchControlMapping::SwitchControlMapping(const SwitchControlMapping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_map_group_handle()) {
    map_group_handle_ = new ::Kinova::Api::Base::MapGroupHandle(*from.map_group_handle_);
  } else {
    map_group_handle_ = NULL;
  }
  if (from.has_map_handle()) {
    map_handle_ = new ::Kinova::Api::Base::MapHandle(*from.map_handle_);
  } else {
    map_handle_ = NULL;
  }
  controller_identifier_ = from.controller_identifier_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.SwitchControlMapping)
}

void SwitchControlMapping::SharedCtor() {
  ::memset(&map_group_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_identifier_) -
      reinterpret_cast<char*>(&map_group_handle_)) + sizeof(controller_identifier_));
}

SwitchControlMapping::~SwitchControlMapping() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.SwitchControlMapping)
  SharedDtor();
}

void SwitchControlMapping::SharedDtor() {
  if (this != internal_default_instance()) delete map_group_handle_;
  if (this != internal_default_instance()) delete map_handle_;
}

void SwitchControlMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SwitchControlMapping::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SwitchControlMapping& SwitchControlMapping::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_SwitchControlMapping.base);
  return *internal_default_instance();
}


void SwitchControlMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.SwitchControlMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && map_group_handle_ != NULL) {
    delete map_group_handle_;
  }
  map_group_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && map_handle_ != NULL) {
    delete map_handle_;
  }
  map_handle_ = NULL;
  controller_identifier_ = 0u;
  _internal_metadata_.Clear();
}

bool SwitchControlMapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.SwitchControlMapping)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 controller_identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.MapGroupHandle map_group_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_group_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.MapHandle map_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.SwitchControlMapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.SwitchControlMapping)
  return false;
#undef DO_
}

void SwitchControlMapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.SwitchControlMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controller_identifier = 1;
  if (this->controller_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->controller_identifier(), output);
  }

  // .Kinova.Api.Base.MapGroupHandle map_group_handle = 2;
  if (this->has_map_group_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_map_group_handle(), output);
  }

  // .Kinova.Api.Base.MapHandle map_handle = 3;
  if (this->has_map_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_map_handle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.SwitchControlMapping)
}

::google::protobuf::uint8* SwitchControlMapping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.SwitchControlMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controller_identifier = 1;
  if (this->controller_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->controller_identifier(), target);
  }

  // .Kinova.Api.Base.MapGroupHandle map_group_handle = 2;
  if (this->has_map_group_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_map_group_handle(), deterministic, target);
  }

  // .Kinova.Api.Base.MapHandle map_handle = 3;
  if (this->has_map_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_map_handle(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.SwitchControlMapping)
  return target;
}

size_t SwitchControlMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.SwitchControlMapping)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.MapGroupHandle map_group_handle = 2;
  if (this->has_map_group_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *map_group_handle_);
  }

  // .Kinova.Api.Base.MapHandle map_handle = 3;
  if (this->has_map_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *map_handle_);
  }

  // uint32 controller_identifier = 1;
  if (this->controller_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_identifier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwitchControlMapping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.SwitchControlMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const SwitchControlMapping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SwitchControlMapping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.SwitchControlMapping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.SwitchControlMapping)
    MergeFrom(*source);
  }
}

void SwitchControlMapping::MergeFrom(const SwitchControlMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.SwitchControlMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_map_group_handle()) {
    mutable_map_group_handle()->::Kinova::Api::Base::MapGroupHandle::MergeFrom(from.map_group_handle());
  }
  if (from.has_map_handle()) {
    mutable_map_handle()->::Kinova::Api::Base::MapHandle::MergeFrom(from.map_handle());
  }
  if (from.controller_identifier() != 0) {
    set_controller_identifier(from.controller_identifier());
  }
}

void SwitchControlMapping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.SwitchControlMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchControlMapping::CopyFrom(const SwitchControlMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.SwitchControlMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchControlMapping::IsInitialized() const {
  return true;
}

void SwitchControlMapping::Swap(SwitchControlMapping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SwitchControlMapping::InternalSwap(SwitchControlMapping* other) {
  using std::swap;
  swap(map_group_handle_, other->map_group_handle_);
  swap(map_handle_, other->map_handle_);
  swap(controller_identifier_, other->controller_identifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SwitchControlMapping::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChangeTwist::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeTwist::kLinearFieldNumber;
const int ChangeTwist::kAngularFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeTwist::ChangeTwist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ChangeTwist.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ChangeTwist)
}
ChangeTwist::ChangeTwist(const ChangeTwist& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&linear_, &from.linear_,
    static_cast<size_t>(reinterpret_cast<char*>(&angular_) -
    reinterpret_cast<char*>(&linear_)) + sizeof(angular_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ChangeTwist)
}

void ChangeTwist::SharedCtor() {
  ::memset(&linear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_) -
      reinterpret_cast<char*>(&linear_)) + sizeof(angular_));
}

ChangeTwist::~ChangeTwist() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ChangeTwist)
  SharedDtor();
}

void ChangeTwist::SharedDtor() {
}

void ChangeTwist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChangeTwist::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeTwist& ChangeTwist::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ChangeTwist.base);
  return *internal_default_instance();
}


void ChangeTwist::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ChangeTwist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&linear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_) -
      reinterpret_cast<char*>(&linear_)) + sizeof(angular_));
  _internal_metadata_.Clear();
}

bool ChangeTwist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ChangeTwist)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float linear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angular = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ChangeTwist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ChangeTwist)
  return false;
#undef DO_
}

void ChangeTwist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ChangeTwist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float linear = 1;
  if (this->linear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->linear(), output);
  }

  // float angular = 2;
  if (this->angular() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angular(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ChangeTwist)
}

::google::protobuf::uint8* ChangeTwist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ChangeTwist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float linear = 1;
  if (this->linear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->linear(), target);
  }

  // float angular = 2;
  if (this->angular() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angular(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ChangeTwist)
  return target;
}

size_t ChangeTwist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ChangeTwist)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float linear = 1;
  if (this->linear() != 0) {
    total_size += 1 + 4;
  }

  // float angular = 2;
  if (this->angular() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeTwist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ChangeTwist)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeTwist* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeTwist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ChangeTwist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ChangeTwist)
    MergeFrom(*source);
  }
}

void ChangeTwist::MergeFrom(const ChangeTwist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ChangeTwist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.linear() != 0) {
    set_linear(from.linear());
  }
  if (from.angular() != 0) {
    set_angular(from.angular());
  }
}

void ChangeTwist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ChangeTwist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeTwist::CopyFrom(const ChangeTwist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ChangeTwist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeTwist::IsInitialized() const {
  return true;
}

void ChangeTwist::Swap(ChangeTwist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeTwist::InternalSwap(ChangeTwist* other) {
  using std::swap;
  swap(linear_, other->linear_);
  swap(angular_, other->angular_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChangeTwist::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChangeJointSpeeds::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ChangeJointSpeeds_default_instance_._instance.get_mutable()->joint_speeds_ = const_cast< ::Kinova::Api::Base::JointSpeeds*>(
      ::Kinova::Api::Base::JointSpeeds::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeJointSpeeds::kJointSpeedsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeJointSpeeds::ChangeJointSpeeds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ChangeJointSpeeds.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ChangeJointSpeeds)
}
ChangeJointSpeeds::ChangeJointSpeeds(const ChangeJointSpeeds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_joint_speeds()) {
    joint_speeds_ = new ::Kinova::Api::Base::JointSpeeds(*from.joint_speeds_);
  } else {
    joint_speeds_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ChangeJointSpeeds)
}

void ChangeJointSpeeds::SharedCtor() {
  joint_speeds_ = NULL;
}

ChangeJointSpeeds::~ChangeJointSpeeds() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ChangeJointSpeeds)
  SharedDtor();
}

void ChangeJointSpeeds::SharedDtor() {
  if (this != internal_default_instance()) delete joint_speeds_;
}

void ChangeJointSpeeds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChangeJointSpeeds::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeJointSpeeds& ChangeJointSpeeds::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ChangeJointSpeeds.base);
  return *internal_default_instance();
}


void ChangeJointSpeeds::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ChangeJointSpeeds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && joint_speeds_ != NULL) {
    delete joint_speeds_;
  }
  joint_speeds_ = NULL;
  _internal_metadata_.Clear();
}

bool ChangeJointSpeeds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ChangeJointSpeeds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.JointSpeeds joint_speeds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_joint_speeds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ChangeJointSpeeds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ChangeJointSpeeds)
  return false;
#undef DO_
}

void ChangeJointSpeeds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ChangeJointSpeeds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.JointSpeeds joint_speeds = 1;
  if (this->has_joint_speeds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_joint_speeds(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ChangeJointSpeeds)
}

::google::protobuf::uint8* ChangeJointSpeeds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ChangeJointSpeeds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.JointSpeeds joint_speeds = 1;
  if (this->has_joint_speeds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_joint_speeds(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ChangeJointSpeeds)
  return target;
}

size_t ChangeJointSpeeds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ChangeJointSpeeds)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.JointSpeeds joint_speeds = 1;
  if (this->has_joint_speeds()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *joint_speeds_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeJointSpeeds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ChangeJointSpeeds)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeJointSpeeds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeJointSpeeds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ChangeJointSpeeds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ChangeJointSpeeds)
    MergeFrom(*source);
  }
}

void ChangeJointSpeeds::MergeFrom(const ChangeJointSpeeds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ChangeJointSpeeds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_joint_speeds()) {
    mutable_joint_speeds()->::Kinova::Api::Base::JointSpeeds::MergeFrom(from.joint_speeds());
  }
}

void ChangeJointSpeeds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ChangeJointSpeeds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeJointSpeeds::CopyFrom(const ChangeJointSpeeds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ChangeJointSpeeds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeJointSpeeds::IsInitialized() const {
  return true;
}

void ChangeJointSpeeds::Swap(ChangeJointSpeeds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeJointSpeeds::InternalSwap(ChangeJointSpeeds* other) {
  using std::swap;
  swap(joint_speeds_, other->joint_speeds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChangeJointSpeeds::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChangeWrench::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeWrench::kForceFieldNumber;
const int ChangeWrench::kTorqueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeWrench::ChangeWrench()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ChangeWrench.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ChangeWrench)
}
ChangeWrench::ChangeWrench(const ChangeWrench& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&force_, &from.force_,
    static_cast<size_t>(reinterpret_cast<char*>(&torque_) -
    reinterpret_cast<char*>(&force_)) + sizeof(torque_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ChangeWrench)
}

void ChangeWrench::SharedCtor() {
  ::memset(&force_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&torque_) -
      reinterpret_cast<char*>(&force_)) + sizeof(torque_));
}

ChangeWrench::~ChangeWrench() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ChangeWrench)
  SharedDtor();
}

void ChangeWrench::SharedDtor() {
}

void ChangeWrench::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChangeWrench::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeWrench& ChangeWrench::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ChangeWrench.base);
  return *internal_default_instance();
}


void ChangeWrench::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ChangeWrench)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&force_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&torque_) -
      reinterpret_cast<char*>(&force_)) + sizeof(torque_));
  _internal_metadata_.Clear();
}

bool ChangeWrench::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ChangeWrench)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float force = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float torque = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ChangeWrench)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ChangeWrench)
  return false;
#undef DO_
}

void ChangeWrench::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ChangeWrench)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float force = 1;
  if (this->force() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->force(), output);
  }

  // float torque = 2;
  if (this->torque() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->torque(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ChangeWrench)
}

::google::protobuf::uint8* ChangeWrench::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ChangeWrench)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float force = 1;
  if (this->force() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->force(), target);
  }

  // float torque = 2;
  if (this->torque() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->torque(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ChangeWrench)
  return target;
}

size_t ChangeWrench::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ChangeWrench)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float force = 1;
  if (this->force() != 0) {
    total_size += 1 + 4;
  }

  // float torque = 2;
  if (this->torque() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeWrench::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ChangeWrench)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeWrench* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeWrench>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ChangeWrench)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ChangeWrench)
    MergeFrom(*source);
  }
}

void ChangeWrench::MergeFrom(const ChangeWrench& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ChangeWrench)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.force() != 0) {
    set_force(from.force());
  }
  if (from.torque() != 0) {
    set_torque(from.torque());
  }
}

void ChangeWrench::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ChangeWrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeWrench::CopyFrom(const ChangeWrench& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ChangeWrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeWrench::IsInitialized() const {
  return true;
}

void ChangeWrench::Swap(ChangeWrench* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeWrench::InternalSwap(ChangeWrench* other) {
  using std::swap;
  swap(force_, other->force_);
  swap(torque_, other->torque_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChangeWrench::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EmergencyStop::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmergencyStop::EmergencyStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_EmergencyStop.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.EmergencyStop)
}
EmergencyStop::EmergencyStop(const EmergencyStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.EmergencyStop)
}

void EmergencyStop::SharedCtor() {
}

EmergencyStop::~EmergencyStop() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.EmergencyStop)
  SharedDtor();
}

void EmergencyStop::SharedDtor() {
}

void EmergencyStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EmergencyStop::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmergencyStop& EmergencyStop::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_EmergencyStop.base);
  return *internal_default_instance();
}


void EmergencyStop::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.EmergencyStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool EmergencyStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.EmergencyStop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.EmergencyStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.EmergencyStop)
  return false;
#undef DO_
}

void EmergencyStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.EmergencyStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.EmergencyStop)
}

::google::protobuf::uint8* EmergencyStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.EmergencyStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.EmergencyStop)
  return target;
}

size_t EmergencyStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.EmergencyStop)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmergencyStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.EmergencyStop)
  GOOGLE_DCHECK_NE(&from, this);
  const EmergencyStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmergencyStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.EmergencyStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.EmergencyStop)
    MergeFrom(*source);
  }
}

void EmergencyStop::MergeFrom(const EmergencyStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.EmergencyStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EmergencyStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.EmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmergencyStop::CopyFrom(const EmergencyStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.EmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmergencyStop::IsInitialized() const {
  return true;
}

void EmergencyStop::Swap(EmergencyStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmergencyStop::InternalSwap(EmergencyStop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EmergencyStop::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Faults::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Faults::Faults()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Faults.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Faults)
}
Faults::Faults(const Faults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Faults)
}

void Faults::SharedCtor() {
}

Faults::~Faults() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Faults)
  SharedDtor();
}

void Faults::SharedDtor() {
}

void Faults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Faults::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Faults& Faults::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Faults.base);
  return *internal_default_instance();
}


void Faults::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Faults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Faults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Faults)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Faults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Faults)
  return false;
#undef DO_
}

void Faults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Faults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Faults)
}

::google::protobuf::uint8* Faults::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Faults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Faults)
  return target;
}

size_t Faults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Faults)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Faults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Faults)
  GOOGLE_DCHECK_NE(&from, this);
  const Faults* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Faults>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Faults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Faults)
    MergeFrom(*source);
  }
}

void Faults::MergeFrom(const Faults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Faults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Faults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Faults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faults::CopyFrom(const Faults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Faults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faults::IsInitialized() const {
  return true;
}

void Faults::Swap(Faults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Faults::InternalSwap(Faults* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Faults::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Delay::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Delay::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Delay::Delay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Delay.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Delay)
}
Delay::Delay(const Delay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Delay)
}

void Delay::SharedCtor() {
  duration_ = 0u;
}

Delay::~Delay() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Delay)
  SharedDtor();
}

void Delay::SharedDtor() {
}

void Delay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Delay::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Delay& Delay::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Delay.base);
  return *internal_default_instance();
}


void Delay::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Delay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  duration_ = 0u;
  _internal_metadata_.Clear();
}

bool Delay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Delay)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 duration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Delay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Delay)
  return false;
#undef DO_
}

void Delay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Delay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 duration = 1;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Delay)
}

::google::protobuf::uint8* Delay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Delay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 duration = 1;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->duration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Delay)
  return target;
}

size_t Delay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Delay)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 duration = 1;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Delay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Delay)
  GOOGLE_DCHECK_NE(&from, this);
  const Delay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Delay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Delay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Delay)
    MergeFrom(*source);
  }
}

void Delay::MergeFrom(const Delay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Delay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void Delay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Delay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Delay::CopyFrom(const Delay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Delay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delay::IsInitialized() const {
  return true;
}

void Delay::Swap(Delay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Delay::InternalSwap(Delay* other) {
  using std::swap;
  swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Delay::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Stop::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stop::Stop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Stop.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Stop)
}
Stop::Stop(const Stop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Stop)
}

void Stop::SharedCtor() {
}

Stop::~Stop() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Stop)
  SharedDtor();
}

void Stop::SharedDtor() {
}

void Stop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Stop::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stop& Stop::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Stop.base);
  return *internal_default_instance();
}


void Stop::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Stop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Stop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Stop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Stop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Stop)
  return false;
#undef DO_
}

void Stop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Stop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Stop)
}

::google::protobuf::uint8* Stop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Stop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Stop)
  return target;
}

size_t Stop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Stop)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Stop)
  GOOGLE_DCHECK_NE(&from, this);
  const Stop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Stop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Stop)
    MergeFrom(*source);
  }
}

void Stop::MergeFrom(const Stop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Stop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Stop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stop::CopyFrom(const Stop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stop::IsInitialized() const {
  return true;
}

void Stop::Swap(Stop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stop::InternalSwap(Stop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Stop::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionList::kActionListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionList::ActionList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ActionList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ActionList)
}
ActionList::ActionList(const ActionList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      action_list_(from.action_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ActionList)
}

void ActionList::SharedCtor() {
}

ActionList::~ActionList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ActionList)
  SharedDtor();
}

void ActionList::SharedDtor() {
}

void ActionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionList& ActionList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ActionList.base);
  return *internal_default_instance();
}


void ActionList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ActionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_list_.Clear();
  _internal_metadata_.Clear();
}

bool ActionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ActionList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.Action action_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_action_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ActionList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ActionList)
  return false;
#undef DO_
}

void ActionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ActionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.Action action_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->action_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->action_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ActionList)
}

::google::protobuf::uint8* ActionList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ActionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.Action action_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->action_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->action_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ActionList)
  return target;
}

size_t ActionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ActionList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.Action action_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->action_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->action_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ActionList)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ActionList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ActionList)
    MergeFrom(*source);
  }
}

void ActionList::MergeFrom(const ActionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ActionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  action_list_.MergeFrom(from.action_list_);
}

void ActionList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ActionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionList::CopyFrom(const ActionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ActionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionList::IsInitialized() const {
  return true;
}

void ActionList::Swap(ActionList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionList::InternalSwap(ActionList* other) {
  using std::swap;
  CastToBase(&action_list_)->InternalSwap(CastToBase(&other->action_list_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Timeout::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Timeout::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Timeout::Timeout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Timeout.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Timeout)
}
Timeout::Timeout(const Timeout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Timeout)
}

void Timeout::SharedCtor() {
  value_ = 0u;
}

Timeout::~Timeout() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Timeout)
  SharedDtor();
}

void Timeout::SharedDtor() {
}

void Timeout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Timeout::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Timeout& Timeout::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Timeout.base);
  return *internal_default_instance();
}


void Timeout::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Timeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear();
}

bool Timeout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Timeout)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Timeout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Timeout)
  return false;
#undef DO_
}

void Timeout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Timeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Timeout)
}

::google::protobuf::uint8* Timeout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Timeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Timeout)
  return target;
}

size_t Timeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Timeout)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timeout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Timeout)
  GOOGLE_DCHECK_NE(&from, this);
  const Timeout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Timeout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Timeout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Timeout)
    MergeFrom(*source);
  }
}

void Timeout::MergeFrom(const Timeout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Timeout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Timeout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Timeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timeout::CopyFrom(const Timeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Timeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timeout::IsInitialized() const {
  return true;
}

void Timeout::Swap(Timeout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Timeout::InternalSwap(Timeout* other) {
  using std::swap;
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Timeout::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssid::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssid::kIdentifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssid::Ssid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Ssid.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Ssid)
}
Ssid::Ssid(const Ssid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.identifier().size() > 0) {
    identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifier_);
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Ssid)
}

void Ssid::SharedCtor() {
  identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Ssid::~Ssid() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Ssid)
  SharedDtor();
}

void Ssid::SharedDtor() {
  identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Ssid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ssid::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssid& Ssid::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Ssid.base);
  return *internal_default_instance();
}


void Ssid::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Ssid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Ssid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Ssid)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->identifier().data(), static_cast<int>(this->identifier().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.Ssid.identifier"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Ssid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Ssid)
  return false;
#undef DO_
}

void Ssid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Ssid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string identifier = 1;
  if (this->identifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identifier().data(), static_cast<int>(this->identifier().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.Ssid.identifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->identifier(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Ssid)
}

::google::protobuf::uint8* Ssid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Ssid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string identifier = 1;
  if (this->identifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identifier().data(), static_cast<int>(this->identifier().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.Ssid.identifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->identifier(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Ssid)
  return target;
}

size_t Ssid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Ssid)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string identifier = 1;
  if (this->identifier().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identifier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ssid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Ssid)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssid* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Ssid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Ssid)
    MergeFrom(*source);
  }
}

void Ssid::MergeFrom(const Ssid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Ssid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.identifier().size() > 0) {

    identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifier_);
  }
}

void Ssid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Ssid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssid::CopyFrom(const Ssid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Ssid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssid::IsInitialized() const {
  return true;
}

void Ssid::Swap(Ssid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssid::InternalSwap(Ssid* other) {
  using std::swap;
  identifier_.Swap(&other->identifier_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ssid::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommunicationInterfaceConfiguration::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommunicationInterfaceConfiguration::kTypeFieldNumber;
const int CommunicationInterfaceConfiguration::kEnableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommunicationInterfaceConfiguration::CommunicationInterfaceConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_CommunicationInterfaceConfiguration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.CommunicationInterfaceConfiguration)
}
CommunicationInterfaceConfiguration::CommunicationInterfaceConfiguration(const CommunicationInterfaceConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&type_)) + sizeof(enable_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.CommunicationInterfaceConfiguration)
}

void CommunicationInterfaceConfiguration::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&type_)) + sizeof(enable_));
}

CommunicationInterfaceConfiguration::~CommunicationInterfaceConfiguration() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.CommunicationInterfaceConfiguration)
  SharedDtor();
}

void CommunicationInterfaceConfiguration::SharedDtor() {
}

void CommunicationInterfaceConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommunicationInterfaceConfiguration::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommunicationInterfaceConfiguration& CommunicationInterfaceConfiguration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_CommunicationInterfaceConfiguration.base);
  return *internal_default_instance();
}


void CommunicationInterfaceConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.CommunicationInterfaceConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&type_)) + sizeof(enable_));
  _internal_metadata_.Clear();
}

bool CommunicationInterfaceConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.CommunicationInterfaceConfiguration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.NetworkType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Kinova::Api::Base::NetworkType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.CommunicationInterfaceConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.CommunicationInterfaceConfiguration)
  return false;
#undef DO_
}

void CommunicationInterfaceConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.CommunicationInterfaceConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.NetworkType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.CommunicationInterfaceConfiguration)
}

::google::protobuf::uint8* CommunicationInterfaceConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.CommunicationInterfaceConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.NetworkType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.CommunicationInterfaceConfiguration)
  return target;
}

size_t CommunicationInterfaceConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.CommunicationInterfaceConfiguration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.NetworkType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommunicationInterfaceConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.CommunicationInterfaceConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const CommunicationInterfaceConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommunicationInterfaceConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.CommunicationInterfaceConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.CommunicationInterfaceConfiguration)
    MergeFrom(*source);
  }
}

void CommunicationInterfaceConfiguration::MergeFrom(const CommunicationInterfaceConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.CommunicationInterfaceConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
}

void CommunicationInterfaceConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.CommunicationInterfaceConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommunicationInterfaceConfiguration::CopyFrom(const CommunicationInterfaceConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.CommunicationInterfaceConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunicationInterfaceConfiguration::IsInitialized() const {
  return true;
}

void CommunicationInterfaceConfiguration::Swap(CommunicationInterfaceConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommunicationInterfaceConfiguration::InternalSwap(CommunicationInterfaceConfiguration* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(enable_, other->enable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommunicationInterfaceConfiguration::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NetworkHandle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkHandle::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkHandle::NetworkHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_NetworkHandle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.NetworkHandle)
}
NetworkHandle::NetworkHandle(const NetworkHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.NetworkHandle)
}

void NetworkHandle::SharedCtor() {
  type_ = 0;
}

NetworkHandle::~NetworkHandle() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.NetworkHandle)
  SharedDtor();
}

void NetworkHandle::SharedDtor() {
}

void NetworkHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NetworkHandle::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetworkHandle& NetworkHandle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_NetworkHandle.base);
  return *internal_default_instance();
}


void NetworkHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.NetworkHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear();
}

bool NetworkHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.NetworkHandle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.NetworkType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Kinova::Api::Base::NetworkType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.NetworkHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.NetworkHandle)
  return false;
#undef DO_
}

void NetworkHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.NetworkHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.NetworkType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.NetworkHandle)
}

::google::protobuf::uint8* NetworkHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.NetworkHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.NetworkType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.NetworkHandle)
  return target;
}

size_t NetworkHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.NetworkHandle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.NetworkType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.NetworkHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.NetworkHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.NetworkHandle)
    MergeFrom(*source);
  }
}

void NetworkHandle::MergeFrom(const NetworkHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.NetworkHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
}

void NetworkHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.NetworkHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkHandle::CopyFrom(const NetworkHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.NetworkHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkHandle::IsInitialized() const {
  return true;
}

void NetworkHandle::Swap(NetworkHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkHandle::InternalSwap(NetworkHandle* other) {
  using std::swap;
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NetworkHandle::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IPv4Configuration::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IPv4Configuration::kIpAddressFieldNumber;
const int IPv4Configuration::kSubnetMaskFieldNumber;
const int IPv4Configuration::kDefaultGatewayFieldNumber;
const int IPv4Configuration::kDhcpEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IPv4Configuration::IPv4Configuration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_IPv4Configuration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.IPv4Configuration)
}
IPv4Configuration::IPv4Configuration(const IPv4Configuration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ip_address_, &from.ip_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&dhcp_enabled_) -
    reinterpret_cast<char*>(&ip_address_)) + sizeof(dhcp_enabled_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.IPv4Configuration)
}

void IPv4Configuration::SharedCtor() {
  ::memset(&ip_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dhcp_enabled_) -
      reinterpret_cast<char*>(&ip_address_)) + sizeof(dhcp_enabled_));
}

IPv4Configuration::~IPv4Configuration() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.IPv4Configuration)
  SharedDtor();
}

void IPv4Configuration::SharedDtor() {
}

void IPv4Configuration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IPv4Configuration::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IPv4Configuration& IPv4Configuration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_IPv4Configuration.base);
  return *internal_default_instance();
}


void IPv4Configuration::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.IPv4Configuration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ip_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dhcp_enabled_) -
      reinterpret_cast<char*>(&ip_address_)) + sizeof(dhcp_enabled_));
  _internal_metadata_.Clear();
}

bool IPv4Configuration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.IPv4Configuration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ip_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 subnet_mask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subnet_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 default_gateway = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_gateway_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dhcp_enabled = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dhcp_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.IPv4Configuration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.IPv4Configuration)
  return false;
#undef DO_
}

void IPv4Configuration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.IPv4Configuration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ip_address = 1;
  if (this->ip_address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip_address(), output);
  }

  // uint32 subnet_mask = 2;
  if (this->subnet_mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->subnet_mask(), output);
  }

  // uint32 default_gateway = 3;
  if (this->default_gateway() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->default_gateway(), output);
  }

  // bool dhcp_enabled = 4;
  if (this->dhcp_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->dhcp_enabled(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.IPv4Configuration)
}

::google::protobuf::uint8* IPv4Configuration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.IPv4Configuration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ip_address = 1;
  if (this->ip_address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip_address(), target);
  }

  // uint32 subnet_mask = 2;
  if (this->subnet_mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->subnet_mask(), target);
  }

  // uint32 default_gateway = 3;
  if (this->default_gateway() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->default_gateway(), target);
  }

  // bool dhcp_enabled = 4;
  if (this->dhcp_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->dhcp_enabled(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.IPv4Configuration)
  return target;
}

size_t IPv4Configuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.IPv4Configuration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 ip_address = 1;
  if (this->ip_address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ip_address());
  }

  // uint32 subnet_mask = 2;
  if (this->subnet_mask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->subnet_mask());
  }

  // uint32 default_gateway = 3;
  if (this->default_gateway() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->default_gateway());
  }

  // bool dhcp_enabled = 4;
  if (this->dhcp_enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPv4Configuration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.IPv4Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  const IPv4Configuration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IPv4Configuration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.IPv4Configuration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.IPv4Configuration)
    MergeFrom(*source);
  }
}

void IPv4Configuration::MergeFrom(const IPv4Configuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.IPv4Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_address() != 0) {
    set_ip_address(from.ip_address());
  }
  if (from.subnet_mask() != 0) {
    set_subnet_mask(from.subnet_mask());
  }
  if (from.default_gateway() != 0) {
    set_default_gateway(from.default_gateway());
  }
  if (from.dhcp_enabled() != 0) {
    set_dhcp_enabled(from.dhcp_enabled());
  }
}

void IPv4Configuration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.IPv4Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPv4Configuration::CopyFrom(const IPv4Configuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.IPv4Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPv4Configuration::IsInitialized() const {
  return true;
}

void IPv4Configuration::Swap(IPv4Configuration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IPv4Configuration::InternalSwap(IPv4Configuration* other) {
  using std::swap;
  swap(ip_address_, other->ip_address_);
  swap(subnet_mask_, other->subnet_mask_);
  swap(default_gateway_, other->default_gateway_);
  swap(dhcp_enabled_, other->dhcp_enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IPv4Configuration::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IPv4Information::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IPv4Information::kIpAddressFieldNumber;
const int IPv4Information::kSubnetMaskFieldNumber;
const int IPv4Information::kDefaultGatewayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IPv4Information::IPv4Information()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_IPv4Information.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.IPv4Information)
}
IPv4Information::IPv4Information(const IPv4Information& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ip_address_, &from.ip_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_gateway_) -
    reinterpret_cast<char*>(&ip_address_)) + sizeof(default_gateway_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.IPv4Information)
}

void IPv4Information::SharedCtor() {
  ::memset(&ip_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_gateway_) -
      reinterpret_cast<char*>(&ip_address_)) + sizeof(default_gateway_));
}

IPv4Information::~IPv4Information() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.IPv4Information)
  SharedDtor();
}

void IPv4Information::SharedDtor() {
}

void IPv4Information::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IPv4Information::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IPv4Information& IPv4Information::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_IPv4Information.base);
  return *internal_default_instance();
}


void IPv4Information::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.IPv4Information)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ip_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_gateway_) -
      reinterpret_cast<char*>(&ip_address_)) + sizeof(default_gateway_));
  _internal_metadata_.Clear();
}

bool IPv4Information::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.IPv4Information)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ip_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 subnet_mask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subnet_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 default_gateway = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_gateway_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.IPv4Information)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.IPv4Information)
  return false;
#undef DO_
}

void IPv4Information::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.IPv4Information)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ip_address = 1;
  if (this->ip_address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip_address(), output);
  }

  // uint32 subnet_mask = 2;
  if (this->subnet_mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->subnet_mask(), output);
  }

  // uint32 default_gateway = 3;
  if (this->default_gateway() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->default_gateway(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.IPv4Information)
}

::google::protobuf::uint8* IPv4Information::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.IPv4Information)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ip_address = 1;
  if (this->ip_address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip_address(), target);
  }

  // uint32 subnet_mask = 2;
  if (this->subnet_mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->subnet_mask(), target);
  }

  // uint32 default_gateway = 3;
  if (this->default_gateway() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->default_gateway(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.IPv4Information)
  return target;
}

size_t IPv4Information::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.IPv4Information)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 ip_address = 1;
  if (this->ip_address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ip_address());
  }

  // uint32 subnet_mask = 2;
  if (this->subnet_mask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->subnet_mask());
  }

  // uint32 default_gateway = 3;
  if (this->default_gateway() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->default_gateway());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPv4Information::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.IPv4Information)
  GOOGLE_DCHECK_NE(&from, this);
  const IPv4Information* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IPv4Information>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.IPv4Information)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.IPv4Information)
    MergeFrom(*source);
  }
}

void IPv4Information::MergeFrom(const IPv4Information& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.IPv4Information)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_address() != 0) {
    set_ip_address(from.ip_address());
  }
  if (from.subnet_mask() != 0) {
    set_subnet_mask(from.subnet_mask());
  }
  if (from.default_gateway() != 0) {
    set_default_gateway(from.default_gateway());
  }
}

void IPv4Information::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.IPv4Information)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPv4Information::CopyFrom(const IPv4Information& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.IPv4Information)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPv4Information::IsInitialized() const {
  return true;
}

void IPv4Information::Swap(IPv4Information* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IPv4Information::InternalSwap(IPv4Information* other) {
  using std::swap;
  swap(ip_address_, other->ip_address_);
  swap(subnet_mask_, other->subnet_mask_);
  swap(default_gateway_, other->default_gateway_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IPv4Information::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FullIPv4Configuration::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_FullIPv4Configuration_default_instance_._instance.get_mutable()->handle_ = const_cast< ::Kinova::Api::Base::NetworkHandle*>(
      ::Kinova::Api::Base::NetworkHandle::internal_default_instance());
  ::Kinova::Api::Base::_FullIPv4Configuration_default_instance_._instance.get_mutable()->ipv4_configuration_ = const_cast< ::Kinova::Api::Base::IPv4Configuration*>(
      ::Kinova::Api::Base::IPv4Configuration::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FullIPv4Configuration::kHandleFieldNumber;
const int FullIPv4Configuration::kIpv4ConfigurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FullIPv4Configuration::FullIPv4Configuration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_FullIPv4Configuration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.FullIPv4Configuration)
}
FullIPv4Configuration::FullIPv4Configuration(const FullIPv4Configuration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_handle()) {
    handle_ = new ::Kinova::Api::Base::NetworkHandle(*from.handle_);
  } else {
    handle_ = NULL;
  }
  if (from.has_ipv4_configuration()) {
    ipv4_configuration_ = new ::Kinova::Api::Base::IPv4Configuration(*from.ipv4_configuration_);
  } else {
    ipv4_configuration_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.FullIPv4Configuration)
}

void FullIPv4Configuration::SharedCtor() {
  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipv4_configuration_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(ipv4_configuration_));
}

FullIPv4Configuration::~FullIPv4Configuration() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.FullIPv4Configuration)
  SharedDtor();
}

void FullIPv4Configuration::SharedDtor() {
  if (this != internal_default_instance()) delete handle_;
  if (this != internal_default_instance()) delete ipv4_configuration_;
}

void FullIPv4Configuration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FullIPv4Configuration::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FullIPv4Configuration& FullIPv4Configuration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_FullIPv4Configuration.base);
  return *internal_default_instance();
}


void FullIPv4Configuration::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.FullIPv4Configuration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && handle_ != NULL) {
    delete handle_;
  }
  handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && ipv4_configuration_ != NULL) {
    delete ipv4_configuration_;
  }
  ipv4_configuration_ = NULL;
  _internal_metadata_.Clear();
}

bool FullIPv4Configuration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.FullIPv4Configuration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.NetworkHandle handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.IPv4Configuration ipv4_configuration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ipv4_configuration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.FullIPv4Configuration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.FullIPv4Configuration)
  return false;
#undef DO_
}

void FullIPv4Configuration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.FullIPv4Configuration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.NetworkHandle handle = 1;
  if (this->has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_handle(), output);
  }

  // .Kinova.Api.Base.IPv4Configuration ipv4_configuration = 2;
  if (this->has_ipv4_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_ipv4_configuration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.FullIPv4Configuration)
}

::google::protobuf::uint8* FullIPv4Configuration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.FullIPv4Configuration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.NetworkHandle handle = 1;
  if (this->has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_handle(), deterministic, target);
  }

  // .Kinova.Api.Base.IPv4Configuration ipv4_configuration = 2;
  if (this->has_ipv4_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_ipv4_configuration(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.FullIPv4Configuration)
  return target;
}

size_t FullIPv4Configuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.FullIPv4Configuration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.NetworkHandle handle = 1;
  if (this->has_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  // .Kinova.Api.Base.IPv4Configuration ipv4_configuration = 2;
  if (this->has_ipv4_configuration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ipv4_configuration_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullIPv4Configuration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.FullIPv4Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  const FullIPv4Configuration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FullIPv4Configuration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.FullIPv4Configuration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.FullIPv4Configuration)
    MergeFrom(*source);
  }
}

void FullIPv4Configuration::MergeFrom(const FullIPv4Configuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.FullIPv4Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_handle()) {
    mutable_handle()->::Kinova::Api::Base::NetworkHandle::MergeFrom(from.handle());
  }
  if (from.has_ipv4_configuration()) {
    mutable_ipv4_configuration()->::Kinova::Api::Base::IPv4Configuration::MergeFrom(from.ipv4_configuration());
  }
}

void FullIPv4Configuration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.FullIPv4Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullIPv4Configuration::CopyFrom(const FullIPv4Configuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.FullIPv4Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullIPv4Configuration::IsInitialized() const {
  return true;
}

void FullIPv4Configuration::Swap(FullIPv4Configuration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FullIPv4Configuration::InternalSwap(FullIPv4Configuration* other) {
  using std::swap;
  swap(handle_, other->handle_);
  swap(ipv4_configuration_, other->ipv4_configuration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FullIPv4Configuration::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WifiEnableState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WifiEnableState::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WifiEnableState::WifiEnableState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_WifiEnableState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.WifiEnableState)
}
WifiEnableState::WifiEnableState(const WifiEnableState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.WifiEnableState)
}

void WifiEnableState::SharedCtor() {
  enabled_ = false;
}

WifiEnableState::~WifiEnableState() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.WifiEnableState)
  SharedDtor();
}

void WifiEnableState::SharedDtor() {
}

void WifiEnableState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WifiEnableState::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WifiEnableState& WifiEnableState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_WifiEnableState.base);
  return *internal_default_instance();
}


void WifiEnableState::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.WifiEnableState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _internal_metadata_.Clear();
}

bool WifiEnableState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.WifiEnableState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.WifiEnableState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.WifiEnableState)
  return false;
#undef DO_
}

void WifiEnableState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.WifiEnableState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.WifiEnableState)
}

::google::protobuf::uint8* WifiEnableState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.WifiEnableState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.WifiEnableState)
  return target;
}

size_t WifiEnableState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.WifiEnableState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WifiEnableState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.WifiEnableState)
  GOOGLE_DCHECK_NE(&from, this);
  const WifiEnableState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WifiEnableState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.WifiEnableState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.WifiEnableState)
    MergeFrom(*source);
  }
}

void WifiEnableState::MergeFrom(const WifiEnableState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.WifiEnableState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
}

void WifiEnableState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.WifiEnableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WifiEnableState::CopyFrom(const WifiEnableState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.WifiEnableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiEnableState::IsInitialized() const {
  return true;
}

void WifiEnableState::Swap(WifiEnableState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WifiEnableState::InternalSwap(WifiEnableState* other) {
  using std::swap;
  swap(enabled_, other->enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WifiEnableState::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BluetoothEnableState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BluetoothEnableState::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BluetoothEnableState::BluetoothEnableState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_BluetoothEnableState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.BluetoothEnableState)
}
BluetoothEnableState::BluetoothEnableState(const BluetoothEnableState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.BluetoothEnableState)
}

void BluetoothEnableState::SharedCtor() {
  enabled_ = false;
}

BluetoothEnableState::~BluetoothEnableState() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.BluetoothEnableState)
  SharedDtor();
}

void BluetoothEnableState::SharedDtor() {
}

void BluetoothEnableState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BluetoothEnableState::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BluetoothEnableState& BluetoothEnableState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_BluetoothEnableState.base);
  return *internal_default_instance();
}


void BluetoothEnableState::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.BluetoothEnableState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _internal_metadata_.Clear();
}

bool BluetoothEnableState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.BluetoothEnableState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.BluetoothEnableState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.BluetoothEnableState)
  return false;
#undef DO_
}

void BluetoothEnableState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.BluetoothEnableState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.BluetoothEnableState)
}

::google::protobuf::uint8* BluetoothEnableState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.BluetoothEnableState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.BluetoothEnableState)
  return target;
}

size_t BluetoothEnableState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.BluetoothEnableState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BluetoothEnableState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.BluetoothEnableState)
  GOOGLE_DCHECK_NE(&from, this);
  const BluetoothEnableState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BluetoothEnableState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.BluetoothEnableState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.BluetoothEnableState)
    MergeFrom(*source);
  }
}

void BluetoothEnableState::MergeFrom(const BluetoothEnableState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.BluetoothEnableState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
}

void BluetoothEnableState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.BluetoothEnableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BluetoothEnableState::CopyFrom(const BluetoothEnableState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.BluetoothEnableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BluetoothEnableState::IsInitialized() const {
  return true;
}

void BluetoothEnableState::Swap(BluetoothEnableState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BluetoothEnableState::InternalSwap(BluetoothEnableState* other) {
  using std::swap;
  swap(enabled_, other->enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BluetoothEnableState::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RFConfiguration::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_RFConfiguration_default_instance_._instance.get_mutable()->wifi_enable_state_ = const_cast< ::Kinova::Api::Base::WifiEnableState*>(
      ::Kinova::Api::Base::WifiEnableState::internal_default_instance());
  ::Kinova::Api::Base::_RFConfiguration_default_instance_._instance.get_mutable()->bluetooth_enable_state_ = const_cast< ::Kinova::Api::Base::BluetoothEnableState*>(
      ::Kinova::Api::Base::BluetoothEnableState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RFConfiguration::kWifiEnableStateFieldNumber;
const int RFConfiguration::kBluetoothEnableStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RFConfiguration::RFConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_RFConfiguration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.RFConfiguration)
}
RFConfiguration::RFConfiguration(const RFConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_wifi_enable_state()) {
    wifi_enable_state_ = new ::Kinova::Api::Base::WifiEnableState(*from.wifi_enable_state_);
  } else {
    wifi_enable_state_ = NULL;
  }
  if (from.has_bluetooth_enable_state()) {
    bluetooth_enable_state_ = new ::Kinova::Api::Base::BluetoothEnableState(*from.bluetooth_enable_state_);
  } else {
    bluetooth_enable_state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.RFConfiguration)
}

void RFConfiguration::SharedCtor() {
  ::memset(&wifi_enable_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bluetooth_enable_state_) -
      reinterpret_cast<char*>(&wifi_enable_state_)) + sizeof(bluetooth_enable_state_));
}

RFConfiguration::~RFConfiguration() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.RFConfiguration)
  SharedDtor();
}

void RFConfiguration::SharedDtor() {
  if (this != internal_default_instance()) delete wifi_enable_state_;
  if (this != internal_default_instance()) delete bluetooth_enable_state_;
}

void RFConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RFConfiguration::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RFConfiguration& RFConfiguration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_RFConfiguration.base);
  return *internal_default_instance();
}


void RFConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.RFConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && wifi_enable_state_ != NULL) {
    delete wifi_enable_state_;
  }
  wifi_enable_state_ = NULL;
  if (GetArenaNoVirtual() == NULL && bluetooth_enable_state_ != NULL) {
    delete bluetooth_enable_state_;
  }
  bluetooth_enable_state_ = NULL;
  _internal_metadata_.Clear();
}

bool RFConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.RFConfiguration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.WifiEnableState wifi_enable_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wifi_enable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.BluetoothEnableState bluetooth_enable_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bluetooth_enable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.RFConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.RFConfiguration)
  return false;
#undef DO_
}

void RFConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.RFConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.WifiEnableState wifi_enable_state = 1;
  if (this->has_wifi_enable_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_wifi_enable_state(), output);
  }

  // .Kinova.Api.Base.BluetoothEnableState bluetooth_enable_state = 2;
  if (this->has_bluetooth_enable_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_bluetooth_enable_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.RFConfiguration)
}

::google::protobuf::uint8* RFConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.RFConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.WifiEnableState wifi_enable_state = 1;
  if (this->has_wifi_enable_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_wifi_enable_state(), deterministic, target);
  }

  // .Kinova.Api.Base.BluetoothEnableState bluetooth_enable_state = 2;
  if (this->has_bluetooth_enable_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_bluetooth_enable_state(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.RFConfiguration)
  return target;
}

size_t RFConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.RFConfiguration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.WifiEnableState wifi_enable_state = 1;
  if (this->has_wifi_enable_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *wifi_enable_state_);
  }

  // .Kinova.Api.Base.BluetoothEnableState bluetooth_enable_state = 2;
  if (this->has_bluetooth_enable_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bluetooth_enable_state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RFConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.RFConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const RFConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RFConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.RFConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.RFConfiguration)
    MergeFrom(*source);
  }
}

void RFConfiguration::MergeFrom(const RFConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.RFConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wifi_enable_state()) {
    mutable_wifi_enable_state()->::Kinova::Api::Base::WifiEnableState::MergeFrom(from.wifi_enable_state());
  }
  if (from.has_bluetooth_enable_state()) {
    mutable_bluetooth_enable_state()->::Kinova::Api::Base::BluetoothEnableState::MergeFrom(from.bluetooth_enable_state());
  }
}

void RFConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.RFConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RFConfiguration::CopyFrom(const RFConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.RFConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RFConfiguration::IsInitialized() const {
  return true;
}

void RFConfiguration::Swap(RFConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RFConfiguration::InternalSwap(RFConfiguration* other) {
  using std::swap;
  swap(wifi_enable_state_, other->wifi_enable_state_);
  swap(bluetooth_enable_state_, other->bluetooth_enable_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RFConfiguration::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WifiInformation::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_WifiInformation_default_instance_._instance.get_mutable()->ssid_ = const_cast< ::Kinova::Api::Base::Ssid*>(
      ::Kinova::Api::Base::Ssid::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WifiInformation::kSsidFieldNumber;
const int WifiInformation::kSecurityTypeFieldNumber;
const int WifiInformation::kEncryptionTypeFieldNumber;
const int WifiInformation::kSignalQualityFieldNumber;
const int WifiInformation::kSignalStrengthFieldNumber;
const int WifiInformation::kFrequencyFieldNumber;
const int WifiInformation::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WifiInformation::WifiInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_WifiInformation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.WifiInformation)
}
WifiInformation::WifiInformation(const WifiInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ssid()) {
    ssid_ = new ::Kinova::Api::Base::Ssid(*from.ssid_);
  } else {
    ssid_ = NULL;
  }
  ::memcpy(&security_type_, &from.security_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&security_type_)) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.WifiInformation)
}

void WifiInformation::SharedCtor() {
  ::memset(&ssid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&ssid_)) + sizeof(channel_));
}

WifiInformation::~WifiInformation() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.WifiInformation)
  SharedDtor();
}

void WifiInformation::SharedDtor() {
  if (this != internal_default_instance()) delete ssid_;
}

void WifiInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WifiInformation::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WifiInformation& WifiInformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_WifiInformation.base);
  return *internal_default_instance();
}


void WifiInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.WifiInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && ssid_ != NULL) {
    delete ssid_;
  }
  ssid_ = NULL;
  ::memset(&security_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&security_type_)) + sizeof(channel_));
  _internal_metadata_.Clear();
}

bool WifiInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.WifiInformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.Ssid ssid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 security_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &security_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 encryption_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encryption_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.SignalQuality signal_quality = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_signal_quality(static_cast< ::Kinova::Api::Base::SignalQuality >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 signal_strength = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signal_strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 frequency = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 channel = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.WifiInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.WifiInformation)
  return false;
#undef DO_
}

void WifiInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.WifiInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.Ssid ssid = 1;
  if (this->has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ssid(), output);
  }

  // fixed32 security_type = 2;
  if (this->security_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->security_type(), output);
  }

  // fixed32 encryption_type = 3;
  if (this->encryption_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->encryption_type(), output);
  }

  // .Kinova.Api.Base.SignalQuality signal_quality = 4;
  if (this->signal_quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->signal_quality(), output);
  }

  // int32 signal_strength = 5;
  if (this->signal_strength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->signal_strength(), output);
  }

  // uint32 frequency = 6;
  if (this->frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->frequency(), output);
  }

  // uint32 channel = 7;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->channel(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.WifiInformation)
}

::google::protobuf::uint8* WifiInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.WifiInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.Ssid ssid = 1;
  if (this->has_ssid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ssid(), deterministic, target);
  }

  // fixed32 security_type = 2;
  if (this->security_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->security_type(), target);
  }

  // fixed32 encryption_type = 3;
  if (this->encryption_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->encryption_type(), target);
  }

  // .Kinova.Api.Base.SignalQuality signal_quality = 4;
  if (this->signal_quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->signal_quality(), target);
  }

  // int32 signal_strength = 5;
  if (this->signal_strength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->signal_strength(), target);
  }

  // uint32 frequency = 6;
  if (this->frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->frequency(), target);
  }

  // uint32 channel = 7;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->channel(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.WifiInformation)
  return target;
}

size_t WifiInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.WifiInformation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.Ssid ssid = 1;
  if (this->has_ssid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ssid_);
  }

  // fixed32 security_type = 2;
  if (this->security_type() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 encryption_type = 3;
  if (this->encryption_type() != 0) {
    total_size += 1 + 4;
  }

  // .Kinova.Api.Base.SignalQuality signal_quality = 4;
  if (this->signal_quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->signal_quality());
  }

  // int32 signal_strength = 5;
  if (this->signal_strength() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->signal_strength());
  }

  // uint32 frequency = 6;
  if (this->frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frequency());
  }

  // uint32 channel = 7;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WifiInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.WifiInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const WifiInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WifiInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.WifiInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.WifiInformation)
    MergeFrom(*source);
  }
}

void WifiInformation::MergeFrom(const WifiInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.WifiInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ssid()) {
    mutable_ssid()->::Kinova::Api::Base::Ssid::MergeFrom(from.ssid());
  }
  if (from.security_type() != 0) {
    set_security_type(from.security_type());
  }
  if (from.encryption_type() != 0) {
    set_encryption_type(from.encryption_type());
  }
  if (from.signal_quality() != 0) {
    set_signal_quality(from.signal_quality());
  }
  if (from.signal_strength() != 0) {
    set_signal_strength(from.signal_strength());
  }
  if (from.frequency() != 0) {
    set_frequency(from.frequency());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
}

void WifiInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.WifiInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WifiInformation::CopyFrom(const WifiInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.WifiInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiInformation::IsInitialized() const {
  return true;
}

void WifiInformation::Swap(WifiInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WifiInformation::InternalSwap(WifiInformation* other) {
  using std::swap;
  swap(ssid_, other->ssid_);
  swap(security_type_, other->security_type_);
  swap(encryption_type_, other->encryption_type_);
  swap(signal_quality_, other->signal_quality_);
  swap(signal_strength_, other->signal_strength_);
  swap(frequency_, other->frequency_);
  swap(channel_, other->channel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WifiInformation::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WifiInformationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WifiInformationList::kWifiInformationListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WifiInformationList::WifiInformationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_WifiInformationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.WifiInformationList)
}
WifiInformationList::WifiInformationList(const WifiInformationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      wifi_information_list_(from.wifi_information_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.WifiInformationList)
}

void WifiInformationList::SharedCtor() {
}

WifiInformationList::~WifiInformationList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.WifiInformationList)
  SharedDtor();
}

void WifiInformationList::SharedDtor() {
}

void WifiInformationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WifiInformationList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WifiInformationList& WifiInformationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_WifiInformationList.base);
  return *internal_default_instance();
}


void WifiInformationList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.WifiInformationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wifi_information_list_.Clear();
  _internal_metadata_.Clear();
}

bool WifiInformationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.WifiInformationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.WifiInformation wifi_information_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_wifi_information_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.WifiInformationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.WifiInformationList)
  return false;
#undef DO_
}

void WifiInformationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.WifiInformationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.WifiInformation wifi_information_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wifi_information_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->wifi_information_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.WifiInformationList)
}

::google::protobuf::uint8* WifiInformationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.WifiInformationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.WifiInformation wifi_information_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wifi_information_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->wifi_information_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.WifiInformationList)
  return target;
}

size_t WifiInformationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.WifiInformationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.WifiInformation wifi_information_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->wifi_information_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->wifi_information_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WifiInformationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.WifiInformationList)
  GOOGLE_DCHECK_NE(&from, this);
  const WifiInformationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WifiInformationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.WifiInformationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.WifiInformationList)
    MergeFrom(*source);
  }
}

void WifiInformationList::MergeFrom(const WifiInformationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.WifiInformationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wifi_information_list_.MergeFrom(from.wifi_information_list_);
}

void WifiInformationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.WifiInformationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WifiInformationList::CopyFrom(const WifiInformationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.WifiInformationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiInformationList::IsInitialized() const {
  return true;
}

void WifiInformationList::Swap(WifiInformationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WifiInformationList::InternalSwap(WifiInformationList* other) {
  using std::swap;
  CastToBase(&wifi_information_list_)->InternalSwap(CastToBase(&other->wifi_information_list_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WifiInformationList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WifiConfiguration::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_WifiConfiguration_default_instance_._instance.get_mutable()->ssid_ = const_cast< ::Kinova::Api::Base::Ssid*>(
      ::Kinova::Api::Base::Ssid::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WifiConfiguration::kSsidFieldNumber;
const int WifiConfiguration::kSecurityKeyFieldNumber;
const int WifiConfiguration::kConnectAutomaticallyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WifiConfiguration::WifiConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_WifiConfiguration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.WifiConfiguration)
}
WifiConfiguration::WifiConfiguration(const WifiConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  security_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.security_key().size() > 0) {
    security_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.security_key_);
  }
  if (from.has_ssid()) {
    ssid_ = new ::Kinova::Api::Base::Ssid(*from.ssid_);
  } else {
    ssid_ = NULL;
  }
  connect_automatically_ = from.connect_automatically_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.WifiConfiguration)
}

void WifiConfiguration::SharedCtor() {
  security_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ssid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connect_automatically_) -
      reinterpret_cast<char*>(&ssid_)) + sizeof(connect_automatically_));
}

WifiConfiguration::~WifiConfiguration() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.WifiConfiguration)
  SharedDtor();
}

void WifiConfiguration::SharedDtor() {
  security_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ssid_;
}

void WifiConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WifiConfiguration::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WifiConfiguration& WifiConfiguration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_WifiConfiguration.base);
  return *internal_default_instance();
}


void WifiConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.WifiConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  security_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && ssid_ != NULL) {
    delete ssid_;
  }
  ssid_ = NULL;
  connect_automatically_ = false;
  _internal_metadata_.Clear();
}

bool WifiConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.WifiConfiguration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.Ssid ssid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string security_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->security_key().data(), static_cast<int>(this->security_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.WifiConfiguration.security_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool connect_automatically = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connect_automatically_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.WifiConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.WifiConfiguration)
  return false;
#undef DO_
}

void WifiConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.WifiConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.Ssid ssid = 1;
  if (this->has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ssid(), output);
  }

  // string security_key = 2;
  if (this->security_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->security_key().data(), static_cast<int>(this->security_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.WifiConfiguration.security_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->security_key(), output);
  }

  // bool connect_automatically = 3;
  if (this->connect_automatically() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->connect_automatically(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.WifiConfiguration)
}

::google::protobuf::uint8* WifiConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.WifiConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.Ssid ssid = 1;
  if (this->has_ssid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ssid(), deterministic, target);
  }

  // string security_key = 2;
  if (this->security_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->security_key().data(), static_cast<int>(this->security_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.WifiConfiguration.security_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->security_key(), target);
  }

  // bool connect_automatically = 3;
  if (this->connect_automatically() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->connect_automatically(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.WifiConfiguration)
  return target;
}

size_t WifiConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.WifiConfiguration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string security_key = 2;
  if (this->security_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->security_key());
  }

  // .Kinova.Api.Base.Ssid ssid = 1;
  if (this->has_ssid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ssid_);
  }

  // bool connect_automatically = 3;
  if (this->connect_automatically() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WifiConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.WifiConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const WifiConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WifiConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.WifiConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.WifiConfiguration)
    MergeFrom(*source);
  }
}

void WifiConfiguration::MergeFrom(const WifiConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.WifiConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.security_key().size() > 0) {

    security_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.security_key_);
  }
  if (from.has_ssid()) {
    mutable_ssid()->::Kinova::Api::Base::Ssid::MergeFrom(from.ssid());
  }
  if (from.connect_automatically() != 0) {
    set_connect_automatically(from.connect_automatically());
  }
}

void WifiConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.WifiConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WifiConfiguration::CopyFrom(const WifiConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.WifiConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiConfiguration::IsInitialized() const {
  return true;
}

void WifiConfiguration::Swap(WifiConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WifiConfiguration::InternalSwap(WifiConfiguration* other) {
  using std::swap;
  security_key_.Swap(&other->security_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ssid_, other->ssid_);
  swap(connect_automatically_, other->connect_automatically_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WifiConfiguration::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WifiConfigurationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WifiConfigurationList::kWifiConfigurationListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WifiConfigurationList::WifiConfigurationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_WifiConfigurationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.WifiConfigurationList)
}
WifiConfigurationList::WifiConfigurationList(const WifiConfigurationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      wifi_configuration_list_(from.wifi_configuration_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.WifiConfigurationList)
}

void WifiConfigurationList::SharedCtor() {
}

WifiConfigurationList::~WifiConfigurationList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.WifiConfigurationList)
  SharedDtor();
}

void WifiConfigurationList::SharedDtor() {
}

void WifiConfigurationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WifiConfigurationList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WifiConfigurationList& WifiConfigurationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_WifiConfigurationList.base);
  return *internal_default_instance();
}


void WifiConfigurationList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.WifiConfigurationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wifi_configuration_list_.Clear();
  _internal_metadata_.Clear();
}

bool WifiConfigurationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.WifiConfigurationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.WifiConfiguration wifi_configuration_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_wifi_configuration_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.WifiConfigurationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.WifiConfigurationList)
  return false;
#undef DO_
}

void WifiConfigurationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.WifiConfigurationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.WifiConfiguration wifi_configuration_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wifi_configuration_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->wifi_configuration_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.WifiConfigurationList)
}

::google::protobuf::uint8* WifiConfigurationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.WifiConfigurationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.WifiConfiguration wifi_configuration_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wifi_configuration_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->wifi_configuration_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.WifiConfigurationList)
  return target;
}

size_t WifiConfigurationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.WifiConfigurationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.WifiConfiguration wifi_configuration_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->wifi_configuration_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->wifi_configuration_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WifiConfigurationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.WifiConfigurationList)
  GOOGLE_DCHECK_NE(&from, this);
  const WifiConfigurationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WifiConfigurationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.WifiConfigurationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.WifiConfigurationList)
    MergeFrom(*source);
  }
}

void WifiConfigurationList::MergeFrom(const WifiConfigurationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.WifiConfigurationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wifi_configuration_list_.MergeFrom(from.wifi_configuration_list_);
}

void WifiConfigurationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.WifiConfigurationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WifiConfigurationList::CopyFrom(const WifiConfigurationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.WifiConfigurationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiConfigurationList::IsInitialized() const {
  return true;
}

void WifiConfigurationList::Swap(WifiConfigurationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WifiConfigurationList::InternalSwap(WifiConfigurationList* other) {
  using std::swap;
  CastToBase(&wifi_configuration_list_)->InternalSwap(CastToBase(&other->wifi_configuration_list_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WifiConfigurationList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProtectionZoneHandle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtectionZoneHandle::kIdentifierFieldNumber;
const int ProtectionZoneHandle::kPermissionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtectionZoneHandle::ProtectionZoneHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ProtectionZoneHandle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ProtectionZoneHandle)
}
ProtectionZoneHandle::ProtectionZoneHandle(const ProtectionZoneHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&identifier_, &from.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ProtectionZoneHandle)
}

void ProtectionZoneHandle::SharedCtor() {
  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
}

ProtectionZoneHandle::~ProtectionZoneHandle() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ProtectionZoneHandle)
  SharedDtor();
}

void ProtectionZoneHandle::SharedDtor() {
}

void ProtectionZoneHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProtectionZoneHandle::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtectionZoneHandle& ProtectionZoneHandle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ProtectionZoneHandle.base);
  return *internal_default_instance();
}


void ProtectionZoneHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ProtectionZoneHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
  _internal_metadata_.Clear();
}

bool ProtectionZoneHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ProtectionZoneHandle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 permission = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ProtectionZoneHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ProtectionZoneHandle)
  return false;
#undef DO_
}

void ProtectionZoneHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ProtectionZoneHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->identifier(), output);
  }

  // fixed32 permission = 2;
  if (this->permission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->permission(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ProtectionZoneHandle)
}

::google::protobuf::uint8* ProtectionZoneHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ProtectionZoneHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->identifier(), target);
  }

  // fixed32 permission = 2;
  if (this->permission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->permission(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ProtectionZoneHandle)
  return target;
}

size_t ProtectionZoneHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ProtectionZoneHandle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->identifier());
  }

  // fixed32 permission = 2;
  if (this->permission() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtectionZoneHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ProtectionZoneHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtectionZoneHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtectionZoneHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ProtectionZoneHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ProtectionZoneHandle)
    MergeFrom(*source);
  }
}

void ProtectionZoneHandle::MergeFrom(const ProtectionZoneHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ProtectionZoneHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.identifier() != 0) {
    set_identifier(from.identifier());
  }
  if (from.permission() != 0) {
    set_permission(from.permission());
  }
}

void ProtectionZoneHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ProtectionZoneHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtectionZoneHandle::CopyFrom(const ProtectionZoneHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ProtectionZoneHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtectionZoneHandle::IsInitialized() const {
  return true;
}

void ProtectionZoneHandle::Swap(ProtectionZoneHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtectionZoneHandle::InternalSwap(ProtectionZoneHandle* other) {
  using std::swap;
  swap(identifier_, other->identifier_);
  swap(permission_, other->permission_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProtectionZoneHandle::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RotationMatrixRow::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RotationMatrixRow::kColumn1FieldNumber;
const int RotationMatrixRow::kColumn2FieldNumber;
const int RotationMatrixRow::kColumn3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RotationMatrixRow::RotationMatrixRow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_RotationMatrixRow.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.RotationMatrixRow)
}
RotationMatrixRow::RotationMatrixRow(const RotationMatrixRow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&column1_, &from.column1_,
    static_cast<size_t>(reinterpret_cast<char*>(&column3_) -
    reinterpret_cast<char*>(&column1_)) + sizeof(column3_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.RotationMatrixRow)
}

void RotationMatrixRow::SharedCtor() {
  ::memset(&column1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column3_) -
      reinterpret_cast<char*>(&column1_)) + sizeof(column3_));
}

RotationMatrixRow::~RotationMatrixRow() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.RotationMatrixRow)
  SharedDtor();
}

void RotationMatrixRow::SharedDtor() {
}

void RotationMatrixRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RotationMatrixRow::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RotationMatrixRow& RotationMatrixRow::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_RotationMatrixRow.base);
  return *internal_default_instance();
}


void RotationMatrixRow::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.RotationMatrixRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&column1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column3_) -
      reinterpret_cast<char*>(&column1_)) + sizeof(column3_));
  _internal_metadata_.Clear();
}

bool RotationMatrixRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.RotationMatrixRow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float column1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &column1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float column2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &column2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float column3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &column3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.RotationMatrixRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.RotationMatrixRow)
  return false;
#undef DO_
}

void RotationMatrixRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.RotationMatrixRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float column1 = 1;
  if (this->column1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->column1(), output);
  }

  // float column2 = 2;
  if (this->column2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->column2(), output);
  }

  // float column3 = 3;
  if (this->column3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->column3(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.RotationMatrixRow)
}

::google::protobuf::uint8* RotationMatrixRow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.RotationMatrixRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float column1 = 1;
  if (this->column1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->column1(), target);
  }

  // float column2 = 2;
  if (this->column2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->column2(), target);
  }

  // float column3 = 3;
  if (this->column3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->column3(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.RotationMatrixRow)
  return target;
}

size_t RotationMatrixRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.RotationMatrixRow)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float column1 = 1;
  if (this->column1() != 0) {
    total_size += 1 + 4;
  }

  // float column2 = 2;
  if (this->column2() != 0) {
    total_size += 1 + 4;
  }

  // float column3 = 3;
  if (this->column3() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RotationMatrixRow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.RotationMatrixRow)
  GOOGLE_DCHECK_NE(&from, this);
  const RotationMatrixRow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RotationMatrixRow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.RotationMatrixRow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.RotationMatrixRow)
    MergeFrom(*source);
  }
}

void RotationMatrixRow::MergeFrom(const RotationMatrixRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.RotationMatrixRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.column1() != 0) {
    set_column1(from.column1());
  }
  if (from.column2() != 0) {
    set_column2(from.column2());
  }
  if (from.column3() != 0) {
    set_column3(from.column3());
  }
}

void RotationMatrixRow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.RotationMatrixRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotationMatrixRow::CopyFrom(const RotationMatrixRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.RotationMatrixRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotationMatrixRow::IsInitialized() const {
  return true;
}

void RotationMatrixRow::Swap(RotationMatrixRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RotationMatrixRow::InternalSwap(RotationMatrixRow* other) {
  using std::swap;
  swap(column1_, other->column1_);
  swap(column2_, other->column2_);
  swap(column3_, other->column3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RotationMatrixRow::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RotationMatrix::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_RotationMatrix_default_instance_._instance.get_mutable()->row1_ = const_cast< ::Kinova::Api::Base::RotationMatrixRow*>(
      ::Kinova::Api::Base::RotationMatrixRow::internal_default_instance());
  ::Kinova::Api::Base::_RotationMatrix_default_instance_._instance.get_mutable()->row2_ = const_cast< ::Kinova::Api::Base::RotationMatrixRow*>(
      ::Kinova::Api::Base::RotationMatrixRow::internal_default_instance());
  ::Kinova::Api::Base::_RotationMatrix_default_instance_._instance.get_mutable()->row3_ = const_cast< ::Kinova::Api::Base::RotationMatrixRow*>(
      ::Kinova::Api::Base::RotationMatrixRow::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RotationMatrix::kRow1FieldNumber;
const int RotationMatrix::kRow2FieldNumber;
const int RotationMatrix::kRow3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RotationMatrix::RotationMatrix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_RotationMatrix.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.RotationMatrix)
}
RotationMatrix::RotationMatrix(const RotationMatrix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_row1()) {
    row1_ = new ::Kinova::Api::Base::RotationMatrixRow(*from.row1_);
  } else {
    row1_ = NULL;
  }
  if (from.has_row2()) {
    row2_ = new ::Kinova::Api::Base::RotationMatrixRow(*from.row2_);
  } else {
    row2_ = NULL;
  }
  if (from.has_row3()) {
    row3_ = new ::Kinova::Api::Base::RotationMatrixRow(*from.row3_);
  } else {
    row3_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.RotationMatrix)
}

void RotationMatrix::SharedCtor() {
  ::memset(&row1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row3_) -
      reinterpret_cast<char*>(&row1_)) + sizeof(row3_));
}

RotationMatrix::~RotationMatrix() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.RotationMatrix)
  SharedDtor();
}

void RotationMatrix::SharedDtor() {
  if (this != internal_default_instance()) delete row1_;
  if (this != internal_default_instance()) delete row2_;
  if (this != internal_default_instance()) delete row3_;
}

void RotationMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RotationMatrix::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RotationMatrix& RotationMatrix::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_RotationMatrix.base);
  return *internal_default_instance();
}


void RotationMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.RotationMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && row1_ != NULL) {
    delete row1_;
  }
  row1_ = NULL;
  if (GetArenaNoVirtual() == NULL && row2_ != NULL) {
    delete row2_;
  }
  row2_ = NULL;
  if (GetArenaNoVirtual() == NULL && row3_ != NULL) {
    delete row3_;
  }
  row3_ = NULL;
  _internal_metadata_.Clear();
}

bool RotationMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.RotationMatrix)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.RotationMatrixRow row1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_row1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.RotationMatrixRow row2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_row2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.RotationMatrixRow row3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_row3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.RotationMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.RotationMatrix)
  return false;
#undef DO_
}

void RotationMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.RotationMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.RotationMatrixRow row1 = 1;
  if (this->has_row1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_row1(), output);
  }

  // .Kinova.Api.Base.RotationMatrixRow row2 = 2;
  if (this->has_row2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_row2(), output);
  }

  // .Kinova.Api.Base.RotationMatrixRow row3 = 3;
  if (this->has_row3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_row3(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.RotationMatrix)
}

::google::protobuf::uint8* RotationMatrix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.RotationMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.RotationMatrixRow row1 = 1;
  if (this->has_row1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_row1(), deterministic, target);
  }

  // .Kinova.Api.Base.RotationMatrixRow row2 = 2;
  if (this->has_row2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_row2(), deterministic, target);
  }

  // .Kinova.Api.Base.RotationMatrixRow row3 = 3;
  if (this->has_row3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_row3(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.RotationMatrix)
  return target;
}

size_t RotationMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.RotationMatrix)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.RotationMatrixRow row1 = 1;
  if (this->has_row1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *row1_);
  }

  // .Kinova.Api.Base.RotationMatrixRow row2 = 2;
  if (this->has_row2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *row2_);
  }

  // .Kinova.Api.Base.RotationMatrixRow row3 = 3;
  if (this->has_row3()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *row3_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RotationMatrix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.RotationMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const RotationMatrix* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RotationMatrix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.RotationMatrix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.RotationMatrix)
    MergeFrom(*source);
  }
}

void RotationMatrix::MergeFrom(const RotationMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.RotationMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_row1()) {
    mutable_row1()->::Kinova::Api::Base::RotationMatrixRow::MergeFrom(from.row1());
  }
  if (from.has_row2()) {
    mutable_row2()->::Kinova::Api::Base::RotationMatrixRow::MergeFrom(from.row2());
  }
  if (from.has_row3()) {
    mutable_row3()->::Kinova::Api::Base::RotationMatrixRow::MergeFrom(from.row3());
  }
}

void RotationMatrix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.RotationMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotationMatrix::CopyFrom(const RotationMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.RotationMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotationMatrix::IsInitialized() const {
  return true;
}

void RotationMatrix::Swap(RotationMatrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RotationMatrix::InternalSwap(RotationMatrix* other) {
  using std::swap;
  swap(row1_, other->row1_);
  swap(row2_, other->row2_);
  swap(row3_, other->row3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RotationMatrix::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Point.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Point)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ZoneShape::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ZoneShape_default_instance_._instance.get_mutable()->origin_ = const_cast< ::Kinova::Api::Base::Point*>(
      ::Kinova::Api::Base::Point::internal_default_instance());
  ::Kinova::Api::Base::_ZoneShape_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::Kinova::Api::Base::RotationMatrix*>(
      ::Kinova::Api::Base::RotationMatrix::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ZoneShape::kShapeTypeFieldNumber;
const int ZoneShape::kOriginFieldNumber;
const int ZoneShape::kOrientationFieldNumber;
const int ZoneShape::kDimensionsFieldNumber;
const int ZoneShape::kEnvelopeThicknessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ZoneShape::ZoneShape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ZoneShape.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ZoneShape)
}
ZoneShape::ZoneShape(const ZoneShape& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dimensions_(from.dimensions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::Kinova::Api::Base::Point(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_orientation()) {
    orientation_ = new ::Kinova::Api::Base::RotationMatrix(*from.orientation_);
  } else {
    orientation_ = NULL;
  }
  ::memcpy(&shape_type_, &from.shape_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&envelope_thickness_) -
    reinterpret_cast<char*>(&shape_type_)) + sizeof(envelope_thickness_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ZoneShape)
}

void ZoneShape::SharedCtor() {
  ::memset(&origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&envelope_thickness_) -
      reinterpret_cast<char*>(&origin_)) + sizeof(envelope_thickness_));
}

ZoneShape::~ZoneShape() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ZoneShape)
  SharedDtor();
}

void ZoneShape::SharedDtor() {
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete orientation_;
}

void ZoneShape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ZoneShape::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ZoneShape& ZoneShape::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ZoneShape.base);
  return *internal_default_instance();
}


void ZoneShape::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ZoneShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimensions_.Clear();
  if (GetArenaNoVirtual() == NULL && origin_ != NULL) {
    delete origin_;
  }
  origin_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) {
    delete orientation_;
  }
  orientation_ = NULL;
  ::memset(&shape_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&envelope_thickness_) -
      reinterpret_cast<char*>(&shape_type_)) + sizeof(envelope_thickness_));
  _internal_metadata_.Clear();
}

bool ZoneShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ZoneShape)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ShapeType shape_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_shape_type(static_cast< ::Kinova::Api::Base::ShapeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.Point origin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.RotationMatrix orientation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float dimensions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_dimensions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_dimensions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float envelope_thickness = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &envelope_thickness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ZoneShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ZoneShape)
  return false;
#undef DO_
}

void ZoneShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ZoneShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ShapeType shape_type = 1;
  if (this->shape_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->shape_type(), output);
  }

  // .Kinova.Api.Base.Point origin = 2;
  if (this->has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_origin(), output);
  }

  // .Kinova.Api.Base.RotationMatrix orientation = 3;
  if (this->has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_orientation(), output);
  }

  // repeated float dimensions = 4;
  if (this->dimensions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _dimensions_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->dimensions().data(), this->dimensions_size(), output);
  }

  // float envelope_thickness = 5;
  if (this->envelope_thickness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->envelope_thickness(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ZoneShape)
}

::google::protobuf::uint8* ZoneShape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ZoneShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ShapeType shape_type = 1;
  if (this->shape_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->shape_type(), target);
  }

  // .Kinova.Api.Base.Point origin = 2;
  if (this->has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_origin(), deterministic, target);
  }

  // .Kinova.Api.Base.RotationMatrix orientation = 3;
  if (this->has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_orientation(), deterministic, target);
  }

  // repeated float dimensions = 4;
  if (this->dimensions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _dimensions_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->dimensions_, target);
  }

  // float envelope_thickness = 5;
  if (this->envelope_thickness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->envelope_thickness(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ZoneShape)
  return target;
}

size_t ZoneShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ZoneShape)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float dimensions = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->dimensions_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dimensions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .Kinova.Api.Base.Point origin = 2;
  if (this->has_origin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  // .Kinova.Api.Base.RotationMatrix orientation = 3;
  if (this->has_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // .Kinova.Api.Base.ShapeType shape_type = 1;
  if (this->shape_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->shape_type());
  }

  // float envelope_thickness = 5;
  if (this->envelope_thickness() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZoneShape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ZoneShape)
  GOOGLE_DCHECK_NE(&from, this);
  const ZoneShape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ZoneShape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ZoneShape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ZoneShape)
    MergeFrom(*source);
  }
}

void ZoneShape::MergeFrom(const ZoneShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ZoneShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimensions_.MergeFrom(from.dimensions_);
  if (from.has_origin()) {
    mutable_origin()->::Kinova::Api::Base::Point::MergeFrom(from.origin());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::Kinova::Api::Base::RotationMatrix::MergeFrom(from.orientation());
  }
  if (from.shape_type() != 0) {
    set_shape_type(from.shape_type());
  }
  if (from.envelope_thickness() != 0) {
    set_envelope_thickness(from.envelope_thickness());
  }
}

void ZoneShape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ZoneShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneShape::CopyFrom(const ZoneShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ZoneShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneShape::IsInitialized() const {
  return true;
}

void ZoneShape::Swap(ZoneShape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ZoneShape::InternalSwap(ZoneShape* other) {
  using std::swap;
  dimensions_.InternalSwap(&other->dimensions_);
  swap(origin_, other->origin_);
  swap(orientation_, other->orientation_);
  swap(shape_type_, other->shape_type_);
  swap(envelope_thickness_, other->envelope_thickness_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ZoneShape::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProtectionZone::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ProtectionZone_default_instance_._instance.get_mutable()->handle_ = const_cast< ::Kinova::Api::Base::ProtectionZoneHandle*>(
      ::Kinova::Api::Base::ProtectionZoneHandle::internal_default_instance());
  ::Kinova::Api::Base::_ProtectionZone_default_instance_._instance.get_mutable()->shape_ = const_cast< ::Kinova::Api::Base::ZoneShape*>(
      ::Kinova::Api::Base::ZoneShape::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtectionZone::kHandleFieldNumber;
const int ProtectionZone::kNameFieldNumber;
const int ProtectionZone::kApplicationDataFieldNumber;
const int ProtectionZone::kIsEnabledFieldNumber;
const int ProtectionZone::kShapeFieldNumber;
const int ProtectionZone::kLimitationsFieldNumber;
const int ProtectionZone::kEnvelopeLimitationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtectionZone::ProtectionZone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ProtectionZone.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ProtectionZone)
}
ProtectionZone::ProtectionZone(const ProtectionZone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      limitations_(from.limitations_),
      envelope_limitations_(from.envelope_limitations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  application_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.application_data().size() > 0) {
    application_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_data_);
  }
  if (from.has_handle()) {
    handle_ = new ::Kinova::Api::Base::ProtectionZoneHandle(*from.handle_);
  } else {
    handle_ = NULL;
  }
  if (from.has_shape()) {
    shape_ = new ::Kinova::Api::Base::ZoneShape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  is_enabled_ = from.is_enabled_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ProtectionZone)
}

void ProtectionZone::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_enabled_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(is_enabled_));
}

ProtectionZone::~ProtectionZone() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ProtectionZone)
  SharedDtor();
}

void ProtectionZone::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete handle_;
  if (this != internal_default_instance()) delete shape_;
}

void ProtectionZone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProtectionZone::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtectionZone& ProtectionZone::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ProtectionZone.base);
  return *internal_default_instance();
}


void ProtectionZone::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ProtectionZone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limitations_.Clear();
  envelope_limitations_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && handle_ != NULL) {
    delete handle_;
  }
  handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
  is_enabled_ = false;
  _internal_metadata_.Clear();
}

bool ProtectionZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ProtectionZone)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ProtectionZoneHandle handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.ProtectionZone.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string application_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->application_data().data(), static_cast<int>(this->application_data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.ProtectionZone.application_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_enabled = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.ZoneShape shape = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Kinova.Api.Base.CartesianLimitation limitations = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_limitations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Kinova.Api.Base.CartesianLimitation envelope_limitations = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_envelope_limitations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ProtectionZone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ProtectionZone)
  return false;
#undef DO_
}

void ProtectionZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ProtectionZone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ProtectionZoneHandle handle = 1;
  if (this->has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_handle(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.ProtectionZone.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string application_data = 3;
  if (this->application_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_data().data(), static_cast<int>(this->application_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.ProtectionZone.application_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->application_data(), output);
  }

  // bool is_enabled = 4;
  if (this->is_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_enabled(), output);
  }

  // .Kinova.Api.Base.ZoneShape shape = 5;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_shape(), output);
  }

  // repeated .Kinova.Api.Base.CartesianLimitation limitations = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limitations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->limitations(static_cast<int>(i)),
      output);
  }

  // repeated .Kinova.Api.Base.CartesianLimitation envelope_limitations = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->envelope_limitations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->envelope_limitations(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ProtectionZone)
}

::google::protobuf::uint8* ProtectionZone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ProtectionZone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ProtectionZoneHandle handle = 1;
  if (this->has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_handle(), deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.ProtectionZone.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string application_data = 3;
  if (this->application_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_data().data(), static_cast<int>(this->application_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.ProtectionZone.application_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->application_data(), target);
  }

  // bool is_enabled = 4;
  if (this->is_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_enabled(), target);
  }

  // .Kinova.Api.Base.ZoneShape shape = 5;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_shape(), deterministic, target);
  }

  // repeated .Kinova.Api.Base.CartesianLimitation limitations = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limitations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->limitations(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Kinova.Api.Base.CartesianLimitation envelope_limitations = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->envelope_limitations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->envelope_limitations(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ProtectionZone)
  return target;
}

size_t ProtectionZone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ProtectionZone)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.CartesianLimitation limitations = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->limitations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->limitations(static_cast<int>(i)));
    }
  }

  // repeated .Kinova.Api.Base.CartesianLimitation envelope_limitations = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->envelope_limitations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->envelope_limitations(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string application_data = 3;
  if (this->application_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->application_data());
  }

  // .Kinova.Api.Base.ProtectionZoneHandle handle = 1;
  if (this->has_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  // .Kinova.Api.Base.ZoneShape shape = 5;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // bool is_enabled = 4;
  if (this->is_enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtectionZone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ProtectionZone)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtectionZone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtectionZone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ProtectionZone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ProtectionZone)
    MergeFrom(*source);
  }
}

void ProtectionZone::MergeFrom(const ProtectionZone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ProtectionZone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  limitations_.MergeFrom(from.limitations_);
  envelope_limitations_.MergeFrom(from.envelope_limitations_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.application_data().size() > 0) {

    application_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_data_);
  }
  if (from.has_handle()) {
    mutable_handle()->::Kinova::Api::Base::ProtectionZoneHandle::MergeFrom(from.handle());
  }
  if (from.has_shape()) {
    mutable_shape()->::Kinova::Api::Base::ZoneShape::MergeFrom(from.shape());
  }
  if (from.is_enabled() != 0) {
    set_is_enabled(from.is_enabled());
  }
}

void ProtectionZone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ProtectionZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtectionZone::CopyFrom(const ProtectionZone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ProtectionZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtectionZone::IsInitialized() const {
  return true;
}

void ProtectionZone::Swap(ProtectionZone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtectionZone::InternalSwap(ProtectionZone* other) {
  using std::swap;
  CastToBase(&limitations_)->InternalSwap(CastToBase(&other->limitations_));
  CastToBase(&envelope_limitations_)->InternalSwap(CastToBase(&other->envelope_limitations_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  application_data_.Swap(&other->application_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(handle_, other->handle_);
  swap(shape_, other->shape_);
  swap(is_enabled_, other->is_enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProtectionZone::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProtectionZoneList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtectionZoneList::kProtectionZonesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtectionZoneList::ProtectionZoneList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ProtectionZoneList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ProtectionZoneList)
}
ProtectionZoneList::ProtectionZoneList(const ProtectionZoneList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      protection_zones_(from.protection_zones_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ProtectionZoneList)
}

void ProtectionZoneList::SharedCtor() {
}

ProtectionZoneList::~ProtectionZoneList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ProtectionZoneList)
  SharedDtor();
}

void ProtectionZoneList::SharedDtor() {
}

void ProtectionZoneList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProtectionZoneList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtectionZoneList& ProtectionZoneList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ProtectionZoneList.base);
  return *internal_default_instance();
}


void ProtectionZoneList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ProtectionZoneList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protection_zones_.Clear();
  _internal_metadata_.Clear();
}

bool ProtectionZoneList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ProtectionZoneList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.ProtectionZone protection_zones = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_protection_zones()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ProtectionZoneList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ProtectionZoneList)
  return false;
#undef DO_
}

void ProtectionZoneList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ProtectionZoneList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.ProtectionZone protection_zones = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->protection_zones_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->protection_zones(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ProtectionZoneList)
}

::google::protobuf::uint8* ProtectionZoneList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ProtectionZoneList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.ProtectionZone protection_zones = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->protection_zones_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->protection_zones(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ProtectionZoneList)
  return target;
}

size_t ProtectionZoneList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ProtectionZoneList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.ProtectionZone protection_zones = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->protection_zones_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->protection_zones(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtectionZoneList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ProtectionZoneList)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtectionZoneList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtectionZoneList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ProtectionZoneList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ProtectionZoneList)
    MergeFrom(*source);
  }
}

void ProtectionZoneList::MergeFrom(const ProtectionZoneList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ProtectionZoneList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  protection_zones_.MergeFrom(from.protection_zones_);
}

void ProtectionZoneList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ProtectionZoneList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtectionZoneList::CopyFrom(const ProtectionZoneList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ProtectionZoneList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtectionZoneList::IsInitialized() const {
  return true;
}

void ProtectionZoneList::Swap(ProtectionZoneList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtectionZoneList::InternalSwap(ProtectionZoneList* other) {
  using std::swap;
  CastToBase(&protection_zones_)->InternalSwap(CastToBase(&other->protection_zones_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProtectionZoneList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CartesianLimitation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CartesianLimitation::kTypeFieldNumber;
const int CartesianLimitation::kTranslationFieldNumber;
const int CartesianLimitation::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CartesianLimitation::CartesianLimitation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_CartesianLimitation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.CartesianLimitation)
}
CartesianLimitation::CartesianLimitation(const CartesianLimitation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&orientation_) -
    reinterpret_cast<char*>(&type_)) + sizeof(orientation_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.CartesianLimitation)
}

void CartesianLimitation::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&type_)) + sizeof(orientation_));
}

CartesianLimitation::~CartesianLimitation() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.CartesianLimitation)
  SharedDtor();
}

void CartesianLimitation::SharedDtor() {
}

void CartesianLimitation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CartesianLimitation::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CartesianLimitation& CartesianLimitation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_CartesianLimitation.base);
  return *internal_default_instance();
}


void CartesianLimitation::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.CartesianLimitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&type_)) + sizeof(orientation_));
  _internal_metadata_.Clear();
}

bool CartesianLimitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.CartesianLimitation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.LimitationType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Kinova::Api::Base::LimitationType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float translation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &translation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float orientation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.CartesianLimitation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.CartesianLimitation)
  return false;
#undef DO_
}

void CartesianLimitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.CartesianLimitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.LimitationType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // float translation = 2;
  if (this->translation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->translation(), output);
  }

  // float orientation = 3;
  if (this->orientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->orientation(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.CartesianLimitation)
}

::google::protobuf::uint8* CartesianLimitation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.CartesianLimitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.LimitationType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // float translation = 2;
  if (this->translation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->translation(), target);
  }

  // float orientation = 3;
  if (this->orientation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->orientation(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.CartesianLimitation)
  return target;
}

size_t CartesianLimitation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.CartesianLimitation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.LimitationType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // float translation = 2;
  if (this->translation() != 0) {
    total_size += 1 + 4;
  }

  // float orientation = 3;
  if (this->orientation() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CartesianLimitation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.CartesianLimitation)
  GOOGLE_DCHECK_NE(&from, this);
  const CartesianLimitation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CartesianLimitation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.CartesianLimitation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.CartesianLimitation)
    MergeFrom(*source);
  }
}

void CartesianLimitation::MergeFrom(const CartesianLimitation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.CartesianLimitation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.translation() != 0) {
    set_translation(from.translation());
  }
  if (from.orientation() != 0) {
    set_orientation(from.orientation());
  }
}

void CartesianLimitation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.CartesianLimitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CartesianLimitation::CopyFrom(const CartesianLimitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.CartesianLimitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartesianLimitation::IsInitialized() const {
  return true;
}

void CartesianLimitation::Swap(CartesianLimitation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CartesianLimitation::InternalSwap(CartesianLimitation* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(translation_, other->translation_);
  swap(orientation_, other->orientation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CartesianLimitation::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TwistLimitation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TwistLimitation::kLinearFieldNumber;
const int TwistLimitation::kAngularFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TwistLimitation::TwistLimitation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_TwistLimitation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.TwistLimitation)
}
TwistLimitation::TwistLimitation(const TwistLimitation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&linear_, &from.linear_,
    static_cast<size_t>(reinterpret_cast<char*>(&angular_) -
    reinterpret_cast<char*>(&linear_)) + sizeof(angular_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.TwistLimitation)
}

void TwistLimitation::SharedCtor() {
  ::memset(&linear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_) -
      reinterpret_cast<char*>(&linear_)) + sizeof(angular_));
}

TwistLimitation::~TwistLimitation() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.TwistLimitation)
  SharedDtor();
}

void TwistLimitation::SharedDtor() {
}

void TwistLimitation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TwistLimitation::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TwistLimitation& TwistLimitation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_TwistLimitation.base);
  return *internal_default_instance();
}


void TwistLimitation::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.TwistLimitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&linear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_) -
      reinterpret_cast<char*>(&linear_)) + sizeof(angular_));
  _internal_metadata_.Clear();
}

bool TwistLimitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.TwistLimitation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float linear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angular = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.TwistLimitation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.TwistLimitation)
  return false;
#undef DO_
}

void TwistLimitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.TwistLimitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float linear = 1;
  if (this->linear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->linear(), output);
  }

  // float angular = 2;
  if (this->angular() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angular(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.TwistLimitation)
}

::google::protobuf::uint8* TwistLimitation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.TwistLimitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float linear = 1;
  if (this->linear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->linear(), target);
  }

  // float angular = 2;
  if (this->angular() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angular(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.TwistLimitation)
  return target;
}

size_t TwistLimitation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.TwistLimitation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float linear = 1;
  if (this->linear() != 0) {
    total_size += 1 + 4;
  }

  // float angular = 2;
  if (this->angular() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TwistLimitation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.TwistLimitation)
  GOOGLE_DCHECK_NE(&from, this);
  const TwistLimitation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TwistLimitation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.TwistLimitation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.TwistLimitation)
    MergeFrom(*source);
  }
}

void TwistLimitation::MergeFrom(const TwistLimitation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.TwistLimitation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.linear() != 0) {
    set_linear(from.linear());
  }
  if (from.angular() != 0) {
    set_angular(from.angular());
  }
}

void TwistLimitation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.TwistLimitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwistLimitation::CopyFrom(const TwistLimitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.TwistLimitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwistLimitation::IsInitialized() const {
  return true;
}

void TwistLimitation::Swap(TwistLimitation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TwistLimitation::InternalSwap(TwistLimitation* other) {
  using std::swap;
  swap(linear_, other->linear_);
  swap(angular_, other->angular_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TwistLimitation::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WrenchLimitation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WrenchLimitation::kForceFieldNumber;
const int WrenchLimitation::kTorqueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WrenchLimitation::WrenchLimitation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_WrenchLimitation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.WrenchLimitation)
}
WrenchLimitation::WrenchLimitation(const WrenchLimitation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&force_, &from.force_,
    static_cast<size_t>(reinterpret_cast<char*>(&torque_) -
    reinterpret_cast<char*>(&force_)) + sizeof(torque_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.WrenchLimitation)
}

void WrenchLimitation::SharedCtor() {
  ::memset(&force_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&torque_) -
      reinterpret_cast<char*>(&force_)) + sizeof(torque_));
}

WrenchLimitation::~WrenchLimitation() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.WrenchLimitation)
  SharedDtor();
}

void WrenchLimitation::SharedDtor() {
}

void WrenchLimitation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WrenchLimitation::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WrenchLimitation& WrenchLimitation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_WrenchLimitation.base);
  return *internal_default_instance();
}


void WrenchLimitation::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.WrenchLimitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&force_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&torque_) -
      reinterpret_cast<char*>(&force_)) + sizeof(torque_));
  _internal_metadata_.Clear();
}

bool WrenchLimitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.WrenchLimitation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float force = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float torque = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.WrenchLimitation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.WrenchLimitation)
  return false;
#undef DO_
}

void WrenchLimitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.WrenchLimitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float force = 1;
  if (this->force() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->force(), output);
  }

  // float torque = 2;
  if (this->torque() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->torque(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.WrenchLimitation)
}

::google::protobuf::uint8* WrenchLimitation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.WrenchLimitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float force = 1;
  if (this->force() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->force(), target);
  }

  // float torque = 2;
  if (this->torque() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->torque(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.WrenchLimitation)
  return target;
}

size_t WrenchLimitation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.WrenchLimitation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float force = 1;
  if (this->force() != 0) {
    total_size += 1 + 4;
  }

  // float torque = 2;
  if (this->torque() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WrenchLimitation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.WrenchLimitation)
  GOOGLE_DCHECK_NE(&from, this);
  const WrenchLimitation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WrenchLimitation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.WrenchLimitation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.WrenchLimitation)
    MergeFrom(*source);
  }
}

void WrenchLimitation::MergeFrom(const WrenchLimitation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.WrenchLimitation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.force() != 0) {
    set_force(from.force());
  }
  if (from.torque() != 0) {
    set_torque(from.torque());
  }
}

void WrenchLimitation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.WrenchLimitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WrenchLimitation::CopyFrom(const WrenchLimitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.WrenchLimitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrenchLimitation::IsInitialized() const {
  return true;
}

void WrenchLimitation::Swap(WrenchLimitation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WrenchLimitation::InternalSwap(WrenchLimitation* other) {
  using std::swap;
  swap(force_, other->force_);
  swap(torque_, other->torque_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WrenchLimitation::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CartesianLimitationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CartesianLimitationList::kLimitationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CartesianLimitationList::CartesianLimitationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_CartesianLimitationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.CartesianLimitationList)
}
CartesianLimitationList::CartesianLimitationList(const CartesianLimitationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      limitations_(from.limitations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.CartesianLimitationList)
}

void CartesianLimitationList::SharedCtor() {
}

CartesianLimitationList::~CartesianLimitationList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.CartesianLimitationList)
  SharedDtor();
}

void CartesianLimitationList::SharedDtor() {
}

void CartesianLimitationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CartesianLimitationList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CartesianLimitationList& CartesianLimitationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_CartesianLimitationList.base);
  return *internal_default_instance();
}


void CartesianLimitationList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.CartesianLimitationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limitations_.Clear();
  _internal_metadata_.Clear();
}

bool CartesianLimitationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.CartesianLimitationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.CartesianLimitation limitations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_limitations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.CartesianLimitationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.CartesianLimitationList)
  return false;
#undef DO_
}

void CartesianLimitationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.CartesianLimitationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.CartesianLimitation limitations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limitations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->limitations(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.CartesianLimitationList)
}

::google::protobuf::uint8* CartesianLimitationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.CartesianLimitationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.CartesianLimitation limitations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limitations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->limitations(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.CartesianLimitationList)
  return target;
}

size_t CartesianLimitationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.CartesianLimitationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.CartesianLimitation limitations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->limitations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->limitations(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CartesianLimitationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.CartesianLimitationList)
  GOOGLE_DCHECK_NE(&from, this);
  const CartesianLimitationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CartesianLimitationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.CartesianLimitationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.CartesianLimitationList)
    MergeFrom(*source);
  }
}

void CartesianLimitationList::MergeFrom(const CartesianLimitationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.CartesianLimitationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  limitations_.MergeFrom(from.limitations_);
}

void CartesianLimitationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.CartesianLimitationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CartesianLimitationList::CopyFrom(const CartesianLimitationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.CartesianLimitationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartesianLimitationList::IsInitialized() const {
  return true;
}

void CartesianLimitationList::Swap(CartesianLimitationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CartesianLimitationList::InternalSwap(CartesianLimitationList* other) {
  using std::swap;
  CastToBase(&limitations_)->InternalSwap(CastToBase(&other->limitations_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CartesianLimitationList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JointLimitation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JointLimitation::kJointIdentifierFieldNumber;
const int JointLimitation::kTypeFieldNumber;
const int JointLimitation::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JointLimitation::JointLimitation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_JointLimitation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.JointLimitation)
}
JointLimitation::JointLimitation(const JointLimitation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&joint_identifier_, &from.joint_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&joint_identifier_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.JointLimitation)
}

void JointLimitation::SharedCtor() {
  ::memset(&joint_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&joint_identifier_)) + sizeof(value_));
}

JointLimitation::~JointLimitation() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.JointLimitation)
  SharedDtor();
}

void JointLimitation::SharedDtor() {
}

void JointLimitation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JointLimitation::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JointLimitation& JointLimitation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_JointLimitation.base);
  return *internal_default_instance();
}


void JointLimitation::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.JointLimitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&joint_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&joint_identifier_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

bool JointLimitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.JointLimitation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 joint_identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joint_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.LimitationType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Kinova::Api::Base::LimitationType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.JointLimitation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.JointLimitation)
  return false;
#undef DO_
}

void JointLimitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.JointLimitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 joint_identifier = 1;
  if (this->joint_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->joint_identifier(), output);
  }

  // .Kinova.Api.Base.LimitationType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // float value = 3;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.JointLimitation)
}

::google::protobuf::uint8* JointLimitation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.JointLimitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 joint_identifier = 1;
  if (this->joint_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->joint_identifier(), target);
  }

  // .Kinova.Api.Base.LimitationType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // float value = 3;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.JointLimitation)
  return target;
}

size_t JointLimitation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.JointLimitation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 joint_identifier = 1;
  if (this->joint_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->joint_identifier());
  }

  // .Kinova.Api.Base.LimitationType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // float value = 3;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointLimitation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.JointLimitation)
  GOOGLE_DCHECK_NE(&from, this);
  const JointLimitation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JointLimitation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.JointLimitation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.JointLimitation)
    MergeFrom(*source);
  }
}

void JointLimitation::MergeFrom(const JointLimitation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.JointLimitation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.joint_identifier() != 0) {
    set_joint_identifier(from.joint_identifier());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void JointLimitation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.JointLimitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointLimitation::CopyFrom(const JointLimitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.JointLimitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointLimitation::IsInitialized() const {
  return true;
}

void JointLimitation::Swap(JointLimitation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JointLimitation::InternalSwap(JointLimitation* other) {
  using std::swap;
  swap(joint_identifier_, other->joint_identifier_);
  swap(type_, other->type_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JointLimitation::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JointsLimitationsList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JointsLimitationsList::kJointsLimitationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JointsLimitationsList::JointsLimitationsList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_JointsLimitationsList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.JointsLimitationsList)
}
JointsLimitationsList::JointsLimitationsList(const JointsLimitationsList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      joints_limitations_(from.joints_limitations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.JointsLimitationsList)
}

void JointsLimitationsList::SharedCtor() {
}

JointsLimitationsList::~JointsLimitationsList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.JointsLimitationsList)
  SharedDtor();
}

void JointsLimitationsList::SharedDtor() {
}

void JointsLimitationsList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JointsLimitationsList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JointsLimitationsList& JointsLimitationsList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_JointsLimitationsList.base);
  return *internal_default_instance();
}


void JointsLimitationsList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.JointsLimitationsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joints_limitations_.Clear();
  _internal_metadata_.Clear();
}

bool JointsLimitationsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.JointsLimitationsList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.JointLimitation joints_limitations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_joints_limitations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.JointsLimitationsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.JointsLimitationsList)
  return false;
#undef DO_
}

void JointsLimitationsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.JointsLimitationsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.JointLimitation joints_limitations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->joints_limitations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->joints_limitations(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.JointsLimitationsList)
}

::google::protobuf::uint8* JointsLimitationsList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.JointsLimitationsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.JointLimitation joints_limitations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->joints_limitations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->joints_limitations(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.JointsLimitationsList)
  return target;
}

size_t JointsLimitationsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.JointsLimitationsList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.JointLimitation joints_limitations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->joints_limitations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->joints_limitations(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointsLimitationsList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.JointsLimitationsList)
  GOOGLE_DCHECK_NE(&from, this);
  const JointsLimitationsList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JointsLimitationsList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.JointsLimitationsList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.JointsLimitationsList)
    MergeFrom(*source);
  }
}

void JointsLimitationsList::MergeFrom(const JointsLimitationsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.JointsLimitationsList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joints_limitations_.MergeFrom(from.joints_limitations_);
}

void JointsLimitationsList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.JointsLimitationsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointsLimitationsList::CopyFrom(const JointsLimitationsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.JointsLimitationsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointsLimitationsList::IsInitialized() const {
  return true;
}

void JointsLimitationsList::Swap(JointsLimitationsList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JointsLimitationsList::InternalSwap(JointsLimitationsList* other) {
  using std::swap;
  CastToBase(&joints_limitations_)->InternalSwap(CastToBase(&other->joints_limitations_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JointsLimitationsList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Query::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_Query_default_instance_._instance.get_mutable()->start_timestamp_ = const_cast< ::Kinova::Api::Common::Timestamp*>(
      ::Kinova::Api::Common::Timestamp::internal_default_instance());
  ::Kinova::Api::Base::_Query_default_instance_._instance.get_mutable()->end_timestamp_ = const_cast< ::Kinova::Api::Common::Timestamp*>(
      ::Kinova::Api::Common::Timestamp::internal_default_instance());
}
void Query::clear_start_timestamp() {
  if (GetArenaNoVirtual() == NULL && start_timestamp_ != NULL) {
    delete start_timestamp_;
  }
  start_timestamp_ = NULL;
}
void Query::clear_end_timestamp() {
  if (GetArenaNoVirtual() == NULL && end_timestamp_ != NULL) {
    delete end_timestamp_;
  }
  end_timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Query::kStartTimestampFieldNumber;
const int Query::kEndTimestampFieldNumber;
const int Query::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Query::Query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Query.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Query)
}
Query::Query(const Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_start_timestamp()) {
    start_timestamp_ = new ::Kinova::Api::Common::Timestamp(*from.start_timestamp_);
  } else {
    start_timestamp_ = NULL;
  }
  if (from.has_end_timestamp()) {
    end_timestamp_ = new ::Kinova::Api::Common::Timestamp(*from.end_timestamp_);
  } else {
    end_timestamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Query)
}

void Query::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_timestamp_) -
      reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Query)
  SharedDtor();
}

void Query::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_timestamp_;
  if (this != internal_default_instance()) delete end_timestamp_;
}

void Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Query::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Query& Query::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Query.base);
  return *internal_default_instance();
}


void Query::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && start_timestamp_ != NULL) {
    delete start_timestamp_;
  }
  start_timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_timestamp_ != NULL) {
    delete end_timestamp_;
  }
  end_timestamp_ = NULL;
  _internal_metadata_.Clear();
}

bool Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Common.Timestamp start_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Timestamp end_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.Query.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Query)
  return false;
#undef DO_
}

void Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.Timestamp start_timestamp = 1;
  if (this->has_start_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_start_timestamp(), output);
  }

  // .Kinova.Api.Common.Timestamp end_timestamp = 2;
  if (this->has_end_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_end_timestamp(), output);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.Query.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Query)
}

::google::protobuf::uint8* Query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.Timestamp start_timestamp = 1;
  if (this->has_start_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_start_timestamp(), deterministic, target);
  }

  // .Kinova.Api.Common.Timestamp end_timestamp = 2;
  if (this->has_end_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_end_timestamp(), deterministic, target);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.Query.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Query)
  return target;
}

size_t Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Query)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // .Kinova.Api.Common.Timestamp start_timestamp = 1;
  if (this->has_start_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_timestamp_);
  }

  // .Kinova.Api.Common.Timestamp end_timestamp = 2;
  if (this->has_end_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Query* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Query)
    MergeFrom(*source);
  }
}

void Query::MergeFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_start_timestamp()) {
    mutable_start_timestamp()->::Kinova::Api::Common::Timestamp::MergeFrom(from.start_timestamp());
  }
  if (from.has_end_timestamp()) {
    mutable_end_timestamp()->::Kinova::Api::Common::Timestamp::MergeFrom(from.end_timestamp());
  }
}

void Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query::CopyFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  return true;
}

void Query::Swap(Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Query::InternalSwap(Query* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_timestamp_, other->start_timestamp_);
  swap(end_timestamp_, other->end_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Query::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigurationChangeNotification::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ConfigurationChangeNotification_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::Kinova::Api::Common::Timestamp*>(
      ::Kinova::Api::Common::Timestamp::internal_default_instance());
  ::Kinova::Api::Base::_ConfigurationChangeNotification_default_instance_._instance.get_mutable()->user_handle_ = const_cast< ::Kinova::Api::Common::UserProfileHandle*>(
      ::Kinova::Api::Common::UserProfileHandle::internal_default_instance());
  ::Kinova::Api::Base::_ConfigurationChangeNotification_default_instance_.sequence_handle_ = const_cast< ::Kinova::Api::Base::SequenceHandle*>(
      ::Kinova::Api::Base::SequenceHandle::internal_default_instance());
  ::Kinova::Api::Base::_ConfigurationChangeNotification_default_instance_.action_handle_ = const_cast< ::Kinova::Api::Base::ActionHandle*>(
      ::Kinova::Api::Base::ActionHandle::internal_default_instance());
  ::Kinova::Api::Base::_ConfigurationChangeNotification_default_instance_.mapping_handle_ = const_cast< ::Kinova::Api::Base::MappingHandle*>(
      ::Kinova::Api::Base::MappingHandle::internal_default_instance());
  ::Kinova::Api::Base::_ConfigurationChangeNotification_default_instance_.map_group_handle_ = const_cast< ::Kinova::Api::Base::MapGroupHandle*>(
      ::Kinova::Api::Base::MapGroupHandle::internal_default_instance());
  ::Kinova::Api::Base::_ConfigurationChangeNotification_default_instance_.map_handle_ = const_cast< ::Kinova::Api::Base::MapHandle*>(
      ::Kinova::Api::Base::MapHandle::internal_default_instance());
  ::Kinova::Api::Base::_ConfigurationChangeNotification_default_instance_.user_profile_handle_ = const_cast< ::Kinova::Api::Common::UserProfileHandle*>(
      ::Kinova::Api::Common::UserProfileHandle::internal_default_instance());
  ::Kinova::Api::Base::_ConfigurationChangeNotification_default_instance_.protection_zone_handle_ = const_cast< ::Kinova::Api::Base::ProtectionZoneHandle*>(
      ::Kinova::Api::Base::ProtectionZoneHandle::internal_default_instance());
  ::Kinova::Api::Base::_ConfigurationChangeNotification_default_instance_.safety_handle_ = const_cast< ::Kinova::Api::Common::SafetyHandle*>(
      ::Kinova::Api::Common::SafetyHandle::internal_default_instance());
  ::Kinova::Api::Base::_ConfigurationChangeNotification_default_instance_.network_handle_ = const_cast< ::Kinova::Api::Base::NetworkHandle*>(
      ::Kinova::Api::Base::NetworkHandle::internal_default_instance());
  ::Kinova::Api::Base::_ConfigurationChangeNotification_default_instance_.ssid_ = const_cast< ::Kinova::Api::Base::Ssid*>(
      ::Kinova::Api::Base::Ssid::internal_default_instance());
  ::Kinova::Api::Base::_ConfigurationChangeNotification_default_instance_.controller_handle_ = const_cast< ::Kinova::Api::Base::ControllerHandle*>(
      ::Kinova::Api::Base::ControllerHandle::internal_default_instance());
  ::Kinova::Api::Base::_ConfigurationChangeNotification_default_instance_._instance.get_mutable()->connection_ = const_cast< ::Kinova::Api::Common::Connection*>(
      ::Kinova::Api::Common::Connection::internal_default_instance());
}
void ConfigurationChangeNotification::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
void ConfigurationChangeNotification::clear_user_handle() {
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
}
void ConfigurationChangeNotification::set_allocated_sequence_handle(::Kinova::Api::Base::SequenceHandle* sequence_handle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_configuration_change();
  if (sequence_handle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sequence_handle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sequence_handle, submessage_arena);
    }
    set_has_sequence_handle();
    configuration_change_.sequence_handle_ = sequence_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.ConfigurationChangeNotification.sequence_handle)
}
void ConfigurationChangeNotification::set_allocated_action_handle(::Kinova::Api::Base::ActionHandle* action_handle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_configuration_change();
  if (action_handle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      action_handle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, action_handle, submessage_arena);
    }
    set_has_action_handle();
    configuration_change_.action_handle_ = action_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.ConfigurationChangeNotification.action_handle)
}
void ConfigurationChangeNotification::set_allocated_mapping_handle(::Kinova::Api::Base::MappingHandle* mapping_handle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_configuration_change();
  if (mapping_handle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mapping_handle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mapping_handle, submessage_arena);
    }
    set_has_mapping_handle();
    configuration_change_.mapping_handle_ = mapping_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.ConfigurationChangeNotification.mapping_handle)
}
void ConfigurationChangeNotification::set_allocated_map_group_handle(::Kinova::Api::Base::MapGroupHandle* map_group_handle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_configuration_change();
  if (map_group_handle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map_group_handle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map_group_handle, submessage_arena);
    }
    set_has_map_group_handle();
    configuration_change_.map_group_handle_ = map_group_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.ConfigurationChangeNotification.map_group_handle)
}
void ConfigurationChangeNotification::set_allocated_map_handle(::Kinova::Api::Base::MapHandle* map_handle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_configuration_change();
  if (map_handle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map_handle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map_handle, submessage_arena);
    }
    set_has_map_handle();
    configuration_change_.map_handle_ = map_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.ConfigurationChangeNotification.map_handle)
}
void ConfigurationChangeNotification::set_allocated_user_profile_handle(::Kinova::Api::Common::UserProfileHandle* user_profile_handle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_configuration_change();
  if (user_profile_handle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_profile_handle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_profile_handle, submessage_arena);
    }
    set_has_user_profile_handle();
    configuration_change_.user_profile_handle_ = user_profile_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.ConfigurationChangeNotification.user_profile_handle)
}
void ConfigurationChangeNotification::clear_user_profile_handle() {
  if (has_user_profile_handle()) {
    delete configuration_change_.user_profile_handle_;
    clear_has_configuration_change();
  }
}
void ConfigurationChangeNotification::set_allocated_protection_zone_handle(::Kinova::Api::Base::ProtectionZoneHandle* protection_zone_handle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_configuration_change();
  if (protection_zone_handle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      protection_zone_handle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, protection_zone_handle, submessage_arena);
    }
    set_has_protection_zone_handle();
    configuration_change_.protection_zone_handle_ = protection_zone_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.ConfigurationChangeNotification.protection_zone_handle)
}
void ConfigurationChangeNotification::set_allocated_safety_handle(::Kinova::Api::Common::SafetyHandle* safety_handle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_configuration_change();
  if (safety_handle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      safety_handle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, safety_handle, submessage_arena);
    }
    set_has_safety_handle();
    configuration_change_.safety_handle_ = safety_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.ConfigurationChangeNotification.safety_handle)
}
void ConfigurationChangeNotification::clear_safety_handle() {
  if (has_safety_handle()) {
    delete configuration_change_.safety_handle_;
    clear_has_configuration_change();
  }
}
void ConfigurationChangeNotification::set_allocated_network_handle(::Kinova::Api::Base::NetworkHandle* network_handle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_configuration_change();
  if (network_handle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      network_handle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, network_handle, submessage_arena);
    }
    set_has_network_handle();
    configuration_change_.network_handle_ = network_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.ConfigurationChangeNotification.network_handle)
}
void ConfigurationChangeNotification::set_allocated_ssid(::Kinova::Api::Base::Ssid* ssid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_configuration_change();
  if (ssid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ssid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ssid, submessage_arena);
    }
    set_has_ssid();
    configuration_change_.ssid_ = ssid;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.ConfigurationChangeNotification.ssid)
}
void ConfigurationChangeNotification::set_allocated_controller_handle(::Kinova::Api::Base::ControllerHandle* controller_handle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_configuration_change();
  if (controller_handle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      controller_handle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controller_handle, submessage_arena);
    }
    set_has_controller_handle();
    configuration_change_.controller_handle_ = controller_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.ConfigurationChangeNotification.controller_handle)
}
void ConfigurationChangeNotification::clear_connection() {
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigurationChangeNotification::kEventFieldNumber;
const int ConfigurationChangeNotification::kTimestampFieldNumber;
const int ConfigurationChangeNotification::kUserHandleFieldNumber;
const int ConfigurationChangeNotification::kSequenceHandleFieldNumber;
const int ConfigurationChangeNotification::kActionHandleFieldNumber;
const int ConfigurationChangeNotification::kMappingHandleFieldNumber;
const int ConfigurationChangeNotification::kMapGroupHandleFieldNumber;
const int ConfigurationChangeNotification::kMapHandleFieldNumber;
const int ConfigurationChangeNotification::kUserProfileHandleFieldNumber;
const int ConfigurationChangeNotification::kProtectionZoneHandleFieldNumber;
const int ConfigurationChangeNotification::kSafetyHandleFieldNumber;
const int ConfigurationChangeNotification::kNetworkHandleFieldNumber;
const int ConfigurationChangeNotification::kSsidFieldNumber;
const int ConfigurationChangeNotification::kControllerHandleFieldNumber;
const int ConfigurationChangeNotification::kConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigurationChangeNotification::ConfigurationChangeNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ConfigurationChangeNotification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ConfigurationChangeNotification)
}
ConfigurationChangeNotification::ConfigurationChangeNotification(const ConfigurationChangeNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::Kinova::Api::Common::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_user_handle()) {
    user_handle_ = new ::Kinova::Api::Common::UserProfileHandle(*from.user_handle_);
  } else {
    user_handle_ = NULL;
  }
  if (from.has_connection()) {
    connection_ = new ::Kinova::Api::Common::Connection(*from.connection_);
  } else {
    connection_ = NULL;
  }
  event_ = from.event_;
  clear_has_configuration_change();
  switch (from.configuration_change_case()) {
    case kSequenceHandle: {
      mutable_sequence_handle()->::Kinova::Api::Base::SequenceHandle::MergeFrom(from.sequence_handle());
      break;
    }
    case kActionHandle: {
      mutable_action_handle()->::Kinova::Api::Base::ActionHandle::MergeFrom(from.action_handle());
      break;
    }
    case kMappingHandle: {
      mutable_mapping_handle()->::Kinova::Api::Base::MappingHandle::MergeFrom(from.mapping_handle());
      break;
    }
    case kMapGroupHandle: {
      mutable_map_group_handle()->::Kinova::Api::Base::MapGroupHandle::MergeFrom(from.map_group_handle());
      break;
    }
    case kMapHandle: {
      mutable_map_handle()->::Kinova::Api::Base::MapHandle::MergeFrom(from.map_handle());
      break;
    }
    case kUserProfileHandle: {
      mutable_user_profile_handle()->::Kinova::Api::Common::UserProfileHandle::MergeFrom(from.user_profile_handle());
      break;
    }
    case kProtectionZoneHandle: {
      mutable_protection_zone_handle()->::Kinova::Api::Base::ProtectionZoneHandle::MergeFrom(from.protection_zone_handle());
      break;
    }
    case kSafetyHandle: {
      mutable_safety_handle()->::Kinova::Api::Common::SafetyHandle::MergeFrom(from.safety_handle());
      break;
    }
    case kNetworkHandle: {
      mutable_network_handle()->::Kinova::Api::Base::NetworkHandle::MergeFrom(from.network_handle());
      break;
    }
    case kSsid: {
      mutable_ssid()->::Kinova::Api::Base::Ssid::MergeFrom(from.ssid());
      break;
    }
    case kControllerHandle: {
      mutable_controller_handle()->::Kinova::Api::Base::ControllerHandle::MergeFrom(from.controller_handle());
      break;
    }
    case CONFIGURATION_CHANGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ConfigurationChangeNotification)
}

void ConfigurationChangeNotification::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(event_));
  clear_has_configuration_change();
}

ConfigurationChangeNotification::~ConfigurationChangeNotification() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ConfigurationChangeNotification)
  SharedDtor();
}

void ConfigurationChangeNotification::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete user_handle_;
  if (this != internal_default_instance()) delete connection_;
  if (has_configuration_change()) {
    clear_configuration_change();
  }
}

void ConfigurationChangeNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigurationChangeNotification::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigurationChangeNotification& ConfigurationChangeNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ConfigurationChangeNotification.base);
  return *internal_default_instance();
}


void ConfigurationChangeNotification::clear_configuration_change() {
// @@protoc_insertion_point(one_of_clear_start:Kinova.Api.Base.ConfigurationChangeNotification)
  switch (configuration_change_case()) {
    case kSequenceHandle: {
      delete configuration_change_.sequence_handle_;
      break;
    }
    case kActionHandle: {
      delete configuration_change_.action_handle_;
      break;
    }
    case kMappingHandle: {
      delete configuration_change_.mapping_handle_;
      break;
    }
    case kMapGroupHandle: {
      delete configuration_change_.map_group_handle_;
      break;
    }
    case kMapHandle: {
      delete configuration_change_.map_handle_;
      break;
    }
    case kUserProfileHandle: {
      delete configuration_change_.user_profile_handle_;
      break;
    }
    case kProtectionZoneHandle: {
      delete configuration_change_.protection_zone_handle_;
      break;
    }
    case kSafetyHandle: {
      delete configuration_change_.safety_handle_;
      break;
    }
    case kNetworkHandle: {
      delete configuration_change_.network_handle_;
      break;
    }
    case kSsid: {
      delete configuration_change_.ssid_;
      break;
    }
    case kControllerHandle: {
      delete configuration_change_.controller_handle_;
      break;
    }
    case CONFIGURATION_CHANGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIGURATION_CHANGE_NOT_SET;
}


void ConfigurationChangeNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ConfigurationChangeNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
  event_ = 0;
  clear_configuration_change();
  _internal_metadata_.Clear();
}

bool ConfigurationChangeNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ConfigurationChangeNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ConfigurationNotificationEvent event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event(static_cast< ::Kinova::Api::Base::ConfigurationNotificationEvent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Timestamp timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.SequenceHandle sequence_handle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sequence_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.ActionHandle action_handle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_action_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.MappingHandle mapping_handle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mapping_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.MapGroupHandle map_group_handle = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_group_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.MapHandle map_handle = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.UserProfileHandle user_profile_handle = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_profile_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.ProtectionZoneHandle protection_zone_handle = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_protection_zone_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.SafetyHandle safety_handle = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_safety_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.NetworkHandle network_handle = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_network_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.Ssid ssid = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Connection connection = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.ControllerHandle controller_handle = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ConfigurationChangeNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ConfigurationChangeNotification)
  return false;
#undef DO_
}

void ConfigurationChangeNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ConfigurationChangeNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ConfigurationNotificationEvent event = 1;
  if (this->event() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event(), output);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_timestamp(), output);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
  if (this->has_user_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_user_handle(), output);
  }

  // .Kinova.Api.Base.SequenceHandle sequence_handle = 4;
  if (has_sequence_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_sequence_handle(), output);
  }

  // .Kinova.Api.Base.ActionHandle action_handle = 5;
  if (has_action_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_action_handle(), output);
  }

  // .Kinova.Api.Base.MappingHandle mapping_handle = 6;
  if (has_mapping_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_mapping_handle(), output);
  }

  // .Kinova.Api.Base.MapGroupHandle map_group_handle = 7;
  if (has_map_group_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_map_group_handle(), output);
  }

  // .Kinova.Api.Base.MapHandle map_handle = 8;
  if (has_map_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_map_handle(), output);
  }

  // .Kinova.Api.Common.UserProfileHandle user_profile_handle = 9;
  if (has_user_profile_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_user_profile_handle(), output);
  }

  // .Kinova.Api.Base.ProtectionZoneHandle protection_zone_handle = 10;
  if (has_protection_zone_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_protection_zone_handle(), output);
  }

  // .Kinova.Api.Common.SafetyHandle safety_handle = 11;
  if (has_safety_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_safety_handle(), output);
  }

  // .Kinova.Api.Base.NetworkHandle network_handle = 12;
  if (has_network_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_network_handle(), output);
  }

  // .Kinova.Api.Base.Ssid ssid = 14;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_ssid(), output);
  }

  // .Kinova.Api.Common.Connection connection = 15;
  if (this->has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_connection(), output);
  }

  // .Kinova.Api.Base.ControllerHandle controller_handle = 16;
  if (has_controller_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_controller_handle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ConfigurationChangeNotification)
}

::google::protobuf::uint8* ConfigurationChangeNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ConfigurationChangeNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ConfigurationNotificationEvent event = 1;
  if (this->event() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event(), target);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_timestamp(), deterministic, target);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
  if (this->has_user_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_user_handle(), deterministic, target);
  }

  // .Kinova.Api.Base.SequenceHandle sequence_handle = 4;
  if (has_sequence_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_sequence_handle(), deterministic, target);
  }

  // .Kinova.Api.Base.ActionHandle action_handle = 5;
  if (has_action_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_action_handle(), deterministic, target);
  }

  // .Kinova.Api.Base.MappingHandle mapping_handle = 6;
  if (has_mapping_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_mapping_handle(), deterministic, target);
  }

  // .Kinova.Api.Base.MapGroupHandle map_group_handle = 7;
  if (has_map_group_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_map_group_handle(), deterministic, target);
  }

  // .Kinova.Api.Base.MapHandle map_handle = 8;
  if (has_map_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_map_handle(), deterministic, target);
  }

  // .Kinova.Api.Common.UserProfileHandle user_profile_handle = 9;
  if (has_user_profile_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_user_profile_handle(), deterministic, target);
  }

  // .Kinova.Api.Base.ProtectionZoneHandle protection_zone_handle = 10;
  if (has_protection_zone_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_protection_zone_handle(), deterministic, target);
  }

  // .Kinova.Api.Common.SafetyHandle safety_handle = 11;
  if (has_safety_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_safety_handle(), deterministic, target);
  }

  // .Kinova.Api.Base.NetworkHandle network_handle = 12;
  if (has_network_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_network_handle(), deterministic, target);
  }

  // .Kinova.Api.Base.Ssid ssid = 14;
  if (has_ssid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_ssid(), deterministic, target);
  }

  // .Kinova.Api.Common.Connection connection = 15;
  if (this->has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_connection(), deterministic, target);
  }

  // .Kinova.Api.Base.ControllerHandle controller_handle = 16;
  if (has_controller_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_controller_handle(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ConfigurationChangeNotification)
  return target;
}

size_t ConfigurationChangeNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ConfigurationChangeNotification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
  if (this->has_user_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_handle_);
  }

  // .Kinova.Api.Common.Connection connection = 15;
  if (this->has_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *connection_);
  }

  // .Kinova.Api.Base.ConfigurationNotificationEvent event = 1;
  if (this->event() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
  }

  switch (configuration_change_case()) {
    // .Kinova.Api.Base.SequenceHandle sequence_handle = 4;
    case kSequenceHandle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *configuration_change_.sequence_handle_);
      break;
    }
    // .Kinova.Api.Base.ActionHandle action_handle = 5;
    case kActionHandle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *configuration_change_.action_handle_);
      break;
    }
    // .Kinova.Api.Base.MappingHandle mapping_handle = 6;
    case kMappingHandle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *configuration_change_.mapping_handle_);
      break;
    }
    // .Kinova.Api.Base.MapGroupHandle map_group_handle = 7;
    case kMapGroupHandle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *configuration_change_.map_group_handle_);
      break;
    }
    // .Kinova.Api.Base.MapHandle map_handle = 8;
    case kMapHandle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *configuration_change_.map_handle_);
      break;
    }
    // .Kinova.Api.Common.UserProfileHandle user_profile_handle = 9;
    case kUserProfileHandle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *configuration_change_.user_profile_handle_);
      break;
    }
    // .Kinova.Api.Base.ProtectionZoneHandle protection_zone_handle = 10;
    case kProtectionZoneHandle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *configuration_change_.protection_zone_handle_);
      break;
    }
    // .Kinova.Api.Common.SafetyHandle safety_handle = 11;
    case kSafetyHandle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *configuration_change_.safety_handle_);
      break;
    }
    // .Kinova.Api.Base.NetworkHandle network_handle = 12;
    case kNetworkHandle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *configuration_change_.network_handle_);
      break;
    }
    // .Kinova.Api.Base.Ssid ssid = 14;
    case kSsid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *configuration_change_.ssid_);
      break;
    }
    // .Kinova.Api.Base.ControllerHandle controller_handle = 16;
    case kControllerHandle: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *configuration_change_.controller_handle_);
      break;
    }
    case CONFIGURATION_CHANGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationChangeNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ConfigurationChangeNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigurationChangeNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigurationChangeNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ConfigurationChangeNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ConfigurationChangeNotification)
    MergeFrom(*source);
  }
}

void ConfigurationChangeNotification::MergeFrom(const ConfigurationChangeNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ConfigurationChangeNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    mutable_timestamp()->::Kinova::Api::Common::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_user_handle()) {
    mutable_user_handle()->::Kinova::Api::Common::UserProfileHandle::MergeFrom(from.user_handle());
  }
  if (from.has_connection()) {
    mutable_connection()->::Kinova::Api::Common::Connection::MergeFrom(from.connection());
  }
  if (from.event() != 0) {
    set_event(from.event());
  }
  switch (from.configuration_change_case()) {
    case kSequenceHandle: {
      mutable_sequence_handle()->::Kinova::Api::Base::SequenceHandle::MergeFrom(from.sequence_handle());
      break;
    }
    case kActionHandle: {
      mutable_action_handle()->::Kinova::Api::Base::ActionHandle::MergeFrom(from.action_handle());
      break;
    }
    case kMappingHandle: {
      mutable_mapping_handle()->::Kinova::Api::Base::MappingHandle::MergeFrom(from.mapping_handle());
      break;
    }
    case kMapGroupHandle: {
      mutable_map_group_handle()->::Kinova::Api::Base::MapGroupHandle::MergeFrom(from.map_group_handle());
      break;
    }
    case kMapHandle: {
      mutable_map_handle()->::Kinova::Api::Base::MapHandle::MergeFrom(from.map_handle());
      break;
    }
    case kUserProfileHandle: {
      mutable_user_profile_handle()->::Kinova::Api::Common::UserProfileHandle::MergeFrom(from.user_profile_handle());
      break;
    }
    case kProtectionZoneHandle: {
      mutable_protection_zone_handle()->::Kinova::Api::Base::ProtectionZoneHandle::MergeFrom(from.protection_zone_handle());
      break;
    }
    case kSafetyHandle: {
      mutable_safety_handle()->::Kinova::Api::Common::SafetyHandle::MergeFrom(from.safety_handle());
      break;
    }
    case kNetworkHandle: {
      mutable_network_handle()->::Kinova::Api::Base::NetworkHandle::MergeFrom(from.network_handle());
      break;
    }
    case kSsid: {
      mutable_ssid()->::Kinova::Api::Base::Ssid::MergeFrom(from.ssid());
      break;
    }
    case kControllerHandle: {
      mutable_controller_handle()->::Kinova::Api::Base::ControllerHandle::MergeFrom(from.controller_handle());
      break;
    }
    case CONFIGURATION_CHANGE_NOT_SET: {
      break;
    }
  }
}

void ConfigurationChangeNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ConfigurationChangeNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationChangeNotification::CopyFrom(const ConfigurationChangeNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ConfigurationChangeNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationChangeNotification::IsInitialized() const {
  return true;
}

void ConfigurationChangeNotification::Swap(ConfigurationChangeNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigurationChangeNotification::InternalSwap(ConfigurationChangeNotification* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(user_handle_, other->user_handle_);
  swap(connection_, other->connection_);
  swap(event_, other->event_);
  swap(configuration_change_, other->configuration_change_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigurationChangeNotification::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MappingInfoNotification::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_MappingInfoNotification_default_instance_._instance.get_mutable()->active_map_handle_ = const_cast< ::Kinova::Api::Base::MapHandle*>(
      ::Kinova::Api::Base::MapHandle::internal_default_instance());
  ::Kinova::Api::Base::_MappingInfoNotification_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::Kinova::Api::Common::Timestamp*>(
      ::Kinova::Api::Common::Timestamp::internal_default_instance());
  ::Kinova::Api::Base::_MappingInfoNotification_default_instance_._instance.get_mutable()->user_handle_ = const_cast< ::Kinova::Api::Common::UserProfileHandle*>(
      ::Kinova::Api::Common::UserProfileHandle::internal_default_instance());
  ::Kinova::Api::Base::_MappingInfoNotification_default_instance_._instance.get_mutable()->connection_ = const_cast< ::Kinova::Api::Common::Connection*>(
      ::Kinova::Api::Common::Connection::internal_default_instance());
  ::Kinova::Api::Base::_MappingInfoNotification_default_instance_._instance.get_mutable()->mapping_handle_ = const_cast< ::Kinova::Api::Base::MappingHandle*>(
      ::Kinova::Api::Base::MappingHandle::internal_default_instance());
}
void MappingInfoNotification::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
void MappingInfoNotification::clear_user_handle() {
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
}
void MappingInfoNotification::clear_connection() {
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MappingInfoNotification::kControllerIdentifierFieldNumber;
const int MappingInfoNotification::kActiveMapHandleFieldNumber;
const int MappingInfoNotification::kTimestampFieldNumber;
const int MappingInfoNotification::kUserHandleFieldNumber;
const int MappingInfoNotification::kConnectionFieldNumber;
const int MappingInfoNotification::kMappingHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MappingInfoNotification::MappingInfoNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_MappingInfoNotification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.MappingInfoNotification)
}
MappingInfoNotification::MappingInfoNotification(const MappingInfoNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_active_map_handle()) {
    active_map_handle_ = new ::Kinova::Api::Base::MapHandle(*from.active_map_handle_);
  } else {
    active_map_handle_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::Kinova::Api::Common::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_user_handle()) {
    user_handle_ = new ::Kinova::Api::Common::UserProfileHandle(*from.user_handle_);
  } else {
    user_handle_ = NULL;
  }
  if (from.has_connection()) {
    connection_ = new ::Kinova::Api::Common::Connection(*from.connection_);
  } else {
    connection_ = NULL;
  }
  if (from.has_mapping_handle()) {
    mapping_handle_ = new ::Kinova::Api::Base::MappingHandle(*from.mapping_handle_);
  } else {
    mapping_handle_ = NULL;
  }
  controller_identifier_ = from.controller_identifier_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.MappingInfoNotification)
}

void MappingInfoNotification::SharedCtor() {
  ::memset(&active_map_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_identifier_) -
      reinterpret_cast<char*>(&active_map_handle_)) + sizeof(controller_identifier_));
}

MappingInfoNotification::~MappingInfoNotification() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.MappingInfoNotification)
  SharedDtor();
}

void MappingInfoNotification::SharedDtor() {
  if (this != internal_default_instance()) delete active_map_handle_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete user_handle_;
  if (this != internal_default_instance()) delete connection_;
  if (this != internal_default_instance()) delete mapping_handle_;
}

void MappingInfoNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MappingInfoNotification::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MappingInfoNotification& MappingInfoNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_MappingInfoNotification.base);
  return *internal_default_instance();
}


void MappingInfoNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.MappingInfoNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && active_map_handle_ != NULL) {
    delete active_map_handle_;
  }
  active_map_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
  if (GetArenaNoVirtual() == NULL && mapping_handle_ != NULL) {
    delete mapping_handle_;
  }
  mapping_handle_ = NULL;
  controller_identifier_ = 0u;
  _internal_metadata_.Clear();
}

bool MappingInfoNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.MappingInfoNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 controller_identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.MapHandle active_map_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_active_map_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Timestamp timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Connection connection = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.MappingHandle mapping_handle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mapping_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.MappingInfoNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.MappingInfoNotification)
  return false;
#undef DO_
}

void MappingInfoNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.MappingInfoNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controller_identifier = 1;
  if (this->controller_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->controller_identifier(), output);
  }

  // .Kinova.Api.Base.MapHandle active_map_handle = 2;
  if (this->has_active_map_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_active_map_handle(), output);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_timestamp(), output);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_user_handle(), output);
  }

  // .Kinova.Api.Common.Connection connection = 5;
  if (this->has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_connection(), output);
  }

  // .Kinova.Api.Base.MappingHandle mapping_handle = 6;
  if (this->has_mapping_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_mapping_handle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.MappingInfoNotification)
}

::google::protobuf::uint8* MappingInfoNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.MappingInfoNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controller_identifier = 1;
  if (this->controller_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->controller_identifier(), target);
  }

  // .Kinova.Api.Base.MapHandle active_map_handle = 2;
  if (this->has_active_map_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_active_map_handle(), deterministic, target);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_timestamp(), deterministic, target);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_user_handle(), deterministic, target);
  }

  // .Kinova.Api.Common.Connection connection = 5;
  if (this->has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_connection(), deterministic, target);
  }

  // .Kinova.Api.Base.MappingHandle mapping_handle = 6;
  if (this->has_mapping_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_mapping_handle(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.MappingInfoNotification)
  return target;
}

size_t MappingInfoNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.MappingInfoNotification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.MapHandle active_map_handle = 2;
  if (this->has_active_map_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *active_map_handle_);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_handle_);
  }

  // .Kinova.Api.Common.Connection connection = 5;
  if (this->has_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *connection_);
  }

  // .Kinova.Api.Base.MappingHandle mapping_handle = 6;
  if (this->has_mapping_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mapping_handle_);
  }

  // uint32 controller_identifier = 1;
  if (this->controller_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_identifier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MappingInfoNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.MappingInfoNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const MappingInfoNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MappingInfoNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.MappingInfoNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.MappingInfoNotification)
    MergeFrom(*source);
  }
}

void MappingInfoNotification::MergeFrom(const MappingInfoNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.MappingInfoNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_active_map_handle()) {
    mutable_active_map_handle()->::Kinova::Api::Base::MapHandle::MergeFrom(from.active_map_handle());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::Kinova::Api::Common::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_user_handle()) {
    mutable_user_handle()->::Kinova::Api::Common::UserProfileHandle::MergeFrom(from.user_handle());
  }
  if (from.has_connection()) {
    mutable_connection()->::Kinova::Api::Common::Connection::MergeFrom(from.connection());
  }
  if (from.has_mapping_handle()) {
    mutable_mapping_handle()->::Kinova::Api::Base::MappingHandle::MergeFrom(from.mapping_handle());
  }
  if (from.controller_identifier() != 0) {
    set_controller_identifier(from.controller_identifier());
  }
}

void MappingInfoNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.MappingInfoNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MappingInfoNotification::CopyFrom(const MappingInfoNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.MappingInfoNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MappingInfoNotification::IsInitialized() const {
  return true;
}

void MappingInfoNotification::Swap(MappingInfoNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MappingInfoNotification::InternalSwap(MappingInfoNotification* other) {
  using std::swap;
  swap(active_map_handle_, other->active_map_handle_);
  swap(timestamp_, other->timestamp_);
  swap(user_handle_, other->user_handle_);
  swap(connection_, other->connection_);
  swap(mapping_handle_, other->mapping_handle_);
  swap(controller_identifier_, other->controller_identifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MappingInfoNotification::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControlModeInformation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlModeInformation::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlModeInformation::ControlModeInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ControlModeInformation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ControlModeInformation)
}
ControlModeInformation::ControlModeInformation(const ControlModeInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ControlModeInformation)
}

void ControlModeInformation::SharedCtor() {
  mode_ = 0;
}

ControlModeInformation::~ControlModeInformation() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ControlModeInformation)
  SharedDtor();
}

void ControlModeInformation::SharedDtor() {
}

void ControlModeInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControlModeInformation::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControlModeInformation& ControlModeInformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ControlModeInformation.base);
  return *internal_default_instance();
}


void ControlModeInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ControlModeInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_ = 0;
  _internal_metadata_.Clear();
}

bool ControlModeInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ControlModeInformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ControlMode mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::Kinova::Api::Base::ControlMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ControlModeInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ControlModeInformation)
  return false;
#undef DO_
}

void ControlModeInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ControlModeInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ControlMode mode = 1;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ControlModeInformation)
}

::google::protobuf::uint8* ControlModeInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ControlModeInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ControlMode mode = 1;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ControlModeInformation)
  return target;
}

size_t ControlModeInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ControlModeInformation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.ControlMode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlModeInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ControlModeInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlModeInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlModeInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ControlModeInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ControlModeInformation)
    MergeFrom(*source);
  }
}

void ControlModeInformation::MergeFrom(const ControlModeInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ControlModeInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void ControlModeInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ControlModeInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlModeInformation::CopyFrom(const ControlModeInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ControlModeInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlModeInformation::IsInitialized() const {
  return true;
}

void ControlModeInformation::Swap(ControlModeInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlModeInformation::InternalSwap(ControlModeInformation* other) {
  using std::swap;
  swap(mode_, other->mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControlModeInformation::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControlModeNotification::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ControlModeNotification_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::Kinova::Api::Common::Timestamp*>(
      ::Kinova::Api::Common::Timestamp::internal_default_instance());
  ::Kinova::Api::Base::_ControlModeNotification_default_instance_._instance.get_mutable()->user_handle_ = const_cast< ::Kinova::Api::Common::UserProfileHandle*>(
      ::Kinova::Api::Common::UserProfileHandle::internal_default_instance());
  ::Kinova::Api::Base::_ControlModeNotification_default_instance_._instance.get_mutable()->connection_ = const_cast< ::Kinova::Api::Common::Connection*>(
      ::Kinova::Api::Common::Connection::internal_default_instance());
}
void ControlModeNotification::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
void ControlModeNotification::clear_user_handle() {
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
}
void ControlModeNotification::clear_connection() {
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlModeNotification::kControlModeFieldNumber;
const int ControlModeNotification::kTimestampFieldNumber;
const int ControlModeNotification::kUserHandleFieldNumber;
const int ControlModeNotification::kConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlModeNotification::ControlModeNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ControlModeNotification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ControlModeNotification)
}
ControlModeNotification::ControlModeNotification(const ControlModeNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::Kinova::Api::Common::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_user_handle()) {
    user_handle_ = new ::Kinova::Api::Common::UserProfileHandle(*from.user_handle_);
  } else {
    user_handle_ = NULL;
  }
  if (from.has_connection()) {
    connection_ = new ::Kinova::Api::Common::Connection(*from.connection_);
  } else {
    connection_ = NULL;
  }
  control_mode_ = from.control_mode_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ControlModeNotification)
}

void ControlModeNotification::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&control_mode_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(control_mode_));
}

ControlModeNotification::~ControlModeNotification() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ControlModeNotification)
  SharedDtor();
}

void ControlModeNotification::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete user_handle_;
  if (this != internal_default_instance()) delete connection_;
}

void ControlModeNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControlModeNotification::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControlModeNotification& ControlModeNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ControlModeNotification.base);
  return *internal_default_instance();
}


void ControlModeNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ControlModeNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
  control_mode_ = 0;
  _internal_metadata_.Clear();
}

bool ControlModeNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ControlModeNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ControlMode control_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_control_mode(static_cast< ::Kinova::Api::Base::ControlMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Timestamp timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Connection connection = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ControlModeNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ControlModeNotification)
  return false;
#undef DO_
}

void ControlModeNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ControlModeNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ControlMode control_mode = 1;
  if (this->control_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->control_mode(), output);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_timestamp(), output);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
  if (this->has_user_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_user_handle(), output);
  }

  // .Kinova.Api.Common.Connection connection = 4;
  if (this->has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_connection(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ControlModeNotification)
}

::google::protobuf::uint8* ControlModeNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ControlModeNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ControlMode control_mode = 1;
  if (this->control_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->control_mode(), target);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_timestamp(), deterministic, target);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
  if (this->has_user_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_user_handle(), deterministic, target);
  }

  // .Kinova.Api.Common.Connection connection = 4;
  if (this->has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_connection(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ControlModeNotification)
  return target;
}

size_t ControlModeNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ControlModeNotification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
  if (this->has_user_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_handle_);
  }

  // .Kinova.Api.Common.Connection connection = 4;
  if (this->has_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *connection_);
  }

  // .Kinova.Api.Base.ControlMode control_mode = 1;
  if (this->control_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->control_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlModeNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ControlModeNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlModeNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlModeNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ControlModeNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ControlModeNotification)
    MergeFrom(*source);
  }
}

void ControlModeNotification::MergeFrom(const ControlModeNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ControlModeNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    mutable_timestamp()->::Kinova::Api::Common::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_user_handle()) {
    mutable_user_handle()->::Kinova::Api::Common::UserProfileHandle::MergeFrom(from.user_handle());
  }
  if (from.has_connection()) {
    mutable_connection()->::Kinova::Api::Common::Connection::MergeFrom(from.connection());
  }
  if (from.control_mode() != 0) {
    set_control_mode(from.control_mode());
  }
}

void ControlModeNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ControlModeNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlModeNotification::CopyFrom(const ControlModeNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ControlModeNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlModeNotification::IsInitialized() const {
  return true;
}

void ControlModeNotification::Swap(ControlModeNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlModeNotification::InternalSwap(ControlModeNotification* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(user_handle_, other->user_handle_);
  swap(connection_, other->connection_);
  swap(control_mode_, other->control_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControlModeNotification::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServoingModeInformation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServoingModeInformation::kServoingModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServoingModeInformation::ServoingModeInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ServoingModeInformation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ServoingModeInformation)
}
ServoingModeInformation::ServoingModeInformation(const ServoingModeInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  servoing_mode_ = from.servoing_mode_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ServoingModeInformation)
}

void ServoingModeInformation::SharedCtor() {
  servoing_mode_ = 0;
}

ServoingModeInformation::~ServoingModeInformation() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ServoingModeInformation)
  SharedDtor();
}

void ServoingModeInformation::SharedDtor() {
}

void ServoingModeInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServoingModeInformation::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServoingModeInformation& ServoingModeInformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ServoingModeInformation.base);
  return *internal_default_instance();
}


void ServoingModeInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ServoingModeInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servoing_mode_ = 0;
  _internal_metadata_.Clear();
}

bool ServoingModeInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ServoingModeInformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ServoingMode servoing_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_servoing_mode(static_cast< ::Kinova::Api::Base::ServoingMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ServoingModeInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ServoingModeInformation)
  return false;
#undef DO_
}

void ServoingModeInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ServoingModeInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ServoingMode servoing_mode = 1;
  if (this->servoing_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->servoing_mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ServoingModeInformation)
}

::google::protobuf::uint8* ServoingModeInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ServoingModeInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ServoingMode servoing_mode = 1;
  if (this->servoing_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->servoing_mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ServoingModeInformation)
  return target;
}

size_t ServoingModeInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ServoingModeInformation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.ServoingMode servoing_mode = 1;
  if (this->servoing_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->servoing_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServoingModeInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ServoingModeInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const ServoingModeInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServoingModeInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ServoingModeInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ServoingModeInformation)
    MergeFrom(*source);
  }
}

void ServoingModeInformation::MergeFrom(const ServoingModeInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ServoingModeInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servoing_mode() != 0) {
    set_servoing_mode(from.servoing_mode());
  }
}

void ServoingModeInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ServoingModeInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServoingModeInformation::CopyFrom(const ServoingModeInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ServoingModeInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServoingModeInformation::IsInitialized() const {
  return true;
}

void ServoingModeInformation::Swap(ServoingModeInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServoingModeInformation::InternalSwap(ServoingModeInformation* other) {
  using std::swap;
  swap(servoing_mode_, other->servoing_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServoingModeInformation::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OperatingModeInformation::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_OperatingModeInformation_default_instance_._instance.get_mutable()->device_handle_ = const_cast< ::Kinova::Api::Common::DeviceHandle*>(
      ::Kinova::Api::Common::DeviceHandle::internal_default_instance());
}
void OperatingModeInformation::clear_device_handle() {
  if (GetArenaNoVirtual() == NULL && device_handle_ != NULL) {
    delete device_handle_;
  }
  device_handle_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperatingModeInformation::kOperatingModeFieldNumber;
const int OperatingModeInformation::kDeviceHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperatingModeInformation::OperatingModeInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_OperatingModeInformation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.OperatingModeInformation)
}
OperatingModeInformation::OperatingModeInformation(const OperatingModeInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_device_handle()) {
    device_handle_ = new ::Kinova::Api::Common::DeviceHandle(*from.device_handle_);
  } else {
    device_handle_ = NULL;
  }
  operating_mode_ = from.operating_mode_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.OperatingModeInformation)
}

void OperatingModeInformation::SharedCtor() {
  ::memset(&device_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operating_mode_) -
      reinterpret_cast<char*>(&device_handle_)) + sizeof(operating_mode_));
}

OperatingModeInformation::~OperatingModeInformation() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.OperatingModeInformation)
  SharedDtor();
}

void OperatingModeInformation::SharedDtor() {
  if (this != internal_default_instance()) delete device_handle_;
}

void OperatingModeInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OperatingModeInformation::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperatingModeInformation& OperatingModeInformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_OperatingModeInformation.base);
  return *internal_default_instance();
}


void OperatingModeInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.OperatingModeInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && device_handle_ != NULL) {
    delete device_handle_;
  }
  device_handle_ = NULL;
  operating_mode_ = 0;
  _internal_metadata_.Clear();
}

bool OperatingModeInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.OperatingModeInformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.OperatingMode operating_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operating_mode(static_cast< ::Kinova::Api::Base::OperatingMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.DeviceHandle device_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.OperatingModeInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.OperatingModeInformation)
  return false;
#undef DO_
}

void OperatingModeInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.OperatingModeInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.OperatingMode operating_mode = 1;
  if (this->operating_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operating_mode(), output);
  }

  // .Kinova.Api.Common.DeviceHandle device_handle = 2;
  if (this->has_device_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_device_handle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.OperatingModeInformation)
}

::google::protobuf::uint8* OperatingModeInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.OperatingModeInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.OperatingMode operating_mode = 1;
  if (this->operating_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operating_mode(), target);
  }

  // .Kinova.Api.Common.DeviceHandle device_handle = 2;
  if (this->has_device_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_device_handle(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.OperatingModeInformation)
  return target;
}

size_t OperatingModeInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.OperatingModeInformation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Common.DeviceHandle device_handle = 2;
  if (this->has_device_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *device_handle_);
  }

  // .Kinova.Api.Base.OperatingMode operating_mode = 1;
  if (this->operating_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operating_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperatingModeInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.OperatingModeInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const OperatingModeInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperatingModeInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.OperatingModeInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.OperatingModeInformation)
    MergeFrom(*source);
  }
}

void OperatingModeInformation::MergeFrom(const OperatingModeInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.OperatingModeInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device_handle()) {
    mutable_device_handle()->::Kinova::Api::Common::DeviceHandle::MergeFrom(from.device_handle());
  }
  if (from.operating_mode() != 0) {
    set_operating_mode(from.operating_mode());
  }
}

void OperatingModeInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.OperatingModeInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperatingModeInformation::CopyFrom(const OperatingModeInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.OperatingModeInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatingModeInformation::IsInitialized() const {
  return true;
}

void OperatingModeInformation::Swap(OperatingModeInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperatingModeInformation::InternalSwap(OperatingModeInformation* other) {
  using std::swap;
  swap(device_handle_, other->device_handle_);
  swap(operating_mode_, other->operating_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OperatingModeInformation::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OperatingModeNotification::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_OperatingModeNotification_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::Kinova::Api::Common::Timestamp*>(
      ::Kinova::Api::Common::Timestamp::internal_default_instance());
  ::Kinova::Api::Base::_OperatingModeNotification_default_instance_._instance.get_mutable()->user_handle_ = const_cast< ::Kinova::Api::Common::UserProfileHandle*>(
      ::Kinova::Api::Common::UserProfileHandle::internal_default_instance());
  ::Kinova::Api::Base::_OperatingModeNotification_default_instance_._instance.get_mutable()->connection_ = const_cast< ::Kinova::Api::Common::Connection*>(
      ::Kinova::Api::Common::Connection::internal_default_instance());
  ::Kinova::Api::Base::_OperatingModeNotification_default_instance_._instance.get_mutable()->device_handle_ = const_cast< ::Kinova::Api::Common::DeviceHandle*>(
      ::Kinova::Api::Common::DeviceHandle::internal_default_instance());
}
void OperatingModeNotification::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
void OperatingModeNotification::clear_user_handle() {
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
}
void OperatingModeNotification::clear_connection() {
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
}
void OperatingModeNotification::clear_device_handle() {
  if (GetArenaNoVirtual() == NULL && device_handle_ != NULL) {
    delete device_handle_;
  }
  device_handle_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperatingModeNotification::kOperatingModeFieldNumber;
const int OperatingModeNotification::kTimestampFieldNumber;
const int OperatingModeNotification::kUserHandleFieldNumber;
const int OperatingModeNotification::kConnectionFieldNumber;
const int OperatingModeNotification::kDeviceHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperatingModeNotification::OperatingModeNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_OperatingModeNotification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.OperatingModeNotification)
}
OperatingModeNotification::OperatingModeNotification(const OperatingModeNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::Kinova::Api::Common::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_user_handle()) {
    user_handle_ = new ::Kinova::Api::Common::UserProfileHandle(*from.user_handle_);
  } else {
    user_handle_ = NULL;
  }
  if (from.has_connection()) {
    connection_ = new ::Kinova::Api::Common::Connection(*from.connection_);
  } else {
    connection_ = NULL;
  }
  if (from.has_device_handle()) {
    device_handle_ = new ::Kinova::Api::Common::DeviceHandle(*from.device_handle_);
  } else {
    device_handle_ = NULL;
  }
  operating_mode_ = from.operating_mode_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.OperatingModeNotification)
}

void OperatingModeNotification::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operating_mode_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(operating_mode_));
}

OperatingModeNotification::~OperatingModeNotification() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.OperatingModeNotification)
  SharedDtor();
}

void OperatingModeNotification::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete user_handle_;
  if (this != internal_default_instance()) delete connection_;
  if (this != internal_default_instance()) delete device_handle_;
}

void OperatingModeNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OperatingModeNotification::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperatingModeNotification& OperatingModeNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_OperatingModeNotification.base);
  return *internal_default_instance();
}


void OperatingModeNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.OperatingModeNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
  if (GetArenaNoVirtual() == NULL && device_handle_ != NULL) {
    delete device_handle_;
  }
  device_handle_ = NULL;
  operating_mode_ = 0;
  _internal_metadata_.Clear();
}

bool OperatingModeNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.OperatingModeNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.OperatingMode operating_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operating_mode(static_cast< ::Kinova::Api::Base::OperatingMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Timestamp timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Connection connection = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.DeviceHandle device_handle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.OperatingModeNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.OperatingModeNotification)
  return false;
#undef DO_
}

void OperatingModeNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.OperatingModeNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.OperatingMode operating_mode = 1;
  if (this->operating_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operating_mode(), output);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_timestamp(), output);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
  if (this->has_user_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_user_handle(), output);
  }

  // .Kinova.Api.Common.Connection connection = 4;
  if (this->has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_connection(), output);
  }

  // .Kinova.Api.Common.DeviceHandle device_handle = 5;
  if (this->has_device_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_device_handle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.OperatingModeNotification)
}

::google::protobuf::uint8* OperatingModeNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.OperatingModeNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.OperatingMode operating_mode = 1;
  if (this->operating_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operating_mode(), target);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_timestamp(), deterministic, target);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
  if (this->has_user_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_user_handle(), deterministic, target);
  }

  // .Kinova.Api.Common.Connection connection = 4;
  if (this->has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_connection(), deterministic, target);
  }

  // .Kinova.Api.Common.DeviceHandle device_handle = 5;
  if (this->has_device_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_device_handle(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.OperatingModeNotification)
  return target;
}

size_t OperatingModeNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.OperatingModeNotification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
  if (this->has_user_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_handle_);
  }

  // .Kinova.Api.Common.Connection connection = 4;
  if (this->has_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *connection_);
  }

  // .Kinova.Api.Common.DeviceHandle device_handle = 5;
  if (this->has_device_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *device_handle_);
  }

  // .Kinova.Api.Base.OperatingMode operating_mode = 1;
  if (this->operating_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operating_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperatingModeNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.OperatingModeNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const OperatingModeNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperatingModeNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.OperatingModeNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.OperatingModeNotification)
    MergeFrom(*source);
  }
}

void OperatingModeNotification::MergeFrom(const OperatingModeNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.OperatingModeNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    mutable_timestamp()->::Kinova::Api::Common::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_user_handle()) {
    mutable_user_handle()->::Kinova::Api::Common::UserProfileHandle::MergeFrom(from.user_handle());
  }
  if (from.has_connection()) {
    mutable_connection()->::Kinova::Api::Common::Connection::MergeFrom(from.connection());
  }
  if (from.has_device_handle()) {
    mutable_device_handle()->::Kinova::Api::Common::DeviceHandle::MergeFrom(from.device_handle());
  }
  if (from.operating_mode() != 0) {
    set_operating_mode(from.operating_mode());
  }
}

void OperatingModeNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.OperatingModeNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperatingModeNotification::CopyFrom(const OperatingModeNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.OperatingModeNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatingModeNotification::IsInitialized() const {
  return true;
}

void OperatingModeNotification::Swap(OperatingModeNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperatingModeNotification::InternalSwap(OperatingModeNotification* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(user_handle_, other->user_handle_);
  swap(connection_, other->connection_);
  swap(device_handle_, other->device_handle_);
  swap(operating_mode_, other->operating_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OperatingModeNotification::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServoingModeNotification::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ServoingModeNotification_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::Kinova::Api::Common::Timestamp*>(
      ::Kinova::Api::Common::Timestamp::internal_default_instance());
  ::Kinova::Api::Base::_ServoingModeNotification_default_instance_._instance.get_mutable()->user_handle_ = const_cast< ::Kinova::Api::Common::UserProfileHandle*>(
      ::Kinova::Api::Common::UserProfileHandle::internal_default_instance());
  ::Kinova::Api::Base::_ServoingModeNotification_default_instance_._instance.get_mutable()->connection_ = const_cast< ::Kinova::Api::Common::Connection*>(
      ::Kinova::Api::Common::Connection::internal_default_instance());
}
void ServoingModeNotification::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
void ServoingModeNotification::clear_user_handle() {
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
}
void ServoingModeNotification::clear_connection() {
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServoingModeNotification::kServoingModeFieldNumber;
const int ServoingModeNotification::kTimestampFieldNumber;
const int ServoingModeNotification::kUserHandleFieldNumber;
const int ServoingModeNotification::kConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServoingModeNotification::ServoingModeNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ServoingModeNotification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ServoingModeNotification)
}
ServoingModeNotification::ServoingModeNotification(const ServoingModeNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::Kinova::Api::Common::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_user_handle()) {
    user_handle_ = new ::Kinova::Api::Common::UserProfileHandle(*from.user_handle_);
  } else {
    user_handle_ = NULL;
  }
  if (from.has_connection()) {
    connection_ = new ::Kinova::Api::Common::Connection(*from.connection_);
  } else {
    connection_ = NULL;
  }
  servoing_mode_ = from.servoing_mode_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ServoingModeNotification)
}

void ServoingModeNotification::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&servoing_mode_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(servoing_mode_));
}

ServoingModeNotification::~ServoingModeNotification() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ServoingModeNotification)
  SharedDtor();
}

void ServoingModeNotification::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete user_handle_;
  if (this != internal_default_instance()) delete connection_;
}

void ServoingModeNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServoingModeNotification::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServoingModeNotification& ServoingModeNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ServoingModeNotification.base);
  return *internal_default_instance();
}


void ServoingModeNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ServoingModeNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
  servoing_mode_ = 0;
  _internal_metadata_.Clear();
}

bool ServoingModeNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ServoingModeNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ServoingMode servoing_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_servoing_mode(static_cast< ::Kinova::Api::Base::ServoingMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Timestamp timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Connection connection = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ServoingModeNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ServoingModeNotification)
  return false;
#undef DO_
}

void ServoingModeNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ServoingModeNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ServoingMode servoing_mode = 1;
  if (this->servoing_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->servoing_mode(), output);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_timestamp(), output);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
  if (this->has_user_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_user_handle(), output);
  }

  // .Kinova.Api.Common.Connection connection = 4;
  if (this->has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_connection(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ServoingModeNotification)
}

::google::protobuf::uint8* ServoingModeNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ServoingModeNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ServoingMode servoing_mode = 1;
  if (this->servoing_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->servoing_mode(), target);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_timestamp(), deterministic, target);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
  if (this->has_user_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_user_handle(), deterministic, target);
  }

  // .Kinova.Api.Common.Connection connection = 4;
  if (this->has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_connection(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ServoingModeNotification)
  return target;
}

size_t ServoingModeNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ServoingModeNotification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
  if (this->has_user_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_handle_);
  }

  // .Kinova.Api.Common.Connection connection = 4;
  if (this->has_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *connection_);
  }

  // .Kinova.Api.Base.ServoingMode servoing_mode = 1;
  if (this->servoing_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->servoing_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServoingModeNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ServoingModeNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const ServoingModeNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServoingModeNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ServoingModeNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ServoingModeNotification)
    MergeFrom(*source);
  }
}

void ServoingModeNotification::MergeFrom(const ServoingModeNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ServoingModeNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    mutable_timestamp()->::Kinova::Api::Common::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_user_handle()) {
    mutable_user_handle()->::Kinova::Api::Common::UserProfileHandle::MergeFrom(from.user_handle());
  }
  if (from.has_connection()) {
    mutable_connection()->::Kinova::Api::Common::Connection::MergeFrom(from.connection());
  }
  if (from.servoing_mode() != 0) {
    set_servoing_mode(from.servoing_mode());
  }
}

void ServoingModeNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ServoingModeNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServoingModeNotification::CopyFrom(const ServoingModeNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ServoingModeNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServoingModeNotification::IsInitialized() const {
  return true;
}

void ServoingModeNotification::Swap(ServoingModeNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServoingModeNotification::InternalSwap(ServoingModeNotification* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(user_handle_, other->user_handle_);
  swap(connection_, other->connection_);
  swap(servoing_mode_, other->servoing_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServoingModeNotification::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SequenceInfoNotification::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_SequenceInfoNotification_default_instance_._instance.get_mutable()->sequence_handle_ = const_cast< ::Kinova::Api::Base::SequenceHandle*>(
      ::Kinova::Api::Base::SequenceHandle::internal_default_instance());
  ::Kinova::Api::Base::_SequenceInfoNotification_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::Kinova::Api::Common::Timestamp*>(
      ::Kinova::Api::Common::Timestamp::internal_default_instance());
  ::Kinova::Api::Base::_SequenceInfoNotification_default_instance_._instance.get_mutable()->user_handle_ = const_cast< ::Kinova::Api::Common::UserProfileHandle*>(
      ::Kinova::Api::Common::UserProfileHandle::internal_default_instance());
  ::Kinova::Api::Base::_SequenceInfoNotification_default_instance_._instance.get_mutable()->connection_ = const_cast< ::Kinova::Api::Common::Connection*>(
      ::Kinova::Api::Common::Connection::internal_default_instance());
}
void SequenceInfoNotification::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
void SequenceInfoNotification::clear_user_handle() {
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
}
void SequenceInfoNotification::clear_connection() {
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequenceInfoNotification::kEventIdentifierFieldNumber;
const int SequenceInfoNotification::kSequenceHandleFieldNumber;
const int SequenceInfoNotification::kTaskIndexFieldNumber;
const int SequenceInfoNotification::kGroupIdentifierFieldNumber;
const int SequenceInfoNotification::kTimestampFieldNumber;
const int SequenceInfoNotification::kUserHandleFieldNumber;
const int SequenceInfoNotification::kAbortDetailsFieldNumber;
const int SequenceInfoNotification::kConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequenceInfoNotification::SequenceInfoNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_SequenceInfoNotification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.SequenceInfoNotification)
}
SequenceInfoNotification::SequenceInfoNotification(const SequenceInfoNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sequence_handle()) {
    sequence_handle_ = new ::Kinova::Api::Base::SequenceHandle(*from.sequence_handle_);
  } else {
    sequence_handle_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::Kinova::Api::Common::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_user_handle()) {
    user_handle_ = new ::Kinova::Api::Common::UserProfileHandle(*from.user_handle_);
  } else {
    user_handle_ = NULL;
  }
  if (from.has_connection()) {
    connection_ = new ::Kinova::Api::Common::Connection(*from.connection_);
  } else {
    connection_ = NULL;
  }
  ::memcpy(&event_identifier_, &from.event_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&abort_details_) -
    reinterpret_cast<char*>(&event_identifier_)) + sizeof(abort_details_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.SequenceInfoNotification)
}

void SequenceInfoNotification::SharedCtor() {
  ::memset(&sequence_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&abort_details_) -
      reinterpret_cast<char*>(&sequence_handle_)) + sizeof(abort_details_));
}

SequenceInfoNotification::~SequenceInfoNotification() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.SequenceInfoNotification)
  SharedDtor();
}

void SequenceInfoNotification::SharedDtor() {
  if (this != internal_default_instance()) delete sequence_handle_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete user_handle_;
  if (this != internal_default_instance()) delete connection_;
}

void SequenceInfoNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SequenceInfoNotification::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SequenceInfoNotification& SequenceInfoNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_SequenceInfoNotification.base);
  return *internal_default_instance();
}


void SequenceInfoNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.SequenceInfoNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sequence_handle_ != NULL) {
    delete sequence_handle_;
  }
  sequence_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
  ::memset(&event_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&abort_details_) -
      reinterpret_cast<char*>(&event_identifier_)) + sizeof(abort_details_));
  _internal_metadata_.Clear();
}

bool SequenceInfoNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.SequenceInfoNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.EventIdSequenceInfoNotification event_identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event_identifier(static_cast< ::Kinova::Api::Base::EventIdSequenceInfoNotification >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.SequenceHandle sequence_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sequence_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 task_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_identifier = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Timestamp timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.UserProfileHandle user_handle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.SubErrorCodes abort_details = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_abort_details(static_cast< ::Kinova::Api::SubErrorCodes >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Connection connection = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.SequenceInfoNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.SequenceInfoNotification)
  return false;
#undef DO_
}

void SequenceInfoNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.SequenceInfoNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.EventIdSequenceInfoNotification event_identifier = 1;
  if (this->event_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_identifier(), output);
  }

  // .Kinova.Api.Base.SequenceHandle sequence_handle = 2;
  if (this->has_sequence_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_sequence_handle(), output);
  }

  // uint32 task_index = 3;
  if (this->task_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->task_index(), output);
  }

  // uint32 group_identifier = 4;
  if (this->group_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_identifier(), output);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_timestamp(), output);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 6;
  if (this->has_user_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_user_handle(), output);
  }

  // .Kinova.Api.SubErrorCodes abort_details = 7;
  if (this->abort_details() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->abort_details(), output);
  }

  // .Kinova.Api.Common.Connection connection = 8;
  if (this->has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_connection(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.SequenceInfoNotification)
}

::google::protobuf::uint8* SequenceInfoNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.SequenceInfoNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.EventIdSequenceInfoNotification event_identifier = 1;
  if (this->event_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_identifier(), target);
  }

  // .Kinova.Api.Base.SequenceHandle sequence_handle = 2;
  if (this->has_sequence_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_sequence_handle(), deterministic, target);
  }

  // uint32 task_index = 3;
  if (this->task_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->task_index(), target);
  }

  // uint32 group_identifier = 4;
  if (this->group_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->group_identifier(), target);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_timestamp(), deterministic, target);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 6;
  if (this->has_user_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_user_handle(), deterministic, target);
  }

  // .Kinova.Api.SubErrorCodes abort_details = 7;
  if (this->abort_details() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->abort_details(), target);
  }

  // .Kinova.Api.Common.Connection connection = 8;
  if (this->has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_connection(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.SequenceInfoNotification)
  return target;
}

size_t SequenceInfoNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.SequenceInfoNotification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.SequenceHandle sequence_handle = 2;
  if (this->has_sequence_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sequence_handle_);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 6;
  if (this->has_user_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_handle_);
  }

  // .Kinova.Api.Common.Connection connection = 8;
  if (this->has_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *connection_);
  }

  // .Kinova.Api.Base.EventIdSequenceInfoNotification event_identifier = 1;
  if (this->event_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_identifier());
  }

  // uint32 task_index = 3;
  if (this->task_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->task_index());
  }

  // uint32 group_identifier = 4;
  if (this->group_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_identifier());
  }

  // .Kinova.Api.SubErrorCodes abort_details = 7;
  if (this->abort_details() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->abort_details());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequenceInfoNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.SequenceInfoNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const SequenceInfoNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SequenceInfoNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.SequenceInfoNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.SequenceInfoNotification)
    MergeFrom(*source);
  }
}

void SequenceInfoNotification::MergeFrom(const SequenceInfoNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.SequenceInfoNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sequence_handle()) {
    mutable_sequence_handle()->::Kinova::Api::Base::SequenceHandle::MergeFrom(from.sequence_handle());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::Kinova::Api::Common::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_user_handle()) {
    mutable_user_handle()->::Kinova::Api::Common::UserProfileHandle::MergeFrom(from.user_handle());
  }
  if (from.has_connection()) {
    mutable_connection()->::Kinova::Api::Common::Connection::MergeFrom(from.connection());
  }
  if (from.event_identifier() != 0) {
    set_event_identifier(from.event_identifier());
  }
  if (from.task_index() != 0) {
    set_task_index(from.task_index());
  }
  if (from.group_identifier() != 0) {
    set_group_identifier(from.group_identifier());
  }
  if (from.abort_details() != 0) {
    set_abort_details(from.abort_details());
  }
}

void SequenceInfoNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.SequenceInfoNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequenceInfoNotification::CopyFrom(const SequenceInfoNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.SequenceInfoNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceInfoNotification::IsInitialized() const {
  return true;
}

void SequenceInfoNotification::Swap(SequenceInfoNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequenceInfoNotification::InternalSwap(SequenceInfoNotification* other) {
  using std::swap;
  swap(sequence_handle_, other->sequence_handle_);
  swap(timestamp_, other->timestamp_);
  swap(user_handle_, other->user_handle_);
  swap(connection_, other->connection_);
  swap(event_identifier_, other->event_identifier_);
  swap(task_index_, other->task_index_);
  swap(group_identifier_, other->group_identifier_);
  swap(abort_details_, other->abort_details_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SequenceInfoNotification::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SequenceInformation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequenceInformation::kEventIdentifierFieldNumber;
const int SequenceInformation::kTaskIndexFieldNumber;
const int SequenceInformation::kTaskIdentifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequenceInformation::SequenceInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_SequenceInformation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.SequenceInformation)
}
SequenceInformation::SequenceInformation(const SequenceInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_identifier_, &from.event_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&task_identifier_) -
    reinterpret_cast<char*>(&event_identifier_)) + sizeof(task_identifier_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.SequenceInformation)
}

void SequenceInformation::SharedCtor() {
  ::memset(&event_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_identifier_) -
      reinterpret_cast<char*>(&event_identifier_)) + sizeof(task_identifier_));
}

SequenceInformation::~SequenceInformation() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.SequenceInformation)
  SharedDtor();
}

void SequenceInformation::SharedDtor() {
}

void SequenceInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SequenceInformation::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SequenceInformation& SequenceInformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_SequenceInformation.base);
  return *internal_default_instance();
}


void SequenceInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.SequenceInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&event_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_identifier_) -
      reinterpret_cast<char*>(&event_identifier_)) + sizeof(task_identifier_));
  _internal_metadata_.Clear();
}

bool SequenceInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.SequenceInformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.EventIdSequenceInfoNotification event_identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event_identifier(static_cast< ::Kinova::Api::Base::EventIdSequenceInfoNotification >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 task_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 task_identifier = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.SequenceInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.SequenceInformation)
  return false;
#undef DO_
}

void SequenceInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.SequenceInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.EventIdSequenceInfoNotification event_identifier = 1;
  if (this->event_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_identifier(), output);
  }

  // uint32 task_index = 2;
  if (this->task_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_index(), output);
  }

  // uint32 task_identifier = 3;
  if (this->task_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->task_identifier(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.SequenceInformation)
}

::google::protobuf::uint8* SequenceInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.SequenceInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.EventIdSequenceInfoNotification event_identifier = 1;
  if (this->event_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_identifier(), target);
  }

  // uint32 task_index = 2;
  if (this->task_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_index(), target);
  }

  // uint32 task_identifier = 3;
  if (this->task_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->task_identifier(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.SequenceInformation)
  return target;
}

size_t SequenceInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.SequenceInformation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.EventIdSequenceInfoNotification event_identifier = 1;
  if (this->event_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_identifier());
  }

  // uint32 task_index = 2;
  if (this->task_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->task_index());
  }

  // uint32 task_identifier = 3;
  if (this->task_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->task_identifier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequenceInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.SequenceInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const SequenceInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SequenceInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.SequenceInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.SequenceInformation)
    MergeFrom(*source);
  }
}

void SequenceInformation::MergeFrom(const SequenceInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.SequenceInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_identifier() != 0) {
    set_event_identifier(from.event_identifier());
  }
  if (from.task_index() != 0) {
    set_task_index(from.task_index());
  }
  if (from.task_identifier() != 0) {
    set_task_identifier(from.task_identifier());
  }
}

void SequenceInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.SequenceInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequenceInformation::CopyFrom(const SequenceInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.SequenceInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceInformation::IsInitialized() const {
  return true;
}

void SequenceInformation::Swap(SequenceInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequenceInformation::InternalSwap(SequenceInformation* other) {
  using std::swap;
  swap(event_identifier_, other->event_identifier_);
  swap(task_index_, other->task_index_);
  swap(task_identifier_, other->task_identifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SequenceInformation::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProtectionZoneNotification::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ProtectionZoneNotification_default_instance_._instance.get_mutable()->handle_ = const_cast< ::Kinova::Api::Base::ProtectionZoneHandle*>(
      ::Kinova::Api::Base::ProtectionZoneHandle::internal_default_instance());
  ::Kinova::Api::Base::_ProtectionZoneNotification_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::Kinova::Api::Common::Timestamp*>(
      ::Kinova::Api::Common::Timestamp::internal_default_instance());
  ::Kinova::Api::Base::_ProtectionZoneNotification_default_instance_._instance.get_mutable()->user_handle_ = const_cast< ::Kinova::Api::Common::UserProfileHandle*>(
      ::Kinova::Api::Common::UserProfileHandle::internal_default_instance());
  ::Kinova::Api::Base::_ProtectionZoneNotification_default_instance_._instance.get_mutable()->connection_ = const_cast< ::Kinova::Api::Common::Connection*>(
      ::Kinova::Api::Common::Connection::internal_default_instance());
}
void ProtectionZoneNotification::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
void ProtectionZoneNotification::clear_user_handle() {
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
}
void ProtectionZoneNotification::clear_connection() {
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtectionZoneNotification::kEventFieldNumber;
const int ProtectionZoneNotification::kHandleFieldNumber;
const int ProtectionZoneNotification::kTimestampFieldNumber;
const int ProtectionZoneNotification::kUserHandleFieldNumber;
const int ProtectionZoneNotification::kConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtectionZoneNotification::ProtectionZoneNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ProtectionZoneNotification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ProtectionZoneNotification)
}
ProtectionZoneNotification::ProtectionZoneNotification(const ProtectionZoneNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_handle()) {
    handle_ = new ::Kinova::Api::Base::ProtectionZoneHandle(*from.handle_);
  } else {
    handle_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::Kinova::Api::Common::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_user_handle()) {
    user_handle_ = new ::Kinova::Api::Common::UserProfileHandle(*from.user_handle_);
  } else {
    user_handle_ = NULL;
  }
  if (from.has_connection()) {
    connection_ = new ::Kinova::Api::Common::Connection(*from.connection_);
  } else {
    connection_ = NULL;
  }
  event_ = from.event_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ProtectionZoneNotification)
}

void ProtectionZoneNotification::SharedCtor() {
  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(event_));
}

ProtectionZoneNotification::~ProtectionZoneNotification() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ProtectionZoneNotification)
  SharedDtor();
}

void ProtectionZoneNotification::SharedDtor() {
  if (this != internal_default_instance()) delete handle_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete user_handle_;
  if (this != internal_default_instance()) delete connection_;
}

void ProtectionZoneNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProtectionZoneNotification::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtectionZoneNotification& ProtectionZoneNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ProtectionZoneNotification.base);
  return *internal_default_instance();
}


void ProtectionZoneNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ProtectionZoneNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && handle_ != NULL) {
    delete handle_;
  }
  handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
  event_ = 0;
  _internal_metadata_.Clear();
}

bool ProtectionZoneNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ProtectionZoneNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ProtectionZoneEvent event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event(static_cast< ::Kinova::Api::Base::ProtectionZoneEvent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.ProtectionZoneHandle handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Timestamp timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Connection connection = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ProtectionZoneNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ProtectionZoneNotification)
  return false;
#undef DO_
}

void ProtectionZoneNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ProtectionZoneNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ProtectionZoneEvent event = 1;
  if (this->event() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event(), output);
  }

  // .Kinova.Api.Base.ProtectionZoneHandle handle = 2;
  if (this->has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_handle(), output);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_timestamp(), output);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_user_handle(), output);
  }

  // .Kinova.Api.Common.Connection connection = 5;
  if (this->has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_connection(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ProtectionZoneNotification)
}

::google::protobuf::uint8* ProtectionZoneNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ProtectionZoneNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ProtectionZoneEvent event = 1;
  if (this->event() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event(), target);
  }

  // .Kinova.Api.Base.ProtectionZoneHandle handle = 2;
  if (this->has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_handle(), deterministic, target);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_timestamp(), deterministic, target);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_user_handle(), deterministic, target);
  }

  // .Kinova.Api.Common.Connection connection = 5;
  if (this->has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_connection(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ProtectionZoneNotification)
  return target;
}

size_t ProtectionZoneNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ProtectionZoneNotification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.ProtectionZoneHandle handle = 2;
  if (this->has_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_handle_);
  }

  // .Kinova.Api.Common.Connection connection = 5;
  if (this->has_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *connection_);
  }

  // .Kinova.Api.Base.ProtectionZoneEvent event = 1;
  if (this->event() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtectionZoneNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ProtectionZoneNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtectionZoneNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtectionZoneNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ProtectionZoneNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ProtectionZoneNotification)
    MergeFrom(*source);
  }
}

void ProtectionZoneNotification::MergeFrom(const ProtectionZoneNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ProtectionZoneNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_handle()) {
    mutable_handle()->::Kinova::Api::Base::ProtectionZoneHandle::MergeFrom(from.handle());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::Kinova::Api::Common::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_user_handle()) {
    mutable_user_handle()->::Kinova::Api::Common::UserProfileHandle::MergeFrom(from.user_handle());
  }
  if (from.has_connection()) {
    mutable_connection()->::Kinova::Api::Common::Connection::MergeFrom(from.connection());
  }
  if (from.event() != 0) {
    set_event(from.event());
  }
}

void ProtectionZoneNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ProtectionZoneNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtectionZoneNotification::CopyFrom(const ProtectionZoneNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ProtectionZoneNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtectionZoneNotification::IsInitialized() const {
  return true;
}

void ProtectionZoneNotification::Swap(ProtectionZoneNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtectionZoneNotification::InternalSwap(ProtectionZoneNotification* other) {
  using std::swap;
  swap(handle_, other->handle_);
  swap(timestamp_, other->timestamp_);
  swap(user_handle_, other->user_handle_);
  swap(connection_, other->connection_);
  swap(event_, other->event_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProtectionZoneNotification::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProtectionZoneInformation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtectionZoneInformation::kEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtectionZoneInformation::ProtectionZoneInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ProtectionZoneInformation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ProtectionZoneInformation)
}
ProtectionZoneInformation::ProtectionZoneInformation(const ProtectionZoneInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_ = from.event_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ProtectionZoneInformation)
}

void ProtectionZoneInformation::SharedCtor() {
  event_ = 0;
}

ProtectionZoneInformation::~ProtectionZoneInformation() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ProtectionZoneInformation)
  SharedDtor();
}

void ProtectionZoneInformation::SharedDtor() {
}

void ProtectionZoneInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProtectionZoneInformation::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtectionZoneInformation& ProtectionZoneInformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ProtectionZoneInformation.base);
  return *internal_default_instance();
}


void ProtectionZoneInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ProtectionZoneInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_ = 0;
  _internal_metadata_.Clear();
}

bool ProtectionZoneInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ProtectionZoneInformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ProtectionZoneEvent event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event(static_cast< ::Kinova::Api::Base::ProtectionZoneEvent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ProtectionZoneInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ProtectionZoneInformation)
  return false;
#undef DO_
}

void ProtectionZoneInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ProtectionZoneInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ProtectionZoneEvent event = 1;
  if (this->event() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ProtectionZoneInformation)
}

::google::protobuf::uint8* ProtectionZoneInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ProtectionZoneInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ProtectionZoneEvent event = 1;
  if (this->event() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ProtectionZoneInformation)
  return target;
}

size_t ProtectionZoneInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ProtectionZoneInformation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.ProtectionZoneEvent event = 1;
  if (this->event() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtectionZoneInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ProtectionZoneInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtectionZoneInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtectionZoneInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ProtectionZoneInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ProtectionZoneInformation)
    MergeFrom(*source);
  }
}

void ProtectionZoneInformation::MergeFrom(const ProtectionZoneInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ProtectionZoneInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event() != 0) {
    set_event(from.event());
  }
}

void ProtectionZoneInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ProtectionZoneInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtectionZoneInformation::CopyFrom(const ProtectionZoneInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ProtectionZoneInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtectionZoneInformation::IsInitialized() const {
  return true;
}

void ProtectionZoneInformation::Swap(ProtectionZoneInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtectionZoneInformation::InternalSwap(ProtectionZoneInformation* other) {
  using std::swap;
  swap(event_, other->event_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProtectionZoneInformation::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserNotification::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_UserNotification_default_instance_._instance.get_mutable()->modified_user_ = const_cast< ::Kinova::Api::Common::UserProfileHandle*>(
      ::Kinova::Api::Common::UserProfileHandle::internal_default_instance());
  ::Kinova::Api::Base::_UserNotification_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::Kinova::Api::Common::Timestamp*>(
      ::Kinova::Api::Common::Timestamp::internal_default_instance());
  ::Kinova::Api::Base::_UserNotification_default_instance_._instance.get_mutable()->user_handle_ = const_cast< ::Kinova::Api::Common::UserProfileHandle*>(
      ::Kinova::Api::Common::UserProfileHandle::internal_default_instance());
  ::Kinova::Api::Base::_UserNotification_default_instance_._instance.get_mutable()->connection_ = const_cast< ::Kinova::Api::Common::Connection*>(
      ::Kinova::Api::Common::Connection::internal_default_instance());
}
void UserNotification::clear_modified_user() {
  if (GetArenaNoVirtual() == NULL && modified_user_ != NULL) {
    delete modified_user_;
  }
  modified_user_ = NULL;
}
void UserNotification::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
void UserNotification::clear_user_handle() {
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
}
void UserNotification::clear_connection() {
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserNotification::kUserEventFieldNumber;
const int UserNotification::kModifiedUserFieldNumber;
const int UserNotification::kTimestampFieldNumber;
const int UserNotification::kUserHandleFieldNumber;
const int UserNotification::kConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserNotification::UserNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_UserNotification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.UserNotification)
}
UserNotification::UserNotification(const UserNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_modified_user()) {
    modified_user_ = new ::Kinova::Api::Common::UserProfileHandle(*from.modified_user_);
  } else {
    modified_user_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::Kinova::Api::Common::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_user_handle()) {
    user_handle_ = new ::Kinova::Api::Common::UserProfileHandle(*from.user_handle_);
  } else {
    user_handle_ = NULL;
  }
  if (from.has_connection()) {
    connection_ = new ::Kinova::Api::Common::Connection(*from.connection_);
  } else {
    connection_ = NULL;
  }
  user_event_ = from.user_event_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.UserNotification)
}

void UserNotification::SharedCtor() {
  ::memset(&modified_user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_event_) -
      reinterpret_cast<char*>(&modified_user_)) + sizeof(user_event_));
}

UserNotification::~UserNotification() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.UserNotification)
  SharedDtor();
}

void UserNotification::SharedDtor() {
  if (this != internal_default_instance()) delete modified_user_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete user_handle_;
  if (this != internal_default_instance()) delete connection_;
}

void UserNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserNotification::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserNotification& UserNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_UserNotification.base);
  return *internal_default_instance();
}


void UserNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.UserNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && modified_user_ != NULL) {
    delete modified_user_;
  }
  modified_user_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
  user_event_ = 0;
  _internal_metadata_.Clear();
}

bool UserNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.UserNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.UserEvent user_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_user_event(static_cast< ::Kinova::Api::Base::UserEvent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.UserProfileHandle modified_user = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_modified_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Timestamp timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Connection connection = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.UserNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.UserNotification)
  return false;
#undef DO_
}

void UserNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.UserNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.UserEvent user_event = 1;
  if (this->user_event() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->user_event(), output);
  }

  // .Kinova.Api.Common.UserProfileHandle modified_user = 2;
  if (this->has_modified_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_modified_user(), output);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_timestamp(), output);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_user_handle(), output);
  }

  // .Kinova.Api.Common.Connection connection = 5;
  if (this->has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_connection(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.UserNotification)
}

::google::protobuf::uint8* UserNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.UserNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.UserEvent user_event = 1;
  if (this->user_event() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->user_event(), target);
  }

  // .Kinova.Api.Common.UserProfileHandle modified_user = 2;
  if (this->has_modified_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_modified_user(), deterministic, target);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_timestamp(), deterministic, target);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_user_handle(), deterministic, target);
  }

  // .Kinova.Api.Common.Connection connection = 5;
  if (this->has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_connection(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.UserNotification)
  return target;
}

size_t UserNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.UserNotification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Common.UserProfileHandle modified_user = 2;
  if (this->has_modified_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *modified_user_);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_handle_);
  }

  // .Kinova.Api.Common.Connection connection = 5;
  if (this->has_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *connection_);
  }

  // .Kinova.Api.Base.UserEvent user_event = 1;
  if (this->user_event() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_event());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.UserNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const UserNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.UserNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.UserNotification)
    MergeFrom(*source);
  }
}

void UserNotification::MergeFrom(const UserNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.UserNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_modified_user()) {
    mutable_modified_user()->::Kinova::Api::Common::UserProfileHandle::MergeFrom(from.modified_user());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::Kinova::Api::Common::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_user_handle()) {
    mutable_user_handle()->::Kinova::Api::Common::UserProfileHandle::MergeFrom(from.user_handle());
  }
  if (from.has_connection()) {
    mutable_connection()->::Kinova::Api::Common::Connection::MergeFrom(from.connection());
  }
  if (from.user_event() != 0) {
    set_user_event(from.user_event());
  }
}

void UserNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.UserNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserNotification::CopyFrom(const UserNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.UserNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserNotification::IsInitialized() const {
  return true;
}

void UserNotification::Swap(UserNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserNotification::InternalSwap(UserNotification* other) {
  using std::swap;
  swap(modified_user_, other->modified_user_);
  swap(timestamp_, other->timestamp_);
  swap(user_handle_, other->user_handle_);
  swap(connection_, other->connection_);
  swap(user_event_, other->user_event_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserNotification::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControllerHandle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerHandle::kTypeFieldNumber;
const int ControllerHandle::kControllerIdentifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerHandle::ControllerHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ControllerHandle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ControllerHandle)
}
ControllerHandle::ControllerHandle(const ControllerHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_identifier_) -
    reinterpret_cast<char*>(&type_)) + sizeof(controller_identifier_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ControllerHandle)
}

void ControllerHandle::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_identifier_) -
      reinterpret_cast<char*>(&type_)) + sizeof(controller_identifier_));
}

ControllerHandle::~ControllerHandle() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ControllerHandle)
  SharedDtor();
}

void ControllerHandle::SharedDtor() {
}

void ControllerHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerHandle::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerHandle& ControllerHandle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ControllerHandle.base);
  return *internal_default_instance();
}


void ControllerHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ControllerHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_identifier_) -
      reinterpret_cast<char*>(&type_)) + sizeof(controller_identifier_));
  _internal_metadata_.Clear();
}

bool ControllerHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ControllerHandle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ControllerType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Kinova::Api::Base::ControllerType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_identifier = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ControllerHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ControllerHandle)
  return false;
#undef DO_
}

void ControllerHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ControllerHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ControllerType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint32 controller_identifier = 2;
  if (this->controller_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->controller_identifier(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ControllerHandle)
}

::google::protobuf::uint8* ControllerHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ControllerHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ControllerType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint32 controller_identifier = 2;
  if (this->controller_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->controller_identifier(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ControllerHandle)
  return target;
}

size_t ControllerHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ControllerHandle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.ControllerType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 controller_identifier = 2;
  if (this->controller_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_identifier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ControllerHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ControllerHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ControllerHandle)
    MergeFrom(*source);
  }
}

void ControllerHandle::MergeFrom(const ControllerHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ControllerHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.controller_identifier() != 0) {
    set_controller_identifier(from.controller_identifier());
  }
}

void ControllerHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ControllerHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerHandle::CopyFrom(const ControllerHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ControllerHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerHandle::IsInitialized() const {
  return true;
}

void ControllerHandle::Swap(ControllerHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerHandle::InternalSwap(ControllerHandle* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(controller_identifier_, other->controller_identifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerHandle::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControllerElementHandle::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ControllerElementHandle_default_instance_._instance.get_mutable()->controller_handle_ = const_cast< ::Kinova::Api::Base::ControllerHandle*>(
      ::Kinova::Api::Base::ControllerHandle::internal_default_instance());
  ::Kinova::Api::Base::_ControllerElementHandle_default_instance_.button_ = 0u;
  ::Kinova::Api::Base::_ControllerElementHandle_default_instance_.axis_ = 0u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerElementHandle::kControllerHandleFieldNumber;
const int ControllerElementHandle::kButtonFieldNumber;
const int ControllerElementHandle::kAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerElementHandle::ControllerElementHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ControllerElementHandle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ControllerElementHandle)
}
ControllerElementHandle::ControllerElementHandle(const ControllerElementHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_controller_handle()) {
    controller_handle_ = new ::Kinova::Api::Base::ControllerHandle(*from.controller_handle_);
  } else {
    controller_handle_ = NULL;
  }
  clear_has_identifier();
  switch (from.identifier_case()) {
    case kButton: {
      set_button(from.button());
      break;
    }
    case kAxis: {
      set_axis(from.axis());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ControllerElementHandle)
}

void ControllerElementHandle::SharedCtor() {
  controller_handle_ = NULL;
  clear_has_identifier();
}

ControllerElementHandle::~ControllerElementHandle() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ControllerElementHandle)
  SharedDtor();
}

void ControllerElementHandle::SharedDtor() {
  if (this != internal_default_instance()) delete controller_handle_;
  if (has_identifier()) {
    clear_identifier();
  }
}

void ControllerElementHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerElementHandle::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerElementHandle& ControllerElementHandle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ControllerElementHandle.base);
  return *internal_default_instance();
}


void ControllerElementHandle::clear_identifier() {
// @@protoc_insertion_point(one_of_clear_start:Kinova.Api.Base.ControllerElementHandle)
  switch (identifier_case()) {
    case kButton: {
      // No need to clear
      break;
    }
    case kAxis: {
      // No need to clear
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}


void ControllerElementHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ControllerElementHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && controller_handle_ != NULL) {
    delete controller_handle_;
  }
  controller_handle_ = NULL;
  clear_identifier();
  _internal_metadata_.Clear();
}

bool ControllerElementHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ControllerElementHandle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ControllerHandle controller_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 button = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_identifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identifier_.button_)));
          set_has_button();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 axis = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_identifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identifier_.axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ControllerElementHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ControllerElementHandle)
  return false;
#undef DO_
}

void ControllerElementHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ControllerElementHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ControllerHandle controller_handle = 1;
  if (this->has_controller_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_controller_handle(), output);
  }

  // uint32 button = 2;
  if (has_button()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->button(), output);
  }

  // uint32 axis = 3;
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->axis(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ControllerElementHandle)
}

::google::protobuf::uint8* ControllerElementHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ControllerElementHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ControllerHandle controller_handle = 1;
  if (this->has_controller_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_controller_handle(), deterministic, target);
  }

  // uint32 button = 2;
  if (has_button()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->button(), target);
  }

  // uint32 axis = 3;
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->axis(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ControllerElementHandle)
  return target;
}

size_t ControllerElementHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ControllerElementHandle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.ControllerHandle controller_handle = 1;
  if (this->has_controller_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *controller_handle_);
  }

  switch (identifier_case()) {
    // uint32 button = 2;
    case kButton: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->button());
      break;
    }
    // uint32 axis = 3;
    case kAxis: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->axis());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerElementHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ControllerElementHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerElementHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerElementHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ControllerElementHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ControllerElementHandle)
    MergeFrom(*source);
  }
}

void ControllerElementHandle::MergeFrom(const ControllerElementHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ControllerElementHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_controller_handle()) {
    mutable_controller_handle()->::Kinova::Api::Base::ControllerHandle::MergeFrom(from.controller_handle());
  }
  switch (from.identifier_case()) {
    case kButton: {
      set_button(from.button());
      break;
    }
    case kAxis: {
      set_axis(from.axis());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
}

void ControllerElementHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ControllerElementHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerElementHandle::CopyFrom(const ControllerElementHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ControllerElementHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerElementHandle::IsInitialized() const {
  return true;
}

void ControllerElementHandle::Swap(ControllerElementHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerElementHandle::InternalSwap(ControllerElementHandle* other) {
  using std::swap;
  swap(controller_handle_, other->controller_handle_);
  swap(identifier_, other->identifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerElementHandle::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControllerNotification::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ControllerNotification_default_instance_.controller_state_ = const_cast< ::Kinova::Api::Base::ControllerState*>(
      ::Kinova::Api::Base::ControllerState::internal_default_instance());
  ::Kinova::Api::Base::_ControllerNotification_default_instance_.controller_element_ = const_cast< ::Kinova::Api::Base::ControllerElementState*>(
      ::Kinova::Api::Base::ControllerElementState::internal_default_instance());
  ::Kinova::Api::Base::_ControllerNotification_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::Kinova::Api::Common::Timestamp*>(
      ::Kinova::Api::Common::Timestamp::internal_default_instance());
  ::Kinova::Api::Base::_ControllerNotification_default_instance_._instance.get_mutable()->user_handle_ = const_cast< ::Kinova::Api::Common::UserProfileHandle*>(
      ::Kinova::Api::Common::UserProfileHandle::internal_default_instance());
  ::Kinova::Api::Base::_ControllerNotification_default_instance_._instance.get_mutable()->connection_ = const_cast< ::Kinova::Api::Common::Connection*>(
      ::Kinova::Api::Common::Connection::internal_default_instance());
}
void ControllerNotification::set_allocated_controller_state(::Kinova::Api::Base::ControllerState* controller_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_state();
  if (controller_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      controller_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controller_state, submessage_arena);
    }
    set_has_controller_state();
    state_.controller_state_ = controller_state;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.ControllerNotification.controller_state)
}
void ControllerNotification::set_allocated_controller_element(::Kinova::Api::Base::ControllerElementState* controller_element) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_state();
  if (controller_element) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      controller_element = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controller_element, submessage_arena);
    }
    set_has_controller_element();
    state_.controller_element_ = controller_element;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.ControllerNotification.controller_element)
}
void ControllerNotification::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
void ControllerNotification::clear_user_handle() {
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
}
void ControllerNotification::clear_connection() {
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerNotification::kControllerStateFieldNumber;
const int ControllerNotification::kControllerElementFieldNumber;
const int ControllerNotification::kTimestampFieldNumber;
const int ControllerNotification::kUserHandleFieldNumber;
const int ControllerNotification::kConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerNotification::ControllerNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ControllerNotification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ControllerNotification)
}
ControllerNotification::ControllerNotification(const ControllerNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::Kinova::Api::Common::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_user_handle()) {
    user_handle_ = new ::Kinova::Api::Common::UserProfileHandle(*from.user_handle_);
  } else {
    user_handle_ = NULL;
  }
  if (from.has_connection()) {
    connection_ = new ::Kinova::Api::Common::Connection(*from.connection_);
  } else {
    connection_ = NULL;
  }
  clear_has_state();
  switch (from.state_case()) {
    case kControllerState: {
      mutable_controller_state()->::Kinova::Api::Base::ControllerState::MergeFrom(from.controller_state());
      break;
    }
    case kControllerElement: {
      mutable_controller_element()->::Kinova::Api::Base::ControllerElementState::MergeFrom(from.controller_element());
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ControllerNotification)
}

void ControllerNotification::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connection_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(connection_));
  clear_has_state();
}

ControllerNotification::~ControllerNotification() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ControllerNotification)
  SharedDtor();
}

void ControllerNotification::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete user_handle_;
  if (this != internal_default_instance()) delete connection_;
  if (has_state()) {
    clear_state();
  }
}

void ControllerNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerNotification::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerNotification& ControllerNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ControllerNotification.base);
  return *internal_default_instance();
}


void ControllerNotification::clear_state() {
// @@protoc_insertion_point(one_of_clear_start:Kinova.Api.Base.ControllerNotification)
  switch (state_case()) {
    case kControllerState: {
      delete state_.controller_state_;
      break;
    }
    case kControllerElement: {
      delete state_.controller_element_;
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STATE_NOT_SET;
}


void ControllerNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ControllerNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
  clear_state();
  _internal_metadata_.Clear();
}

bool ControllerNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ControllerNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ControllerState controller_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.ControllerElementState controller_element = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller_element()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Timestamp timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Connection connection = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ControllerNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ControllerNotification)
  return false;
#undef DO_
}

void ControllerNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ControllerNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ControllerState controller_state = 1;
  if (has_controller_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_controller_state(), output);
  }

  // .Kinova.Api.Base.ControllerElementState controller_element = 2;
  if (has_controller_element()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_controller_element(), output);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_timestamp(), output);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_user_handle(), output);
  }

  // .Kinova.Api.Common.Connection connection = 5;
  if (this->has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_connection(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ControllerNotification)
}

::google::protobuf::uint8* ControllerNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ControllerNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ControllerState controller_state = 1;
  if (has_controller_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_controller_state(), deterministic, target);
  }

  // .Kinova.Api.Base.ControllerElementState controller_element = 2;
  if (has_controller_element()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_controller_element(), deterministic, target);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_timestamp(), deterministic, target);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_user_handle(), deterministic, target);
  }

  // .Kinova.Api.Common.Connection connection = 5;
  if (this->has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_connection(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ControllerNotification)
  return target;
}

size_t ControllerNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ControllerNotification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_handle_);
  }

  // .Kinova.Api.Common.Connection connection = 5;
  if (this->has_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *connection_);
  }

  switch (state_case()) {
    // .Kinova.Api.Base.ControllerState controller_state = 1;
    case kControllerState: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *state_.controller_state_);
      break;
    }
    // .Kinova.Api.Base.ControllerElementState controller_element = 2;
    case kControllerElement: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *state_.controller_element_);
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ControllerNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ControllerNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ControllerNotification)
    MergeFrom(*source);
  }
}

void ControllerNotification::MergeFrom(const ControllerNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ControllerNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    mutable_timestamp()->::Kinova::Api::Common::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_user_handle()) {
    mutable_user_handle()->::Kinova::Api::Common::UserProfileHandle::MergeFrom(from.user_handle());
  }
  if (from.has_connection()) {
    mutable_connection()->::Kinova::Api::Common::Connection::MergeFrom(from.connection());
  }
  switch (from.state_case()) {
    case kControllerState: {
      mutable_controller_state()->::Kinova::Api::Base::ControllerState::MergeFrom(from.controller_state());
      break;
    }
    case kControllerElement: {
      mutable_controller_element()->::Kinova::Api::Base::ControllerElementState::MergeFrom(from.controller_element());
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
}

void ControllerNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ControllerNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerNotification::CopyFrom(const ControllerNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ControllerNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerNotification::IsInitialized() const {
  return true;
}

void ControllerNotification::Swap(ControllerNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerNotification::InternalSwap(ControllerNotification* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(user_handle_, other->user_handle_);
  swap(connection_, other->connection_);
  swap(state_, other->state_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerNotification::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControllerList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerList::kHandlesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerList::ControllerList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ControllerList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ControllerList)
}
ControllerList::ControllerList(const ControllerList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      handles_(from.handles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ControllerList)
}

void ControllerList::SharedCtor() {
}

ControllerList::~ControllerList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ControllerList)
  SharedDtor();
}

void ControllerList::SharedDtor() {
}

void ControllerList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerList& ControllerList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ControllerList.base);
  return *internal_default_instance();
}


void ControllerList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ControllerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  handles_.Clear();
  _internal_metadata_.Clear();
}

bool ControllerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ControllerList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.ControllerHandle handles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_handles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ControllerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ControllerList)
  return false;
#undef DO_
}

void ControllerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ControllerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.ControllerHandle handles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->handles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->handles(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ControllerList)
}

::google::protobuf::uint8* ControllerList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ControllerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.ControllerHandle handles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->handles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->handles(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ControllerList)
  return target;
}

size_t ControllerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ControllerList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.ControllerHandle handles = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->handles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->handles(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ControllerList)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ControllerList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ControllerList)
    MergeFrom(*source);
  }
}

void ControllerList::MergeFrom(const ControllerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ControllerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  handles_.MergeFrom(from.handles_);
}

void ControllerList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ControllerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerList::CopyFrom(const ControllerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ControllerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerList::IsInitialized() const {
  return true;
}

void ControllerList::Swap(ControllerList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerList::InternalSwap(ControllerList* other) {
  using std::swap;
  CastToBase(&handles_)->InternalSwap(CastToBase(&other->handles_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControllerState::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ControllerState_default_instance_._instance.get_mutable()->handle_ = const_cast< ::Kinova::Api::Base::ControllerHandle*>(
      ::Kinova::Api::Base::ControllerHandle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerState::kHandleFieldNumber;
const int ControllerState::kEventTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerState::ControllerState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ControllerState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ControllerState)
}
ControllerState::ControllerState(const ControllerState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_handle()) {
    handle_ = new ::Kinova::Api::Base::ControllerHandle(*from.handle_);
  } else {
    handle_ = NULL;
  }
  event_type_ = from.event_type_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ControllerState)
}

void ControllerState::SharedCtor() {
  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_type_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(event_type_));
}

ControllerState::~ControllerState() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ControllerState)
  SharedDtor();
}

void ControllerState::SharedDtor() {
  if (this != internal_default_instance()) delete handle_;
}

void ControllerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerState::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerState& ControllerState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ControllerState.base);
  return *internal_default_instance();
}


void ControllerState::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ControllerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && handle_ != NULL) {
    delete handle_;
  }
  handle_ = NULL;
  event_type_ = 0;
  _internal_metadata_.Clear();
}

bool ControllerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ControllerState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ControllerHandle handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.ControllerEventType event_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event_type(static_cast< ::Kinova::Api::Base::ControllerEventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ControllerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ControllerState)
  return false;
#undef DO_
}

void ControllerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ControllerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ControllerHandle handle = 1;
  if (this->has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_handle(), output);
  }

  // .Kinova.Api.Base.ControllerEventType event_type = 2;
  if (this->event_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ControllerState)
}

::google::protobuf::uint8* ControllerState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ControllerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ControllerHandle handle = 1;
  if (this->has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_handle(), deterministic, target);
  }

  // .Kinova.Api.Base.ControllerEventType event_type = 2;
  if (this->event_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ControllerState)
  return target;
}

size_t ControllerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ControllerState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.ControllerHandle handle = 1;
  if (this->has_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  // .Kinova.Api.Base.ControllerEventType event_type = 2;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ControllerState)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ControllerState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ControllerState)
    MergeFrom(*source);
  }
}

void ControllerState::MergeFrom(const ControllerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ControllerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_handle()) {
    mutable_handle()->::Kinova::Api::Base::ControllerHandle::MergeFrom(from.handle());
  }
  if (from.event_type() != 0) {
    set_event_type(from.event_type());
  }
}

void ControllerState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ControllerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerState::CopyFrom(const ControllerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ControllerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerState::IsInitialized() const {
  return true;
}

void ControllerState::Swap(ControllerState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerState::InternalSwap(ControllerState* other) {
  using std::swap;
  swap(handle_, other->handle_);
  swap(event_type_, other->event_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerState::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControllerElementState::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ControllerElementState_default_instance_._instance.get_mutable()->handle_ = const_cast< ::Kinova::Api::Base::ControllerElementHandle*>(
      ::Kinova::Api::Base::ControllerElementHandle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerElementState::kHandleFieldNumber;
const int ControllerElementState::kEventTypeFieldNumber;
const int ControllerElementState::kAxisValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerElementState::ControllerElementState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ControllerElementState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ControllerElementState)
}
ControllerElementState::ControllerElementState(const ControllerElementState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_handle()) {
    handle_ = new ::Kinova::Api::Base::ControllerElementHandle(*from.handle_);
  } else {
    handle_ = NULL;
  }
  ::memcpy(&event_type_, &from.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&axis_value_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(axis_value_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ControllerElementState)
}

void ControllerElementState::SharedCtor() {
  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&axis_value_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(axis_value_));
}

ControllerElementState::~ControllerElementState() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ControllerElementState)
  SharedDtor();
}

void ControllerElementState::SharedDtor() {
  if (this != internal_default_instance()) delete handle_;
}

void ControllerElementState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerElementState::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerElementState& ControllerElementState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ControllerElementState.base);
  return *internal_default_instance();
}


void ControllerElementState::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ControllerElementState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && handle_ != NULL) {
    delete handle_;
  }
  handle_ = NULL;
  ::memset(&event_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&axis_value_) -
      reinterpret_cast<char*>(&event_type_)) + sizeof(axis_value_));
  _internal_metadata_.Clear();
}

bool ControllerElementState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ControllerElementState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ControllerElementHandle handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.ControllerElementEventType event_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event_type(static_cast< ::Kinova::Api::Base::ControllerElementEventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float axis_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &axis_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ControllerElementState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ControllerElementState)
  return false;
#undef DO_
}

void ControllerElementState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ControllerElementState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ControllerElementHandle handle = 1;
  if (this->has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_handle(), output);
  }

  // .Kinova.Api.Base.ControllerElementEventType event_type = 2;
  if (this->event_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_type(), output);
  }

  // float axis_value = 3;
  if (this->axis_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->axis_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ControllerElementState)
}

::google::protobuf::uint8* ControllerElementState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ControllerElementState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ControllerElementHandle handle = 1;
  if (this->has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_handle(), deterministic, target);
  }

  // .Kinova.Api.Base.ControllerElementEventType event_type = 2;
  if (this->event_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_type(), target);
  }

  // float axis_value = 3;
  if (this->axis_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->axis_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ControllerElementState)
  return target;
}

size_t ControllerElementState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ControllerElementState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.ControllerElementHandle handle = 1;
  if (this->has_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  // .Kinova.Api.Base.ControllerElementEventType event_type = 2;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
  }

  // float axis_value = 3;
  if (this->axis_value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerElementState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ControllerElementState)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerElementState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerElementState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ControllerElementState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ControllerElementState)
    MergeFrom(*source);
  }
}

void ControllerElementState::MergeFrom(const ControllerElementState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ControllerElementState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_handle()) {
    mutable_handle()->::Kinova::Api::Base::ControllerElementHandle::MergeFrom(from.handle());
  }
  if (from.event_type() != 0) {
    set_event_type(from.event_type());
  }
  if (from.axis_value() != 0) {
    set_axis_value(from.axis_value());
  }
}

void ControllerElementState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ControllerElementState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerElementState::CopyFrom(const ControllerElementState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ControllerElementState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerElementState::IsInitialized() const {
  return true;
}

void ControllerElementState::Swap(ControllerElementState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerElementState::InternalSwap(ControllerElementState* other) {
  using std::swap;
  swap(handle_, other->handle_);
  swap(event_type_, other->event_type_);
  swap(axis_value_, other->axis_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerElementState::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionNotification::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ActionNotification_default_instance_._instance.get_mutable()->handle_ = const_cast< ::Kinova::Api::Base::ActionHandle*>(
      ::Kinova::Api::Base::ActionHandle::internal_default_instance());
  ::Kinova::Api::Base::_ActionNotification_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::Kinova::Api::Common::Timestamp*>(
      ::Kinova::Api::Common::Timestamp::internal_default_instance());
  ::Kinova::Api::Base::_ActionNotification_default_instance_._instance.get_mutable()->user_handle_ = const_cast< ::Kinova::Api::Common::UserProfileHandle*>(
      ::Kinova::Api::Common::UserProfileHandle::internal_default_instance());
  ::Kinova::Api::Base::_ActionNotification_default_instance_._instance.get_mutable()->connection_ = const_cast< ::Kinova::Api::Common::Connection*>(
      ::Kinova::Api::Common::Connection::internal_default_instance());
}
void ActionNotification::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
void ActionNotification::clear_user_handle() {
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
}
void ActionNotification::clear_connection() {
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionNotification::kActionEventFieldNumber;
const int ActionNotification::kHandleFieldNumber;
const int ActionNotification::kTimestampFieldNumber;
const int ActionNotification::kUserHandleFieldNumber;
const int ActionNotification::kAbortDetailsFieldNumber;
const int ActionNotification::kConnectionFieldNumber;
const int ActionNotification::kTrajectoryInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionNotification::ActionNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ActionNotification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ActionNotification)
}
ActionNotification::ActionNotification(const ActionNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      trajectory_info_(from.trajectory_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_handle()) {
    handle_ = new ::Kinova::Api::Base::ActionHandle(*from.handle_);
  } else {
    handle_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::Kinova::Api::Common::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_user_handle()) {
    user_handle_ = new ::Kinova::Api::Common::UserProfileHandle(*from.user_handle_);
  } else {
    user_handle_ = NULL;
  }
  if (from.has_connection()) {
    connection_ = new ::Kinova::Api::Common::Connection(*from.connection_);
  } else {
    connection_ = NULL;
  }
  ::memcpy(&action_event_, &from.action_event_,
    static_cast<size_t>(reinterpret_cast<char*>(&abort_details_) -
    reinterpret_cast<char*>(&action_event_)) + sizeof(abort_details_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ActionNotification)
}

void ActionNotification::SharedCtor() {
  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&abort_details_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(abort_details_));
}

ActionNotification::~ActionNotification() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ActionNotification)
  SharedDtor();
}

void ActionNotification::SharedDtor() {
  if (this != internal_default_instance()) delete handle_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete user_handle_;
  if (this != internal_default_instance()) delete connection_;
}

void ActionNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionNotification::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionNotification& ActionNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ActionNotification.base);
  return *internal_default_instance();
}


void ActionNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ActionNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_info_.Clear();
  if (GetArenaNoVirtual() == NULL && handle_ != NULL) {
    delete handle_;
  }
  handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
  ::memset(&action_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&abort_details_) -
      reinterpret_cast<char*>(&action_event_)) + sizeof(abort_details_));
  _internal_metadata_.Clear();
}

bool ActionNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ActionNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ActionEvent action_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action_event(static_cast< ::Kinova::Api::Base::ActionEvent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.ActionHandle handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Timestamp timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.SubErrorCodes abort_details = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_abort_details(static_cast< ::Kinova::Api::SubErrorCodes >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Connection connection = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Kinova.Api.Base.TrajectoryInfo trajectory_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trajectory_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ActionNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ActionNotification)
  return false;
#undef DO_
}

void ActionNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ActionNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ActionEvent action_event = 1;
  if (this->action_event() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action_event(), output);
  }

  // .Kinova.Api.Base.ActionHandle handle = 2;
  if (this->has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_handle(), output);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_timestamp(), output);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_user_handle(), output);
  }

  // .Kinova.Api.SubErrorCodes abort_details = 5;
  if (this->abort_details() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->abort_details(), output);
  }

  // .Kinova.Api.Common.Connection connection = 6;
  if (this->has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_connection(), output);
  }

  // repeated .Kinova.Api.Base.TrajectoryInfo trajectory_info = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->trajectory_info(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ActionNotification)
}

::google::protobuf::uint8* ActionNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ActionNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ActionEvent action_event = 1;
  if (this->action_event() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action_event(), target);
  }

  // .Kinova.Api.Base.ActionHandle handle = 2;
  if (this->has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_handle(), deterministic, target);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_timestamp(), deterministic, target);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_user_handle(), deterministic, target);
  }

  // .Kinova.Api.SubErrorCodes abort_details = 5;
  if (this->abort_details() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->abort_details(), target);
  }

  // .Kinova.Api.Common.Connection connection = 6;
  if (this->has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_connection(), deterministic, target);
  }

  // repeated .Kinova.Api.Base.TrajectoryInfo trajectory_info = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->trajectory_info(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ActionNotification)
  return target;
}

size_t ActionNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ActionNotification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.TrajectoryInfo trajectory_info = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectory_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trajectory_info(static_cast<int>(i)));
    }
  }

  // .Kinova.Api.Base.ActionHandle handle = 2;
  if (this->has_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_handle_);
  }

  // .Kinova.Api.Common.Connection connection = 6;
  if (this->has_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *connection_);
  }

  // .Kinova.Api.Base.ActionEvent action_event = 1;
  if (this->action_event() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action_event());
  }

  // .Kinova.Api.SubErrorCodes abort_details = 5;
  if (this->abort_details() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->abort_details());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ActionNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ActionNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ActionNotification)
    MergeFrom(*source);
  }
}

void ActionNotification::MergeFrom(const ActionNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ActionNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_info_.MergeFrom(from.trajectory_info_);
  if (from.has_handle()) {
    mutable_handle()->::Kinova::Api::Base::ActionHandle::MergeFrom(from.handle());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::Kinova::Api::Common::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_user_handle()) {
    mutable_user_handle()->::Kinova::Api::Common::UserProfileHandle::MergeFrom(from.user_handle());
  }
  if (from.has_connection()) {
    mutable_connection()->::Kinova::Api::Common::Connection::MergeFrom(from.connection());
  }
  if (from.action_event() != 0) {
    set_action_event(from.action_event());
  }
  if (from.abort_details() != 0) {
    set_abort_details(from.abort_details());
  }
}

void ActionNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ActionNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionNotification::CopyFrom(const ActionNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ActionNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionNotification::IsInitialized() const {
  return true;
}

void ActionNotification::Swap(ActionNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionNotification::InternalSwap(ActionNotification* other) {
  using std::swap;
  CastToBase(&trajectory_info_)->InternalSwap(CastToBase(&other->trajectory_info_));
  swap(handle_, other->handle_);
  swap(timestamp_, other->timestamp_);
  swap(user_handle_, other->user_handle_);
  swap(connection_, other->connection_);
  swap(action_event_, other->action_event_);
  swap(abort_details_, other->abort_details_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionNotification::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrajectoryInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryInfo::kTrajectoryInfoTypeFieldNumber;
const int TrajectoryInfo::kWaypointIndexFieldNumber;
const int TrajectoryInfo::kJointIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryInfo::TrajectoryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_TrajectoryInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.TrajectoryInfo)
}
TrajectoryInfo::TrajectoryInfo(const TrajectoryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&trajectory_info_type_, &from.trajectory_info_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&joint_index_) -
    reinterpret_cast<char*>(&trajectory_info_type_)) + sizeof(joint_index_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.TrajectoryInfo)
}

void TrajectoryInfo::SharedCtor() {
  ::memset(&trajectory_info_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&joint_index_) -
      reinterpret_cast<char*>(&trajectory_info_type_)) + sizeof(joint_index_));
}

TrajectoryInfo::~TrajectoryInfo() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.TrajectoryInfo)
  SharedDtor();
}

void TrajectoryInfo::SharedDtor() {
}

void TrajectoryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrajectoryInfo::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryInfo& TrajectoryInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_TrajectoryInfo.base);
  return *internal_default_instance();
}


void TrajectoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.TrajectoryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&trajectory_info_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&joint_index_) -
      reinterpret_cast<char*>(&trajectory_info_type_)) + sizeof(joint_index_));
  _internal_metadata_.Clear();
}

bool TrajectoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.TrajectoryInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.TrajectoryInfoType trajectory_info_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trajectory_info_type(static_cast< ::Kinova::Api::Base::TrajectoryInfoType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 waypoint_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &waypoint_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 joint_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joint_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.TrajectoryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.TrajectoryInfo)
  return false;
#undef DO_
}

void TrajectoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.TrajectoryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.TrajectoryInfoType trajectory_info_type = 1;
  if (this->trajectory_info_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->trajectory_info_type(), output);
  }

  // uint32 waypoint_index = 2;
  if (this->waypoint_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->waypoint_index(), output);
  }

  // uint32 joint_index = 3;
  if (this->joint_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->joint_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.TrajectoryInfo)
}

::google::protobuf::uint8* TrajectoryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.TrajectoryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.TrajectoryInfoType trajectory_info_type = 1;
  if (this->trajectory_info_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->trajectory_info_type(), target);
  }

  // uint32 waypoint_index = 2;
  if (this->waypoint_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->waypoint_index(), target);
  }

  // uint32 joint_index = 3;
  if (this->joint_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->joint_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.TrajectoryInfo)
  return target;
}

size_t TrajectoryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.TrajectoryInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.TrajectoryInfoType trajectory_info_type = 1;
  if (this->trajectory_info_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trajectory_info_type());
  }

  // uint32 waypoint_index = 2;
  if (this->waypoint_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->waypoint_index());
  }

  // uint32 joint_index = 3;
  if (this->joint_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->joint_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.TrajectoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.TrajectoryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.TrajectoryInfo)
    MergeFrom(*source);
  }
}

void TrajectoryInfo::MergeFrom(const TrajectoryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.TrajectoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trajectory_info_type() != 0) {
    set_trajectory_info_type(from.trajectory_info_type());
  }
  if (from.waypoint_index() != 0) {
    set_waypoint_index(from.waypoint_index());
  }
  if (from.joint_index() != 0) {
    set_joint_index(from.joint_index());
  }
}

void TrajectoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.TrajectoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryInfo::CopyFrom(const TrajectoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.TrajectoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryInfo::IsInitialized() const {
  return true;
}

void TrajectoryInfo::Swap(TrajectoryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryInfo::InternalSwap(TrajectoryInfo* other) {
  using std::swap;
  swap(trajectory_info_type_, other->trajectory_info_type_);
  swap(waypoint_index_, other->waypoint_index_);
  swap(joint_index_, other->joint_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrajectoryInfo::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionExecutionState::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ActionExecutionState_default_instance_._instance.get_mutable()->handle_ = const_cast< ::Kinova::Api::Base::ActionHandle*>(
      ::Kinova::Api::Base::ActionHandle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionExecutionState::kActionEventFieldNumber;
const int ActionExecutionState::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionExecutionState::ActionExecutionState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ActionExecutionState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ActionExecutionState)
}
ActionExecutionState::ActionExecutionState(const ActionExecutionState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_handle()) {
    handle_ = new ::Kinova::Api::Base::ActionHandle(*from.handle_);
  } else {
    handle_ = NULL;
  }
  action_event_ = from.action_event_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ActionExecutionState)
}

void ActionExecutionState::SharedCtor() {
  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_event_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(action_event_));
}

ActionExecutionState::~ActionExecutionState() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ActionExecutionState)
  SharedDtor();
}

void ActionExecutionState::SharedDtor() {
  if (this != internal_default_instance()) delete handle_;
}

void ActionExecutionState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionExecutionState::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionExecutionState& ActionExecutionState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ActionExecutionState.base);
  return *internal_default_instance();
}


void ActionExecutionState::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ActionExecutionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && handle_ != NULL) {
    delete handle_;
  }
  handle_ = NULL;
  action_event_ = 0;
  _internal_metadata_.Clear();
}

bool ActionExecutionState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ActionExecutionState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ActionEvent action_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action_event(static_cast< ::Kinova::Api::Base::ActionEvent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.ActionHandle handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ActionExecutionState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ActionExecutionState)
  return false;
#undef DO_
}

void ActionExecutionState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ActionExecutionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ActionEvent action_event = 1;
  if (this->action_event() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action_event(), output);
  }

  // .Kinova.Api.Base.ActionHandle handle = 2;
  if (this->has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_handle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ActionExecutionState)
}

::google::protobuf::uint8* ActionExecutionState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ActionExecutionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ActionEvent action_event = 1;
  if (this->action_event() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action_event(), target);
  }

  // .Kinova.Api.Base.ActionHandle handle = 2;
  if (this->has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_handle(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ActionExecutionState)
  return target;
}

size_t ActionExecutionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ActionExecutionState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.ActionHandle handle = 2;
  if (this->has_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  // .Kinova.Api.Base.ActionEvent action_event = 1;
  if (this->action_event() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action_event());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionExecutionState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ActionExecutionState)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionExecutionState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionExecutionState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ActionExecutionState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ActionExecutionState)
    MergeFrom(*source);
  }
}

void ActionExecutionState::MergeFrom(const ActionExecutionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ActionExecutionState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_handle()) {
    mutable_handle()->::Kinova::Api::Base::ActionHandle::MergeFrom(from.handle());
  }
  if (from.action_event() != 0) {
    set_action_event(from.action_event());
  }
}

void ActionExecutionState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ActionExecutionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionExecutionState::CopyFrom(const ActionExecutionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ActionExecutionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionExecutionState::IsInitialized() const {
  return true;
}

void ActionExecutionState::Swap(ActionExecutionState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionExecutionState::InternalSwap(ActionExecutionState* other) {
  using std::swap;
  swap(handle_, other->handle_);
  swap(action_event_, other->action_event_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionExecutionState::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RobotEventNotification::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_RobotEventNotification_default_instance_._instance.get_mutable()->handle_ = const_cast< ::Kinova::Api::Common::DeviceHandle*>(
      ::Kinova::Api::Common::DeviceHandle::internal_default_instance());
  ::Kinova::Api::Base::_RobotEventNotification_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::Kinova::Api::Common::Timestamp*>(
      ::Kinova::Api::Common::Timestamp::internal_default_instance());
  ::Kinova::Api::Base::_RobotEventNotification_default_instance_._instance.get_mutable()->user_handle_ = const_cast< ::Kinova::Api::Common::UserProfileHandle*>(
      ::Kinova::Api::Common::UserProfileHandle::internal_default_instance());
  ::Kinova::Api::Base::_RobotEventNotification_default_instance_._instance.get_mutable()->connection_ = const_cast< ::Kinova::Api::Common::Connection*>(
      ::Kinova::Api::Common::Connection::internal_default_instance());
}
void RobotEventNotification::clear_handle() {
  if (GetArenaNoVirtual() == NULL && handle_ != NULL) {
    delete handle_;
  }
  handle_ = NULL;
}
void RobotEventNotification::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
void RobotEventNotification::clear_user_handle() {
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
}
void RobotEventNotification::clear_connection() {
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotEventNotification::kEventFieldNumber;
const int RobotEventNotification::kHandleFieldNumber;
const int RobotEventNotification::kTimestampFieldNumber;
const int RobotEventNotification::kUserHandleFieldNumber;
const int RobotEventNotification::kConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotEventNotification::RobotEventNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_RobotEventNotification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.RobotEventNotification)
}
RobotEventNotification::RobotEventNotification(const RobotEventNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_handle()) {
    handle_ = new ::Kinova::Api::Common::DeviceHandle(*from.handle_);
  } else {
    handle_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::Kinova::Api::Common::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_user_handle()) {
    user_handle_ = new ::Kinova::Api::Common::UserProfileHandle(*from.user_handle_);
  } else {
    user_handle_ = NULL;
  }
  if (from.has_connection()) {
    connection_ = new ::Kinova::Api::Common::Connection(*from.connection_);
  } else {
    connection_ = NULL;
  }
  event_ = from.event_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.RobotEventNotification)
}

void RobotEventNotification::SharedCtor() {
  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(event_));
}

RobotEventNotification::~RobotEventNotification() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.RobotEventNotification)
  SharedDtor();
}

void RobotEventNotification::SharedDtor() {
  if (this != internal_default_instance()) delete handle_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete user_handle_;
  if (this != internal_default_instance()) delete connection_;
}

void RobotEventNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RobotEventNotification::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RobotEventNotification& RobotEventNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_RobotEventNotification.base);
  return *internal_default_instance();
}


void RobotEventNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.RobotEventNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && handle_ != NULL) {
    delete handle_;
  }
  handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
  event_ = 0;
  _internal_metadata_.Clear();
}

bool RobotEventNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.RobotEventNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.RobotEvent event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event(static_cast< ::Kinova::Api::Base::RobotEvent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.DeviceHandle handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Timestamp timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Connection connection = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.RobotEventNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.RobotEventNotification)
  return false;
#undef DO_
}

void RobotEventNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.RobotEventNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.RobotEvent event = 1;
  if (this->event() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event(), output);
  }

  // .Kinova.Api.Common.DeviceHandle handle = 2;
  if (this->has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_handle(), output);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_timestamp(), output);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_user_handle(), output);
  }

  // .Kinova.Api.Common.Connection connection = 6;
  if (this->has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_connection(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.RobotEventNotification)
}

::google::protobuf::uint8* RobotEventNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.RobotEventNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.RobotEvent event = 1;
  if (this->event() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event(), target);
  }

  // .Kinova.Api.Common.DeviceHandle handle = 2;
  if (this->has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_handle(), deterministic, target);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_timestamp(), deterministic, target);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_user_handle(), deterministic, target);
  }

  // .Kinova.Api.Common.Connection connection = 6;
  if (this->has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_connection(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.RobotEventNotification)
  return target;
}

size_t RobotEventNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.RobotEventNotification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Common.DeviceHandle handle = 2;
  if (this->has_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_handle_);
  }

  // .Kinova.Api.Common.Connection connection = 6;
  if (this->has_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *connection_);
  }

  // .Kinova.Api.Base.RobotEvent event = 1;
  if (this->event() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotEventNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.RobotEventNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotEventNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotEventNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.RobotEventNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.RobotEventNotification)
    MergeFrom(*source);
  }
}

void RobotEventNotification::MergeFrom(const RobotEventNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.RobotEventNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_handle()) {
    mutable_handle()->::Kinova::Api::Common::DeviceHandle::MergeFrom(from.handle());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::Kinova::Api::Common::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_user_handle()) {
    mutable_user_handle()->::Kinova::Api::Common::UserProfileHandle::MergeFrom(from.user_handle());
  }
  if (from.has_connection()) {
    mutable_connection()->::Kinova::Api::Common::Connection::MergeFrom(from.connection());
  }
  if (from.event() != 0) {
    set_event(from.event());
  }
}

void RobotEventNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.RobotEventNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotEventNotification::CopyFrom(const RobotEventNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.RobotEventNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotEventNotification::IsInitialized() const {
  return true;
}

void RobotEventNotification::Swap(RobotEventNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotEventNotification::InternalSwap(RobotEventNotification* other) {
  using std::swap;
  swap(handle_, other->handle_);
  swap(timestamp_, other->timestamp_);
  swap(user_handle_, other->user_handle_);
  swap(connection_, other->connection_);
  swap(event_, other->event_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RobotEventNotification::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FactoryNotification::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_FactoryNotification_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::Kinova::Api::Common::Timestamp*>(
      ::Kinova::Api::Common::Timestamp::internal_default_instance());
  ::Kinova::Api::Base::_FactoryNotification_default_instance_._instance.get_mutable()->user_handle_ = const_cast< ::Kinova::Api::Common::UserProfileHandle*>(
      ::Kinova::Api::Common::UserProfileHandle::internal_default_instance());
  ::Kinova::Api::Base::_FactoryNotification_default_instance_._instance.get_mutable()->connection_ = const_cast< ::Kinova::Api::Common::Connection*>(
      ::Kinova::Api::Common::Connection::internal_default_instance());
}
void FactoryNotification::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
void FactoryNotification::clear_user_handle() {
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
}
void FactoryNotification::clear_connection() {
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FactoryNotification::kEventFieldNumber;
const int FactoryNotification::kTimestampFieldNumber;
const int FactoryNotification::kUserHandleFieldNumber;
const int FactoryNotification::kConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FactoryNotification::FactoryNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_FactoryNotification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.FactoryNotification)
}
FactoryNotification::FactoryNotification(const FactoryNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::Kinova::Api::Common::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_user_handle()) {
    user_handle_ = new ::Kinova::Api::Common::UserProfileHandle(*from.user_handle_);
  } else {
    user_handle_ = NULL;
  }
  if (from.has_connection()) {
    connection_ = new ::Kinova::Api::Common::Connection(*from.connection_);
  } else {
    connection_ = NULL;
  }
  event_ = from.event_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.FactoryNotification)
}

void FactoryNotification::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(event_));
}

FactoryNotification::~FactoryNotification() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.FactoryNotification)
  SharedDtor();
}

void FactoryNotification::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete user_handle_;
  if (this != internal_default_instance()) delete connection_;
}

void FactoryNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FactoryNotification::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FactoryNotification& FactoryNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_FactoryNotification.base);
  return *internal_default_instance();
}


void FactoryNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.FactoryNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
  event_ = 0;
  _internal_metadata_.Clear();
}

bool FactoryNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.FactoryNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.FactoryEvent event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event(static_cast< ::Kinova::Api::Base::FactoryEvent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Timestamp timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Connection connection = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.FactoryNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.FactoryNotification)
  return false;
#undef DO_
}

void FactoryNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.FactoryNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.FactoryEvent event = 1;
  if (this->event() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event(), output);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_timestamp(), output);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
  if (this->has_user_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_user_handle(), output);
  }

  // .Kinova.Api.Common.Connection connection = 4;
  if (this->has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_connection(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.FactoryNotification)
}

::google::protobuf::uint8* FactoryNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.FactoryNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.FactoryEvent event = 1;
  if (this->event() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event(), target);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_timestamp(), deterministic, target);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
  if (this->has_user_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_user_handle(), deterministic, target);
  }

  // .Kinova.Api.Common.Connection connection = 4;
  if (this->has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_connection(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.FactoryNotification)
  return target;
}

size_t FactoryNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.FactoryNotification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
  if (this->has_user_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_handle_);
  }

  // .Kinova.Api.Common.Connection connection = 4;
  if (this->has_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *connection_);
  }

  // .Kinova.Api.Base.FactoryEvent event = 1;
  if (this->event() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FactoryNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.FactoryNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const FactoryNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FactoryNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.FactoryNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.FactoryNotification)
    MergeFrom(*source);
  }
}

void FactoryNotification::MergeFrom(const FactoryNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.FactoryNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    mutable_timestamp()->::Kinova::Api::Common::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_user_handle()) {
    mutable_user_handle()->::Kinova::Api::Common::UserProfileHandle::MergeFrom(from.user_handle());
  }
  if (from.has_connection()) {
    mutable_connection()->::Kinova::Api::Common::Connection::MergeFrom(from.connection());
  }
  if (from.event() != 0) {
    set_event(from.event());
  }
}

void FactoryNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.FactoryNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactoryNotification::CopyFrom(const FactoryNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.FactoryNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactoryNotification::IsInitialized() const {
  return true;
}

void FactoryNotification::Swap(FactoryNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FactoryNotification::InternalSwap(FactoryNotification* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(user_handle_, other->user_handle_);
  swap(connection_, other->connection_);
  swap(event_, other->event_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FactoryNotification::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NetworkNotification::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_NetworkNotification_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::Kinova::Api::Common::Timestamp*>(
      ::Kinova::Api::Common::Timestamp::internal_default_instance());
  ::Kinova::Api::Base::_NetworkNotification_default_instance_._instance.get_mutable()->user_handle_ = const_cast< ::Kinova::Api::Common::UserProfileHandle*>(
      ::Kinova::Api::Common::UserProfileHandle::internal_default_instance());
  ::Kinova::Api::Base::_NetworkNotification_default_instance_._instance.get_mutable()->connection_ = const_cast< ::Kinova::Api::Common::Connection*>(
      ::Kinova::Api::Common::Connection::internal_default_instance());
}
void NetworkNotification::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
void NetworkNotification::clear_user_handle() {
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
}
void NetworkNotification::clear_connection() {
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkNotification::kEventFieldNumber;
const int NetworkNotification::kTimestampFieldNumber;
const int NetworkNotification::kUserHandleFieldNumber;
const int NetworkNotification::kConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkNotification::NetworkNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_NetworkNotification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.NetworkNotification)
}
NetworkNotification::NetworkNotification(const NetworkNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::Kinova::Api::Common::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_user_handle()) {
    user_handle_ = new ::Kinova::Api::Common::UserProfileHandle(*from.user_handle_);
  } else {
    user_handle_ = NULL;
  }
  if (from.has_connection()) {
    connection_ = new ::Kinova::Api::Common::Connection(*from.connection_);
  } else {
    connection_ = NULL;
  }
  event_ = from.event_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.NetworkNotification)
}

void NetworkNotification::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(event_));
}

NetworkNotification::~NetworkNotification() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.NetworkNotification)
  SharedDtor();
}

void NetworkNotification::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete user_handle_;
  if (this != internal_default_instance()) delete connection_;
}

void NetworkNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NetworkNotification::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetworkNotification& NetworkNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_NetworkNotification.base);
  return *internal_default_instance();
}


void NetworkNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.NetworkNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
  event_ = 0;
  _internal_metadata_.Clear();
}

bool NetworkNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.NetworkNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.NetworkEvent event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event(static_cast< ::Kinova::Api::Base::NetworkEvent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Timestamp timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Connection connection = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.NetworkNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.NetworkNotification)
  return false;
#undef DO_
}

void NetworkNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.NetworkNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.NetworkEvent event = 1;
  if (this->event() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event(), output);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_timestamp(), output);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
  if (this->has_user_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_user_handle(), output);
  }

  // .Kinova.Api.Common.Connection connection = 4;
  if (this->has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_connection(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.NetworkNotification)
}

::google::protobuf::uint8* NetworkNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.NetworkNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.NetworkEvent event = 1;
  if (this->event() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event(), target);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_timestamp(), deterministic, target);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
  if (this->has_user_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_user_handle(), deterministic, target);
  }

  // .Kinova.Api.Common.Connection connection = 4;
  if (this->has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_connection(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.NetworkNotification)
  return target;
}

size_t NetworkNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.NetworkNotification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 3;
  if (this->has_user_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_handle_);
  }

  // .Kinova.Api.Common.Connection connection = 4;
  if (this->has_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *connection_);
  }

  // .Kinova.Api.Base.NetworkEvent event = 1;
  if (this->event() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.NetworkNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.NetworkNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.NetworkNotification)
    MergeFrom(*source);
  }
}

void NetworkNotification::MergeFrom(const NetworkNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.NetworkNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    mutable_timestamp()->::Kinova::Api::Common::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_user_handle()) {
    mutable_user_handle()->::Kinova::Api::Common::UserProfileHandle::MergeFrom(from.user_handle());
  }
  if (from.has_connection()) {
    mutable_connection()->::Kinova::Api::Common::Connection::MergeFrom(from.connection());
  }
  if (from.event() != 0) {
    set_event(from.event());
  }
}

void NetworkNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.NetworkNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkNotification::CopyFrom(const NetworkNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.NetworkNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkNotification::IsInitialized() const {
  return true;
}

void NetworkNotification::Swap(NetworkNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkNotification::InternalSwap(NetworkNotification* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(user_handle_, other->user_handle_);
  swap(connection_, other->connection_);
  swap(event_, other->event_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NetworkNotification::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigurationChangeNotificationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigurationChangeNotificationList::kNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigurationChangeNotificationList::ConfigurationChangeNotificationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ConfigurationChangeNotificationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ConfigurationChangeNotificationList)
}
ConfigurationChangeNotificationList::ConfigurationChangeNotificationList(const ConfigurationChangeNotificationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ConfigurationChangeNotificationList)
}

void ConfigurationChangeNotificationList::SharedCtor() {
}

ConfigurationChangeNotificationList::~ConfigurationChangeNotificationList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ConfigurationChangeNotificationList)
  SharedDtor();
}

void ConfigurationChangeNotificationList::SharedDtor() {
}

void ConfigurationChangeNotificationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigurationChangeNotificationList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigurationChangeNotificationList& ConfigurationChangeNotificationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ConfigurationChangeNotificationList.base);
  return *internal_default_instance();
}


void ConfigurationChangeNotificationList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ConfigurationChangeNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigurationChangeNotificationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ConfigurationChangeNotificationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.ConfigurationChangeNotification notifications = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ConfigurationChangeNotificationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ConfigurationChangeNotificationList)
  return false;
#undef DO_
}

void ConfigurationChangeNotificationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ConfigurationChangeNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.ConfigurationChangeNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->notifications(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ConfigurationChangeNotificationList)
}

::google::protobuf::uint8* ConfigurationChangeNotificationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ConfigurationChangeNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.ConfigurationChangeNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->notifications(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ConfigurationChangeNotificationList)
  return target;
}

size_t ConfigurationChangeNotificationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ConfigurationChangeNotificationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.ConfigurationChangeNotification notifications = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationChangeNotificationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ConfigurationChangeNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigurationChangeNotificationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigurationChangeNotificationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ConfigurationChangeNotificationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ConfigurationChangeNotificationList)
    MergeFrom(*source);
  }
}

void ConfigurationChangeNotificationList::MergeFrom(const ConfigurationChangeNotificationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ConfigurationChangeNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
}

void ConfigurationChangeNotificationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ConfigurationChangeNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationChangeNotificationList::CopyFrom(const ConfigurationChangeNotificationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ConfigurationChangeNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationChangeNotificationList::IsInitialized() const {
  return true;
}

void ConfigurationChangeNotificationList::Swap(ConfigurationChangeNotificationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigurationChangeNotificationList::InternalSwap(ConfigurationChangeNotificationList* other) {
  using std::swap;
  CastToBase(&notifications_)->InternalSwap(CastToBase(&other->notifications_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigurationChangeNotificationList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MappingInfoNotificationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MappingInfoNotificationList::kNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MappingInfoNotificationList::MappingInfoNotificationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_MappingInfoNotificationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.MappingInfoNotificationList)
}
MappingInfoNotificationList::MappingInfoNotificationList(const MappingInfoNotificationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.MappingInfoNotificationList)
}

void MappingInfoNotificationList::SharedCtor() {
}

MappingInfoNotificationList::~MappingInfoNotificationList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.MappingInfoNotificationList)
  SharedDtor();
}

void MappingInfoNotificationList::SharedDtor() {
}

void MappingInfoNotificationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MappingInfoNotificationList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MappingInfoNotificationList& MappingInfoNotificationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_MappingInfoNotificationList.base);
  return *internal_default_instance();
}


void MappingInfoNotificationList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.MappingInfoNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  _internal_metadata_.Clear();
}

bool MappingInfoNotificationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.MappingInfoNotificationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.MappingInfoNotification notifications = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.MappingInfoNotificationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.MappingInfoNotificationList)
  return false;
#undef DO_
}

void MappingInfoNotificationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.MappingInfoNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.MappingInfoNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->notifications(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.MappingInfoNotificationList)
}

::google::protobuf::uint8* MappingInfoNotificationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.MappingInfoNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.MappingInfoNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->notifications(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.MappingInfoNotificationList)
  return target;
}

size_t MappingInfoNotificationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.MappingInfoNotificationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.MappingInfoNotification notifications = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MappingInfoNotificationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.MappingInfoNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  const MappingInfoNotificationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MappingInfoNotificationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.MappingInfoNotificationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.MappingInfoNotificationList)
    MergeFrom(*source);
  }
}

void MappingInfoNotificationList::MergeFrom(const MappingInfoNotificationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.MappingInfoNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
}

void MappingInfoNotificationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.MappingInfoNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MappingInfoNotificationList::CopyFrom(const MappingInfoNotificationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.MappingInfoNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MappingInfoNotificationList::IsInitialized() const {
  return true;
}

void MappingInfoNotificationList::Swap(MappingInfoNotificationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MappingInfoNotificationList::InternalSwap(MappingInfoNotificationList* other) {
  using std::swap;
  CastToBase(&notifications_)->InternalSwap(CastToBase(&other->notifications_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MappingInfoNotificationList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControlModeNotificationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlModeNotificationList::kNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlModeNotificationList::ControlModeNotificationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ControlModeNotificationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ControlModeNotificationList)
}
ControlModeNotificationList::ControlModeNotificationList(const ControlModeNotificationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ControlModeNotificationList)
}

void ControlModeNotificationList::SharedCtor() {
}

ControlModeNotificationList::~ControlModeNotificationList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ControlModeNotificationList)
  SharedDtor();
}

void ControlModeNotificationList::SharedDtor() {
}

void ControlModeNotificationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControlModeNotificationList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControlModeNotificationList& ControlModeNotificationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ControlModeNotificationList.base);
  return *internal_default_instance();
}


void ControlModeNotificationList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ControlModeNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  _internal_metadata_.Clear();
}

bool ControlModeNotificationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ControlModeNotificationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.ControlModeNotification notifications = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ControlModeNotificationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ControlModeNotificationList)
  return false;
#undef DO_
}

void ControlModeNotificationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ControlModeNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.ControlModeNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->notifications(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ControlModeNotificationList)
}

::google::protobuf::uint8* ControlModeNotificationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ControlModeNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.ControlModeNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->notifications(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ControlModeNotificationList)
  return target;
}

size_t ControlModeNotificationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ControlModeNotificationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.ControlModeNotification notifications = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlModeNotificationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ControlModeNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlModeNotificationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlModeNotificationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ControlModeNotificationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ControlModeNotificationList)
    MergeFrom(*source);
  }
}

void ControlModeNotificationList::MergeFrom(const ControlModeNotificationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ControlModeNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
}

void ControlModeNotificationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ControlModeNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlModeNotificationList::CopyFrom(const ControlModeNotificationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ControlModeNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlModeNotificationList::IsInitialized() const {
  return true;
}

void ControlModeNotificationList::Swap(ControlModeNotificationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlModeNotificationList::InternalSwap(ControlModeNotificationList* other) {
  using std::swap;
  CastToBase(&notifications_)->InternalSwap(CastToBase(&other->notifications_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControlModeNotificationList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OperatingModeNotificationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperatingModeNotificationList::kNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperatingModeNotificationList::OperatingModeNotificationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_OperatingModeNotificationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.OperatingModeNotificationList)
}
OperatingModeNotificationList::OperatingModeNotificationList(const OperatingModeNotificationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.OperatingModeNotificationList)
}

void OperatingModeNotificationList::SharedCtor() {
}

OperatingModeNotificationList::~OperatingModeNotificationList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.OperatingModeNotificationList)
  SharedDtor();
}

void OperatingModeNotificationList::SharedDtor() {
}

void OperatingModeNotificationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OperatingModeNotificationList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperatingModeNotificationList& OperatingModeNotificationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_OperatingModeNotificationList.base);
  return *internal_default_instance();
}


void OperatingModeNotificationList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.OperatingModeNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  _internal_metadata_.Clear();
}

bool OperatingModeNotificationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.OperatingModeNotificationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.OperatingModeNotification notifications = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.OperatingModeNotificationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.OperatingModeNotificationList)
  return false;
#undef DO_
}

void OperatingModeNotificationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.OperatingModeNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.OperatingModeNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->notifications(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.OperatingModeNotificationList)
}

::google::protobuf::uint8* OperatingModeNotificationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.OperatingModeNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.OperatingModeNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->notifications(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.OperatingModeNotificationList)
  return target;
}

size_t OperatingModeNotificationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.OperatingModeNotificationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.OperatingModeNotification notifications = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperatingModeNotificationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.OperatingModeNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  const OperatingModeNotificationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperatingModeNotificationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.OperatingModeNotificationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.OperatingModeNotificationList)
    MergeFrom(*source);
  }
}

void OperatingModeNotificationList::MergeFrom(const OperatingModeNotificationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.OperatingModeNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
}

void OperatingModeNotificationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.OperatingModeNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperatingModeNotificationList::CopyFrom(const OperatingModeNotificationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.OperatingModeNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatingModeNotificationList::IsInitialized() const {
  return true;
}

void OperatingModeNotificationList::Swap(OperatingModeNotificationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperatingModeNotificationList::InternalSwap(OperatingModeNotificationList* other) {
  using std::swap;
  CastToBase(&notifications_)->InternalSwap(CastToBase(&other->notifications_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OperatingModeNotificationList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServoingModeNotificationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServoingModeNotificationList::kNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServoingModeNotificationList::ServoingModeNotificationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ServoingModeNotificationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ServoingModeNotificationList)
}
ServoingModeNotificationList::ServoingModeNotificationList(const ServoingModeNotificationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ServoingModeNotificationList)
}

void ServoingModeNotificationList::SharedCtor() {
}

ServoingModeNotificationList::~ServoingModeNotificationList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ServoingModeNotificationList)
  SharedDtor();
}

void ServoingModeNotificationList::SharedDtor() {
}

void ServoingModeNotificationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServoingModeNotificationList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServoingModeNotificationList& ServoingModeNotificationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ServoingModeNotificationList.base);
  return *internal_default_instance();
}


void ServoingModeNotificationList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ServoingModeNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  _internal_metadata_.Clear();
}

bool ServoingModeNotificationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ServoingModeNotificationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.ServoingModeNotification notifications = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ServoingModeNotificationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ServoingModeNotificationList)
  return false;
#undef DO_
}

void ServoingModeNotificationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ServoingModeNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.ServoingModeNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->notifications(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ServoingModeNotificationList)
}

::google::protobuf::uint8* ServoingModeNotificationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ServoingModeNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.ServoingModeNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->notifications(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ServoingModeNotificationList)
  return target;
}

size_t ServoingModeNotificationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ServoingModeNotificationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.ServoingModeNotification notifications = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServoingModeNotificationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ServoingModeNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  const ServoingModeNotificationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServoingModeNotificationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ServoingModeNotificationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ServoingModeNotificationList)
    MergeFrom(*source);
  }
}

void ServoingModeNotificationList::MergeFrom(const ServoingModeNotificationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ServoingModeNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
}

void ServoingModeNotificationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ServoingModeNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServoingModeNotificationList::CopyFrom(const ServoingModeNotificationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ServoingModeNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServoingModeNotificationList::IsInitialized() const {
  return true;
}

void ServoingModeNotificationList::Swap(ServoingModeNotificationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServoingModeNotificationList::InternalSwap(ServoingModeNotificationList* other) {
  using std::swap;
  CastToBase(&notifications_)->InternalSwap(CastToBase(&other->notifications_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServoingModeNotificationList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SequenceInfoNotificationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequenceInfoNotificationList::kNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequenceInfoNotificationList::SequenceInfoNotificationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_SequenceInfoNotificationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.SequenceInfoNotificationList)
}
SequenceInfoNotificationList::SequenceInfoNotificationList(const SequenceInfoNotificationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.SequenceInfoNotificationList)
}

void SequenceInfoNotificationList::SharedCtor() {
}

SequenceInfoNotificationList::~SequenceInfoNotificationList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.SequenceInfoNotificationList)
  SharedDtor();
}

void SequenceInfoNotificationList::SharedDtor() {
}

void SequenceInfoNotificationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SequenceInfoNotificationList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SequenceInfoNotificationList& SequenceInfoNotificationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_SequenceInfoNotificationList.base);
  return *internal_default_instance();
}


void SequenceInfoNotificationList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.SequenceInfoNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  _internal_metadata_.Clear();
}

bool SequenceInfoNotificationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.SequenceInfoNotificationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.SequenceInfoNotification notifications = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.SequenceInfoNotificationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.SequenceInfoNotificationList)
  return false;
#undef DO_
}

void SequenceInfoNotificationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.SequenceInfoNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.SequenceInfoNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->notifications(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.SequenceInfoNotificationList)
}

::google::protobuf::uint8* SequenceInfoNotificationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.SequenceInfoNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.SequenceInfoNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->notifications(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.SequenceInfoNotificationList)
  return target;
}

size_t SequenceInfoNotificationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.SequenceInfoNotificationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.SequenceInfoNotification notifications = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequenceInfoNotificationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.SequenceInfoNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  const SequenceInfoNotificationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SequenceInfoNotificationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.SequenceInfoNotificationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.SequenceInfoNotificationList)
    MergeFrom(*source);
  }
}

void SequenceInfoNotificationList::MergeFrom(const SequenceInfoNotificationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.SequenceInfoNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
}

void SequenceInfoNotificationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.SequenceInfoNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequenceInfoNotificationList::CopyFrom(const SequenceInfoNotificationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.SequenceInfoNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceInfoNotificationList::IsInitialized() const {
  return true;
}

void SequenceInfoNotificationList::Swap(SequenceInfoNotificationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequenceInfoNotificationList::InternalSwap(SequenceInfoNotificationList* other) {
  using std::swap;
  CastToBase(&notifications_)->InternalSwap(CastToBase(&other->notifications_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SequenceInfoNotificationList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProtectionZoneNotificationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtectionZoneNotificationList::kNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtectionZoneNotificationList::ProtectionZoneNotificationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ProtectionZoneNotificationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ProtectionZoneNotificationList)
}
ProtectionZoneNotificationList::ProtectionZoneNotificationList(const ProtectionZoneNotificationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ProtectionZoneNotificationList)
}

void ProtectionZoneNotificationList::SharedCtor() {
}

ProtectionZoneNotificationList::~ProtectionZoneNotificationList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ProtectionZoneNotificationList)
  SharedDtor();
}

void ProtectionZoneNotificationList::SharedDtor() {
}

void ProtectionZoneNotificationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProtectionZoneNotificationList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtectionZoneNotificationList& ProtectionZoneNotificationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ProtectionZoneNotificationList.base);
  return *internal_default_instance();
}


void ProtectionZoneNotificationList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ProtectionZoneNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  _internal_metadata_.Clear();
}

bool ProtectionZoneNotificationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ProtectionZoneNotificationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.ProtectionZoneNotification notifications = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ProtectionZoneNotificationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ProtectionZoneNotificationList)
  return false;
#undef DO_
}

void ProtectionZoneNotificationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ProtectionZoneNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.ProtectionZoneNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->notifications(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ProtectionZoneNotificationList)
}

::google::protobuf::uint8* ProtectionZoneNotificationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ProtectionZoneNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.ProtectionZoneNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->notifications(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ProtectionZoneNotificationList)
  return target;
}

size_t ProtectionZoneNotificationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ProtectionZoneNotificationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.ProtectionZoneNotification notifications = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtectionZoneNotificationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ProtectionZoneNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtectionZoneNotificationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtectionZoneNotificationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ProtectionZoneNotificationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ProtectionZoneNotificationList)
    MergeFrom(*source);
  }
}

void ProtectionZoneNotificationList::MergeFrom(const ProtectionZoneNotificationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ProtectionZoneNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
}

void ProtectionZoneNotificationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ProtectionZoneNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtectionZoneNotificationList::CopyFrom(const ProtectionZoneNotificationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ProtectionZoneNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtectionZoneNotificationList::IsInitialized() const {
  return true;
}

void ProtectionZoneNotificationList::Swap(ProtectionZoneNotificationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtectionZoneNotificationList::InternalSwap(ProtectionZoneNotificationList* other) {
  using std::swap;
  CastToBase(&notifications_)->InternalSwap(CastToBase(&other->notifications_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProtectionZoneNotificationList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserNotificationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserNotificationList::kNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserNotificationList::UserNotificationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_UserNotificationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.UserNotificationList)
}
UserNotificationList::UserNotificationList(const UserNotificationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.UserNotificationList)
}

void UserNotificationList::SharedCtor() {
}

UserNotificationList::~UserNotificationList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.UserNotificationList)
  SharedDtor();
}

void UserNotificationList::SharedDtor() {
}

void UserNotificationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserNotificationList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserNotificationList& UserNotificationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_UserNotificationList.base);
  return *internal_default_instance();
}


void UserNotificationList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.UserNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  _internal_metadata_.Clear();
}

bool UserNotificationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.UserNotificationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.UserNotification notifications = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.UserNotificationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.UserNotificationList)
  return false;
#undef DO_
}

void UserNotificationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.UserNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.UserNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->notifications(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.UserNotificationList)
}

::google::protobuf::uint8* UserNotificationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.UserNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.UserNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->notifications(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.UserNotificationList)
  return target;
}

size_t UserNotificationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.UserNotificationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.UserNotification notifications = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserNotificationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.UserNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  const UserNotificationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserNotificationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.UserNotificationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.UserNotificationList)
    MergeFrom(*source);
  }
}

void UserNotificationList::MergeFrom(const UserNotificationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.UserNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
}

void UserNotificationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.UserNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserNotificationList::CopyFrom(const UserNotificationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.UserNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserNotificationList::IsInitialized() const {
  return true;
}

void UserNotificationList::Swap(UserNotificationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserNotificationList::InternalSwap(UserNotificationList* other) {
  using std::swap;
  CastToBase(&notifications_)->InternalSwap(CastToBase(&other->notifications_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserNotificationList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SafetyNotificationList::InitAsDefaultInstance() {
}
void SafetyNotificationList::clear_notifications() {
  notifications_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SafetyNotificationList::kNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SafetyNotificationList::SafetyNotificationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_SafetyNotificationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.SafetyNotificationList)
}
SafetyNotificationList::SafetyNotificationList(const SafetyNotificationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.SafetyNotificationList)
}

void SafetyNotificationList::SharedCtor() {
}

SafetyNotificationList::~SafetyNotificationList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.SafetyNotificationList)
  SharedDtor();
}

void SafetyNotificationList::SharedDtor() {
}

void SafetyNotificationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SafetyNotificationList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SafetyNotificationList& SafetyNotificationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_SafetyNotificationList.base);
  return *internal_default_instance();
}


void SafetyNotificationList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.SafetyNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  _internal_metadata_.Clear();
}

bool SafetyNotificationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.SafetyNotificationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Common.SafetyNotification notifications = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.SafetyNotificationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.SafetyNotificationList)
  return false;
#undef DO_
}

void SafetyNotificationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.SafetyNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Common.SafetyNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->notifications(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.SafetyNotificationList)
}

::google::protobuf::uint8* SafetyNotificationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.SafetyNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Common.SafetyNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->notifications(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.SafetyNotificationList)
  return target;
}

size_t SafetyNotificationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.SafetyNotificationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Common.SafetyNotification notifications = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SafetyNotificationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.SafetyNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  const SafetyNotificationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SafetyNotificationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.SafetyNotificationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.SafetyNotificationList)
    MergeFrom(*source);
  }
}

void SafetyNotificationList::MergeFrom(const SafetyNotificationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.SafetyNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
}

void SafetyNotificationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.SafetyNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SafetyNotificationList::CopyFrom(const SafetyNotificationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.SafetyNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafetyNotificationList::IsInitialized() const {
  return true;
}

void SafetyNotificationList::Swap(SafetyNotificationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SafetyNotificationList::InternalSwap(SafetyNotificationList* other) {
  using std::swap;
  CastToBase(&notifications_)->InternalSwap(CastToBase(&other->notifications_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SafetyNotificationList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControllerNotificationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerNotificationList::kNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerNotificationList::ControllerNotificationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ControllerNotificationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ControllerNotificationList)
}
ControllerNotificationList::ControllerNotificationList(const ControllerNotificationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ControllerNotificationList)
}

void ControllerNotificationList::SharedCtor() {
}

ControllerNotificationList::~ControllerNotificationList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ControllerNotificationList)
  SharedDtor();
}

void ControllerNotificationList::SharedDtor() {
}

void ControllerNotificationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerNotificationList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerNotificationList& ControllerNotificationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ControllerNotificationList.base);
  return *internal_default_instance();
}


void ControllerNotificationList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ControllerNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  _internal_metadata_.Clear();
}

bool ControllerNotificationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ControllerNotificationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.ControllerNotification notifications = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ControllerNotificationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ControllerNotificationList)
  return false;
#undef DO_
}

void ControllerNotificationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ControllerNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.ControllerNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->notifications(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ControllerNotificationList)
}

::google::protobuf::uint8* ControllerNotificationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ControllerNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.ControllerNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->notifications(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ControllerNotificationList)
  return target;
}

size_t ControllerNotificationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ControllerNotificationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.ControllerNotification notifications = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerNotificationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ControllerNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerNotificationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerNotificationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ControllerNotificationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ControllerNotificationList)
    MergeFrom(*source);
  }
}

void ControllerNotificationList::MergeFrom(const ControllerNotificationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ControllerNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
}

void ControllerNotificationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ControllerNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerNotificationList::CopyFrom(const ControllerNotificationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ControllerNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerNotificationList::IsInitialized() const {
  return true;
}

void ControllerNotificationList::Swap(ControllerNotificationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerNotificationList::InternalSwap(ControllerNotificationList* other) {
  using std::swap;
  CastToBase(&notifications_)->InternalSwap(CastToBase(&other->notifications_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerNotificationList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionNotificationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionNotificationList::kNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionNotificationList::ActionNotificationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ActionNotificationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ActionNotificationList)
}
ActionNotificationList::ActionNotificationList(const ActionNotificationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ActionNotificationList)
}

void ActionNotificationList::SharedCtor() {
}

ActionNotificationList::~ActionNotificationList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ActionNotificationList)
  SharedDtor();
}

void ActionNotificationList::SharedDtor() {
}

void ActionNotificationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionNotificationList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionNotificationList& ActionNotificationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ActionNotificationList.base);
  return *internal_default_instance();
}


void ActionNotificationList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ActionNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  _internal_metadata_.Clear();
}

bool ActionNotificationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ActionNotificationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.ActionNotification notifications = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ActionNotificationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ActionNotificationList)
  return false;
#undef DO_
}

void ActionNotificationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ActionNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.ActionNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->notifications(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ActionNotificationList)
}

::google::protobuf::uint8* ActionNotificationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ActionNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.ActionNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->notifications(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ActionNotificationList)
  return target;
}

size_t ActionNotificationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ActionNotificationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.ActionNotification notifications = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionNotificationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ActionNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionNotificationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionNotificationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ActionNotificationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ActionNotificationList)
    MergeFrom(*source);
  }
}

void ActionNotificationList::MergeFrom(const ActionNotificationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ActionNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
}

void ActionNotificationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ActionNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionNotificationList::CopyFrom(const ActionNotificationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ActionNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionNotificationList::IsInitialized() const {
  return true;
}

void ActionNotificationList::Swap(ActionNotificationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionNotificationList::InternalSwap(ActionNotificationList* other) {
  using std::swap;
  CastToBase(&notifications_)->InternalSwap(CastToBase(&other->notifications_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionNotificationList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RobotEventNotificationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotEventNotificationList::kNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotEventNotificationList::RobotEventNotificationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_RobotEventNotificationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.RobotEventNotificationList)
}
RobotEventNotificationList::RobotEventNotificationList(const RobotEventNotificationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.RobotEventNotificationList)
}

void RobotEventNotificationList::SharedCtor() {
}

RobotEventNotificationList::~RobotEventNotificationList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.RobotEventNotificationList)
  SharedDtor();
}

void RobotEventNotificationList::SharedDtor() {
}

void RobotEventNotificationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RobotEventNotificationList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RobotEventNotificationList& RobotEventNotificationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_RobotEventNotificationList.base);
  return *internal_default_instance();
}


void RobotEventNotificationList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.RobotEventNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  _internal_metadata_.Clear();
}

bool RobotEventNotificationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.RobotEventNotificationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.RobotEventNotification notifications = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.RobotEventNotificationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.RobotEventNotificationList)
  return false;
#undef DO_
}

void RobotEventNotificationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.RobotEventNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.RobotEventNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->notifications(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.RobotEventNotificationList)
}

::google::protobuf::uint8* RobotEventNotificationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.RobotEventNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.RobotEventNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->notifications(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.RobotEventNotificationList)
  return target;
}

size_t RobotEventNotificationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.RobotEventNotificationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.RobotEventNotification notifications = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotEventNotificationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.RobotEventNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotEventNotificationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotEventNotificationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.RobotEventNotificationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.RobotEventNotificationList)
    MergeFrom(*source);
  }
}

void RobotEventNotificationList::MergeFrom(const RobotEventNotificationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.RobotEventNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
}

void RobotEventNotificationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.RobotEventNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotEventNotificationList::CopyFrom(const RobotEventNotificationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.RobotEventNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotEventNotificationList::IsInitialized() const {
  return true;
}

void RobotEventNotificationList::Swap(RobotEventNotificationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotEventNotificationList::InternalSwap(RobotEventNotificationList* other) {
  using std::swap;
  CastToBase(&notifications_)->InternalSwap(CastToBase(&other->notifications_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RobotEventNotificationList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NetworkNotificationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkNotificationList::kNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkNotificationList::NetworkNotificationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_NetworkNotificationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.NetworkNotificationList)
}
NetworkNotificationList::NetworkNotificationList(const NetworkNotificationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.NetworkNotificationList)
}

void NetworkNotificationList::SharedCtor() {
}

NetworkNotificationList::~NetworkNotificationList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.NetworkNotificationList)
  SharedDtor();
}

void NetworkNotificationList::SharedDtor() {
}

void NetworkNotificationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NetworkNotificationList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetworkNotificationList& NetworkNotificationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_NetworkNotificationList.base);
  return *internal_default_instance();
}


void NetworkNotificationList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.NetworkNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkNotificationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.NetworkNotificationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.NetworkNotification notifications = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.NetworkNotificationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.NetworkNotificationList)
  return false;
#undef DO_
}

void NetworkNotificationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.NetworkNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.NetworkNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->notifications(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.NetworkNotificationList)
}

::google::protobuf::uint8* NetworkNotificationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.NetworkNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.NetworkNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->notifications(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.NetworkNotificationList)
  return target;
}

size_t NetworkNotificationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.NetworkNotificationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.NetworkNotification notifications = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkNotificationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.NetworkNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkNotificationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkNotificationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.NetworkNotificationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.NetworkNotificationList)
    MergeFrom(*source);
  }
}

void NetworkNotificationList::MergeFrom(const NetworkNotificationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.NetworkNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
}

void NetworkNotificationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.NetworkNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkNotificationList::CopyFrom(const NetworkNotificationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.NetworkNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkNotificationList::IsInitialized() const {
  return true;
}

void NetworkNotificationList::Swap(NetworkNotificationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkNotificationList::InternalSwap(NetworkNotificationList* other) {
  using std::swap;
  CastToBase(&notifications_)->InternalSwap(CastToBase(&other->notifications_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NetworkNotificationList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MappingHandle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MappingHandle::kIdentifierFieldNumber;
const int MappingHandle::kPermissionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MappingHandle::MappingHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_MappingHandle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.MappingHandle)
}
MappingHandle::MappingHandle(const MappingHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&identifier_, &from.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.MappingHandle)
}

void MappingHandle::SharedCtor() {
  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
}

MappingHandle::~MappingHandle() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.MappingHandle)
  SharedDtor();
}

void MappingHandle::SharedDtor() {
}

void MappingHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MappingHandle::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MappingHandle& MappingHandle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_MappingHandle.base);
  return *internal_default_instance();
}


void MappingHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.MappingHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
  _internal_metadata_.Clear();
}

bool MappingHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.MappingHandle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 permission = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.MappingHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.MappingHandle)
  return false;
#undef DO_
}

void MappingHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.MappingHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->identifier(), output);
  }

  // fixed32 permission = 2;
  if (this->permission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->permission(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.MappingHandle)
}

::google::protobuf::uint8* MappingHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.MappingHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->identifier(), target);
  }

  // fixed32 permission = 2;
  if (this->permission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->permission(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.MappingHandle)
  return target;
}

size_t MappingHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.MappingHandle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->identifier());
  }

  // fixed32 permission = 2;
  if (this->permission() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MappingHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.MappingHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const MappingHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MappingHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.MappingHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.MappingHandle)
    MergeFrom(*source);
  }
}

void MappingHandle::MergeFrom(const MappingHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.MappingHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.identifier() != 0) {
    set_identifier(from.identifier());
  }
  if (from.permission() != 0) {
    set_permission(from.permission());
  }
}

void MappingHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.MappingHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MappingHandle::CopyFrom(const MappingHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.MappingHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MappingHandle::IsInitialized() const {
  return true;
}

void MappingHandle::Swap(MappingHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MappingHandle::InternalSwap(MappingHandle* other) {
  using std::swap;
  swap(identifier_, other->identifier_);
  swap(permission_, other->permission_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MappingHandle::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SafetyEvent::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_SafetyEvent_default_instance_._instance.get_mutable()->safety_handle_ = const_cast< ::Kinova::Api::Common::SafetyHandle*>(
      ::Kinova::Api::Common::SafetyHandle::internal_default_instance());
}
void SafetyEvent::clear_safety_handle() {
  if (GetArenaNoVirtual() == NULL && safety_handle_ != NULL) {
    delete safety_handle_;
  }
  safety_handle_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SafetyEvent::kSafetyHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SafetyEvent::SafetyEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_SafetyEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.SafetyEvent)
}
SafetyEvent::SafetyEvent(const SafetyEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_safety_handle()) {
    safety_handle_ = new ::Kinova::Api::Common::SafetyHandle(*from.safety_handle_);
  } else {
    safety_handle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.SafetyEvent)
}

void SafetyEvent::SharedCtor() {
  safety_handle_ = NULL;
}

SafetyEvent::~SafetyEvent() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.SafetyEvent)
  SharedDtor();
}

void SafetyEvent::SharedDtor() {
  if (this != internal_default_instance()) delete safety_handle_;
}

void SafetyEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SafetyEvent::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SafetyEvent& SafetyEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_SafetyEvent.base);
  return *internal_default_instance();
}


void SafetyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.SafetyEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && safety_handle_ != NULL) {
    delete safety_handle_;
  }
  safety_handle_ = NULL;
  _internal_metadata_.Clear();
}

bool SafetyEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.SafetyEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Common.SafetyHandle safety_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_safety_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.SafetyEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.SafetyEvent)
  return false;
#undef DO_
}

void SafetyEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.SafetyEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.SafetyHandle safety_handle = 1;
  if (this->has_safety_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_safety_handle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.SafetyEvent)
}

::google::protobuf::uint8* SafetyEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.SafetyEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.SafetyHandle safety_handle = 1;
  if (this->has_safety_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_safety_handle(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.SafetyEvent)
  return target;
}

size_t SafetyEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.SafetyEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Common.SafetyHandle safety_handle = 1;
  if (this->has_safety_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *safety_handle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SafetyEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.SafetyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const SafetyEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SafetyEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.SafetyEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.SafetyEvent)
    MergeFrom(*source);
  }
}

void SafetyEvent::MergeFrom(const SafetyEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.SafetyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_safety_handle()) {
    mutable_safety_handle()->::Kinova::Api::Common::SafetyHandle::MergeFrom(from.safety_handle());
  }
}

void SafetyEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.SafetyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SafetyEvent::CopyFrom(const SafetyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.SafetyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafetyEvent::IsInitialized() const {
  return true;
}

void SafetyEvent::Swap(SafetyEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SafetyEvent::InternalSwap(SafetyEvent* other) {
  using std::swap;
  swap(safety_handle_, other->safety_handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SafetyEvent::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControllerEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerEvent::kInputTypeFieldNumber;
const int ControllerEvent::kBehaviorFieldNumber;
const int ControllerEvent::kInputIdentifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerEvent::ControllerEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ControllerEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ControllerEvent)
}
ControllerEvent::ControllerEvent(const ControllerEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&input_type_, &from.input_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&input_identifier_) -
    reinterpret_cast<char*>(&input_type_)) + sizeof(input_identifier_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ControllerEvent)
}

void ControllerEvent::SharedCtor() {
  ::memset(&input_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_identifier_) -
      reinterpret_cast<char*>(&input_type_)) + sizeof(input_identifier_));
}

ControllerEvent::~ControllerEvent() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ControllerEvent)
  SharedDtor();
}

void ControllerEvent::SharedDtor() {
}

void ControllerEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerEvent::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerEvent& ControllerEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ControllerEvent.base);
  return *internal_default_instance();
}


void ControllerEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ControllerEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&input_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_identifier_) -
      reinterpret_cast<char*>(&input_type_)) + sizeof(input_identifier_));
  _internal_metadata_.Clear();
}

bool ControllerEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ControllerEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ControllerInputType input_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_input_type(static_cast< ::Kinova::Api::Base::ControllerInputType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.ControllerBehavior behavior = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_behavior(static_cast< ::Kinova::Api::Base::ControllerBehavior >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 input_identifier = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ControllerEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ControllerEvent)
  return false;
#undef DO_
}

void ControllerEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ControllerEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ControllerInputType input_type = 1;
  if (this->input_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->input_type(), output);
  }

  // .Kinova.Api.Base.ControllerBehavior behavior = 2;
  if (this->behavior() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->behavior(), output);
  }

  // uint32 input_identifier = 3;
  if (this->input_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->input_identifier(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ControllerEvent)
}

::google::protobuf::uint8* ControllerEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ControllerEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ControllerInputType input_type = 1;
  if (this->input_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->input_type(), target);
  }

  // .Kinova.Api.Base.ControllerBehavior behavior = 2;
  if (this->behavior() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->behavior(), target);
  }

  // uint32 input_identifier = 3;
  if (this->input_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->input_identifier(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ControllerEvent)
  return target;
}

size_t ControllerEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ControllerEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.ControllerInputType input_type = 1;
  if (this->input_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_type());
  }

  // .Kinova.Api.Base.ControllerBehavior behavior = 2;
  if (this->behavior() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->behavior());
  }

  // uint32 input_identifier = 3;
  if (this->input_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->input_identifier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ControllerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ControllerEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ControllerEvent)
    MergeFrom(*source);
  }
}

void ControllerEvent::MergeFrom(const ControllerEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ControllerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_type() != 0) {
    set_input_type(from.input_type());
  }
  if (from.behavior() != 0) {
    set_behavior(from.behavior());
  }
  if (from.input_identifier() != 0) {
    set_input_identifier(from.input_identifier());
  }
}

void ControllerEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ControllerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerEvent::CopyFrom(const ControllerEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ControllerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerEvent::IsInitialized() const {
  return true;
}

void ControllerEvent::Swap(ControllerEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerEvent::InternalSwap(ControllerEvent* other) {
  using std::swap;
  swap(input_type_, other->input_type_);
  swap(behavior_, other->behavior_);
  swap(input_identifier_, other->input_identifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerEvent::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GpioEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GpioEvent::kInputTypeFieldNumber;
const int GpioEvent::kBehaviorFieldNumber;
const int GpioEvent::kInputIdentifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GpioEvent::GpioEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_GpioEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.GpioEvent)
}
GpioEvent::GpioEvent(const GpioEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&input_type_, &from.input_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&input_identifier_) -
    reinterpret_cast<char*>(&input_type_)) + sizeof(input_identifier_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.GpioEvent)
}

void GpioEvent::SharedCtor() {
  ::memset(&input_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_identifier_) -
      reinterpret_cast<char*>(&input_type_)) + sizeof(input_identifier_));
}

GpioEvent::~GpioEvent() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.GpioEvent)
  SharedDtor();
}

void GpioEvent::SharedDtor() {
}

void GpioEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GpioEvent::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GpioEvent& GpioEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_GpioEvent.base);
  return *internal_default_instance();
}


void GpioEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.GpioEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&input_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_identifier_) -
      reinterpret_cast<char*>(&input_type_)) + sizeof(input_identifier_));
  _internal_metadata_.Clear();
}

bool GpioEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.GpioEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ControllerInputType input_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_input_type(static_cast< ::Kinova::Api::Base::ControllerInputType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.GpioBehavior behavior = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_behavior(static_cast< ::Kinova::Api::Base::GpioBehavior >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 input_identifier = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.GpioEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.GpioEvent)
  return false;
#undef DO_
}

void GpioEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.GpioEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ControllerInputType input_type = 1;
  if (this->input_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->input_type(), output);
  }

  // .Kinova.Api.Base.GpioBehavior behavior = 2;
  if (this->behavior() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->behavior(), output);
  }

  // uint32 input_identifier = 3;
  if (this->input_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->input_identifier(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.GpioEvent)
}

::google::protobuf::uint8* GpioEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.GpioEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ControllerInputType input_type = 1;
  if (this->input_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->input_type(), target);
  }

  // .Kinova.Api.Base.GpioBehavior behavior = 2;
  if (this->behavior() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->behavior(), target);
  }

  // uint32 input_identifier = 3;
  if (this->input_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->input_identifier(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.GpioEvent)
  return target;
}

size_t GpioEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.GpioEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.ControllerInputType input_type = 1;
  if (this->input_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_type());
  }

  // .Kinova.Api.Base.GpioBehavior behavior = 2;
  if (this->behavior() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->behavior());
  }

  // uint32 input_identifier = 3;
  if (this->input_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->input_identifier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpioEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.GpioEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const GpioEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GpioEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.GpioEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.GpioEvent)
    MergeFrom(*source);
  }
}

void GpioEvent::MergeFrom(const GpioEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.GpioEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_type() != 0) {
    set_input_type(from.input_type());
  }
  if (from.behavior() != 0) {
    set_behavior(from.behavior());
  }
  if (from.input_identifier() != 0) {
    set_input_identifier(from.input_identifier());
  }
}

void GpioEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.GpioEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpioEvent::CopyFrom(const GpioEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.GpioEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioEvent::IsInitialized() const {
  return true;
}

void GpioEvent::Swap(GpioEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GpioEvent::InternalSwap(GpioEvent* other) {
  using std::swap;
  swap(input_type_, other->input_type_);
  swap(behavior_, other->behavior_);
  swap(input_identifier_, other->input_identifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GpioEvent::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapEvent::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_MapEvent_default_instance_.safety_event_ = const_cast< ::Kinova::Api::Base::SafetyEvent*>(
      ::Kinova::Api::Base::SafetyEvent::internal_default_instance());
  ::Kinova::Api::Base::_MapEvent_default_instance_.gpio_event_ = const_cast< ::Kinova::Api::Base::GpioEvent*>(
      ::Kinova::Api::Base::GpioEvent::internal_default_instance());
  ::Kinova::Api::Base::_MapEvent_default_instance_.controller_event_ = const_cast< ::Kinova::Api::Base::ControllerEvent*>(
      ::Kinova::Api::Base::ControllerEvent::internal_default_instance());
}
void MapEvent::set_allocated_safety_event(::Kinova::Api::Base::SafetyEvent* safety_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_events();
  if (safety_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      safety_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, safety_event, submessage_arena);
    }
    set_has_safety_event();
    events_.safety_event_ = safety_event;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.MapEvent.safety_event)
}
void MapEvent::set_allocated_gpio_event(::Kinova::Api::Base::GpioEvent* gpio_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_events();
  if (gpio_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gpio_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gpio_event, submessage_arena);
    }
    set_has_gpio_event();
    events_.gpio_event_ = gpio_event;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.MapEvent.gpio_event)
}
void MapEvent::set_allocated_controller_event(::Kinova::Api::Base::ControllerEvent* controller_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_events();
  if (controller_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      controller_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controller_event, submessage_arena);
    }
    set_has_controller_event();
    events_.controller_event_ = controller_event;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.MapEvent.controller_event)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapEvent::kSafetyEventFieldNumber;
const int MapEvent::kGpioEventFieldNumber;
const int MapEvent::kControllerEventFieldNumber;
const int MapEvent::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapEvent::MapEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_MapEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.MapEvent)
}
MapEvent::MapEvent(const MapEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  clear_has_events();
  switch (from.events_case()) {
    case kSafetyEvent: {
      mutable_safety_event()->::Kinova::Api::Base::SafetyEvent::MergeFrom(from.safety_event());
      break;
    }
    case kGpioEvent: {
      mutable_gpio_event()->::Kinova::Api::Base::GpioEvent::MergeFrom(from.gpio_event());
      break;
    }
    case kControllerEvent: {
      mutable_controller_event()->::Kinova::Api::Base::ControllerEvent::MergeFrom(from.controller_event());
      break;
    }
    case EVENTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.MapEvent)
}

void MapEvent::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_events();
}

MapEvent::~MapEvent() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.MapEvent)
  SharedDtor();
}

void MapEvent::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_events()) {
    clear_events();
  }
}

void MapEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapEvent::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapEvent& MapEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_MapEvent.base);
  return *internal_default_instance();
}


void MapEvent::clear_events() {
// @@protoc_insertion_point(one_of_clear_start:Kinova.Api.Base.MapEvent)
  switch (events_case()) {
    case kSafetyEvent: {
      delete events_.safety_event_;
      break;
    }
    case kGpioEvent: {
      delete events_.gpio_event_;
      break;
    }
    case kControllerEvent: {
      delete events_.controller_event_;
      break;
    }
    case EVENTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENTS_NOT_SET;
}


void MapEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.MapEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_events();
  _internal_metadata_.Clear();
}

bool MapEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.MapEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.SafetyEvent safety_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_safety_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.GpioEvent gpio_event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gpio_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.ControllerEvent controller_event = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.MapEvent.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.MapEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.MapEvent)
  return false;
#undef DO_
}

void MapEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.MapEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.SafetyEvent safety_event = 1;
  if (has_safety_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_safety_event(), output);
  }

  // .Kinova.Api.Base.GpioEvent gpio_event = 2;
  if (has_gpio_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_gpio_event(), output);
  }

  // .Kinova.Api.Base.ControllerEvent controller_event = 3;
  if (has_controller_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_controller_event(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.MapEvent.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.MapEvent)
}

::google::protobuf::uint8* MapEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.MapEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.SafetyEvent safety_event = 1;
  if (has_safety_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_safety_event(), deterministic, target);
  }

  // .Kinova.Api.Base.GpioEvent gpio_event = 2;
  if (has_gpio_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_gpio_event(), deterministic, target);
  }

  // .Kinova.Api.Base.ControllerEvent controller_event = 3;
  if (has_controller_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_controller_event(), deterministic, target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.MapEvent.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.MapEvent)
  return target;
}

size_t MapEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.MapEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  switch (events_case()) {
    // .Kinova.Api.Base.SafetyEvent safety_event = 1;
    case kSafetyEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *events_.safety_event_);
      break;
    }
    // .Kinova.Api.Base.GpioEvent gpio_event = 2;
    case kGpioEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *events_.gpio_event_);
      break;
    }
    // .Kinova.Api.Base.ControllerEvent controller_event = 3;
    case kControllerEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *events_.controller_event_);
      break;
    }
    case EVENTS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.MapEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const MapEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.MapEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.MapEvent)
    MergeFrom(*source);
  }
}

void MapEvent::MergeFrom(const MapEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.MapEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  switch (from.events_case()) {
    case kSafetyEvent: {
      mutable_safety_event()->::Kinova::Api::Base::SafetyEvent::MergeFrom(from.safety_event());
      break;
    }
    case kGpioEvent: {
      mutable_gpio_event()->::Kinova::Api::Base::GpioEvent::MergeFrom(from.gpio_event());
      break;
    }
    case kControllerEvent: {
      mutable_controller_event()->::Kinova::Api::Base::ControllerEvent::MergeFrom(from.controller_event());
      break;
    }
    case EVENTS_NOT_SET: {
      break;
    }
  }
}

void MapEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.MapEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapEvent::CopyFrom(const MapEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.MapEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapEvent::IsInitialized() const {
  return true;
}

void MapEvent::Swap(MapEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapEvent::InternalSwap(MapEvent* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(events_, other->events_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapEvent::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapElement::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_MapElement_default_instance_._instance.get_mutable()->event_ = const_cast< ::Kinova::Api::Base::MapEvent*>(
      ::Kinova::Api::Base::MapEvent::internal_default_instance());
  ::Kinova::Api::Base::_MapElement_default_instance_._instance.get_mutable()->action_ = const_cast< ::Kinova::Api::Base::Action*>(
      ::Kinova::Api::Base::Action::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapElement::kEventFieldNumber;
const int MapElement::kActionFieldNumber;
const int MapElement::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapElement::MapElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_MapElement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.MapElement)
}
MapElement::MapElement(const MapElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_event()) {
    event_ = new ::Kinova::Api::Base::MapEvent(*from.event_);
  } else {
    event_ = NULL;
  }
  if (from.has_action()) {
    action_ = new ::Kinova::Api::Base::Action(*from.action_);
  } else {
    action_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.MapElement)
}

void MapElement::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&event_)) + sizeof(action_));
}

MapElement::~MapElement() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.MapElement)
  SharedDtor();
}

void MapElement::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete event_;
  if (this != internal_default_instance()) delete action_;
}

void MapElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapElement::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapElement& MapElement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_MapElement.base);
  return *internal_default_instance();
}


void MapElement::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.MapElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && event_ != NULL) {
    delete event_;
  }
  event_ = NULL;
  if (GetArenaNoVirtual() == NULL && action_ != NULL) {
    delete action_;
  }
  action_ = NULL;
  _internal_metadata_.Clear();
}

bool MapElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.MapElement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.MapEvent event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.Action action = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.MapElement.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.MapElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.MapElement)
  return false;
#undef DO_
}

void MapElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.MapElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.MapEvent event = 1;
  if (this->has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_event(), output);
  }

  // .Kinova.Api.Base.Action action = 2;
  if (this->has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_action(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.MapElement.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.MapElement)
}

::google::protobuf::uint8* MapElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.MapElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.MapEvent event = 1;
  if (this->has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_event(), deterministic, target);
  }

  // .Kinova.Api.Base.Action action = 2;
  if (this->has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_action(), deterministic, target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.MapElement.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.MapElement)
  return target;
}

size_t MapElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.MapElement)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .Kinova.Api.Base.MapEvent event = 1;
  if (this->has_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *event_);
  }

  // .Kinova.Api.Base.Action action = 2;
  if (this->has_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *action_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.MapElement)
  GOOGLE_DCHECK_NE(&from, this);
  const MapElement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.MapElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.MapElement)
    MergeFrom(*source);
  }
}

void MapElement::MergeFrom(const MapElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.MapElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_event()) {
    mutable_event()->::Kinova::Api::Base::MapEvent::MergeFrom(from.event());
  }
  if (from.has_action()) {
    mutable_action()->::Kinova::Api::Base::Action::MergeFrom(from.action());
  }
}

void MapElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.MapElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapElement::CopyFrom(const MapElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.MapElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapElement::IsInitialized() const {
  return true;
}

void MapElement::Swap(MapElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapElement::InternalSwap(MapElement* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_, other->event_);
  swap(action_, other->action_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapElement::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActivateMapHandle::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ActivateMapHandle_default_instance_._instance.get_mutable()->mapping_handle_ = const_cast< ::Kinova::Api::Base::MappingHandle*>(
      ::Kinova::Api::Base::MappingHandle::internal_default_instance());
  ::Kinova::Api::Base::_ActivateMapHandle_default_instance_._instance.get_mutable()->map_group_handle_ = const_cast< ::Kinova::Api::Base::MapGroupHandle*>(
      ::Kinova::Api::Base::MapGroupHandle::internal_default_instance());
  ::Kinova::Api::Base::_ActivateMapHandle_default_instance_._instance.get_mutable()->map_handle_ = const_cast< ::Kinova::Api::Base::MapHandle*>(
      ::Kinova::Api::Base::MapHandle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivateMapHandle::kMappingHandleFieldNumber;
const int ActivateMapHandle::kMapGroupHandleFieldNumber;
const int ActivateMapHandle::kMapHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivateMapHandle::ActivateMapHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ActivateMapHandle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ActivateMapHandle)
}
ActivateMapHandle::ActivateMapHandle(const ActivateMapHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mapping_handle()) {
    mapping_handle_ = new ::Kinova::Api::Base::MappingHandle(*from.mapping_handle_);
  } else {
    mapping_handle_ = NULL;
  }
  if (from.has_map_group_handle()) {
    map_group_handle_ = new ::Kinova::Api::Base::MapGroupHandle(*from.map_group_handle_);
  } else {
    map_group_handle_ = NULL;
  }
  if (from.has_map_handle()) {
    map_handle_ = new ::Kinova::Api::Base::MapHandle(*from.map_handle_);
  } else {
    map_handle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ActivateMapHandle)
}

void ActivateMapHandle::SharedCtor() {
  ::memset(&mapping_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_handle_) -
      reinterpret_cast<char*>(&mapping_handle_)) + sizeof(map_handle_));
}

ActivateMapHandle::~ActivateMapHandle() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ActivateMapHandle)
  SharedDtor();
}

void ActivateMapHandle::SharedDtor() {
  if (this != internal_default_instance()) delete mapping_handle_;
  if (this != internal_default_instance()) delete map_group_handle_;
  if (this != internal_default_instance()) delete map_handle_;
}

void ActivateMapHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActivateMapHandle::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActivateMapHandle& ActivateMapHandle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ActivateMapHandle.base);
  return *internal_default_instance();
}


void ActivateMapHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ActivateMapHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && mapping_handle_ != NULL) {
    delete mapping_handle_;
  }
  mapping_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && map_group_handle_ != NULL) {
    delete map_group_handle_;
  }
  map_group_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && map_handle_ != NULL) {
    delete map_handle_;
  }
  map_handle_ = NULL;
  _internal_metadata_.Clear();
}

bool ActivateMapHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ActivateMapHandle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.MappingHandle mapping_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mapping_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.MapGroupHandle map_group_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_group_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.MapHandle map_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ActivateMapHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ActivateMapHandle)
  return false;
#undef DO_
}

void ActivateMapHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ActivateMapHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.MappingHandle mapping_handle = 1;
  if (this->has_mapping_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_mapping_handle(), output);
  }

  // .Kinova.Api.Base.MapGroupHandle map_group_handle = 2;
  if (this->has_map_group_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_map_group_handle(), output);
  }

  // .Kinova.Api.Base.MapHandle map_handle = 3;
  if (this->has_map_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_map_handle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ActivateMapHandle)
}

::google::protobuf::uint8* ActivateMapHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ActivateMapHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.MappingHandle mapping_handle = 1;
  if (this->has_mapping_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_mapping_handle(), deterministic, target);
  }

  // .Kinova.Api.Base.MapGroupHandle map_group_handle = 2;
  if (this->has_map_group_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_map_group_handle(), deterministic, target);
  }

  // .Kinova.Api.Base.MapHandle map_handle = 3;
  if (this->has_map_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_map_handle(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ActivateMapHandle)
  return target;
}

size_t ActivateMapHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ActivateMapHandle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.MappingHandle mapping_handle = 1;
  if (this->has_mapping_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mapping_handle_);
  }

  // .Kinova.Api.Base.MapGroupHandle map_group_handle = 2;
  if (this->has_map_group_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *map_group_handle_);
  }

  // .Kinova.Api.Base.MapHandle map_handle = 3;
  if (this->has_map_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *map_handle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivateMapHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ActivateMapHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivateMapHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivateMapHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ActivateMapHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ActivateMapHandle)
    MergeFrom(*source);
  }
}

void ActivateMapHandle::MergeFrom(const ActivateMapHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ActivateMapHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mapping_handle()) {
    mutable_mapping_handle()->::Kinova::Api::Base::MappingHandle::MergeFrom(from.mapping_handle());
  }
  if (from.has_map_group_handle()) {
    mutable_map_group_handle()->::Kinova::Api::Base::MapGroupHandle::MergeFrom(from.map_group_handle());
  }
  if (from.has_map_handle()) {
    mutable_map_handle()->::Kinova::Api::Base::MapHandle::MergeFrom(from.map_handle());
  }
}

void ActivateMapHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ActivateMapHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivateMapHandle::CopyFrom(const ActivateMapHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ActivateMapHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivateMapHandle::IsInitialized() const {
  return true;
}

void ActivateMapHandle::Swap(ActivateMapHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivateMapHandle::InternalSwap(ActivateMapHandle* other) {
  using std::swap;
  swap(mapping_handle_, other->mapping_handle_);
  swap(map_group_handle_, other->map_group_handle_);
  swap(map_handle_, other->map_handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActivateMapHandle::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Map::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_Map_default_instance_._instance.get_mutable()->handle_ = const_cast< ::Kinova::Api::Base::MapHandle*>(
      ::Kinova::Api::Base::MapHandle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Map::kHandleFieldNumber;
const int Map::kNameFieldNumber;
const int Map::kElementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Map::Map()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Map.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Map)
}
Map::Map(const Map& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_handle()) {
    handle_ = new ::Kinova::Api::Base::MapHandle(*from.handle_);
  } else {
    handle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Map)
}

void Map::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_ = NULL;
}

Map::~Map() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Map)
  SharedDtor();
}

void Map::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete handle_;
}

void Map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Map::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Map& Map::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Map.base);
  return *internal_default_instance();
}


void Map::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Map)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && handle_ != NULL) {
    delete handle_;
  }
  handle_ = NULL;
  _internal_metadata_.Clear();
}

bool Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Map)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.MapHandle handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.Map.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Kinova.Api.Base.MapElement elements = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_elements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Map)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Map)
  return false;
#undef DO_
}

void Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Map)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.MapHandle handle = 1;
  if (this->has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_handle(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.Map.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .Kinova.Api.Base.MapElement elements = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->elements(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Map)
}

::google::protobuf::uint8* Map::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Map)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.MapHandle handle = 1;
  if (this->has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_handle(), deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.Map.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .Kinova.Api.Base.MapElement elements = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->elements(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Map)
  return target;
}

size_t Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Map)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.MapElement elements = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->elements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->elements(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .Kinova.Api.Base.MapHandle handle = 1;
  if (this->has_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Map)
  GOOGLE_DCHECK_NE(&from, this);
  const Map* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Map>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Map)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Map)
    MergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_handle()) {
    mutable_handle()->::Kinova::Api::Base::MapHandle::MergeFrom(from.handle());
  }
}

void Map::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  return true;
}

void Map::Swap(Map* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Map::InternalSwap(Map* other) {
  using std::swap;
  CastToBase(&elements_)->InternalSwap(CastToBase(&other->elements_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(handle_, other->handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Map::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapHandle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapHandle::kIdentifierFieldNumber;
const int MapHandle::kPermissionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapHandle::MapHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_MapHandle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.MapHandle)
}
MapHandle::MapHandle(const MapHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&identifier_, &from.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.MapHandle)
}

void MapHandle::SharedCtor() {
  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
}

MapHandle::~MapHandle() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.MapHandle)
  SharedDtor();
}

void MapHandle::SharedDtor() {
}

void MapHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapHandle::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapHandle& MapHandle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_MapHandle.base);
  return *internal_default_instance();
}


void MapHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.MapHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
  _internal_metadata_.Clear();
}

bool MapHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.MapHandle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 permission = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.MapHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.MapHandle)
  return false;
#undef DO_
}

void MapHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.MapHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->identifier(), output);
  }

  // fixed32 permission = 2;
  if (this->permission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->permission(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.MapHandle)
}

::google::protobuf::uint8* MapHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.MapHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->identifier(), target);
  }

  // fixed32 permission = 2;
  if (this->permission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->permission(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.MapHandle)
  return target;
}

size_t MapHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.MapHandle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->identifier());
  }

  // fixed32 permission = 2;
  if (this->permission() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.MapHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const MapHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.MapHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.MapHandle)
    MergeFrom(*source);
  }
}

void MapHandle::MergeFrom(const MapHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.MapHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.identifier() != 0) {
    set_identifier(from.identifier());
  }
  if (from.permission() != 0) {
    set_permission(from.permission());
  }
}

void MapHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.MapHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapHandle::CopyFrom(const MapHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.MapHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapHandle::IsInitialized() const {
  return true;
}

void MapHandle::Swap(MapHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapHandle::InternalSwap(MapHandle* other) {
  using std::swap;
  swap(identifier_, other->identifier_);
  swap(permission_, other->permission_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapHandle::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapList::kMapListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapList::MapList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_MapList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.MapList)
}
MapList::MapList(const MapList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      map_list_(from.map_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.MapList)
}

void MapList::SharedCtor() {
}

MapList::~MapList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.MapList)
  SharedDtor();
}

void MapList::SharedDtor() {
}

void MapList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapList& MapList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_MapList.base);
  return *internal_default_instance();
}


void MapList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.MapList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_list_.Clear();
  _internal_metadata_.Clear();
}

bool MapList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.MapList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.Map map_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_map_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.MapList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.MapList)
  return false;
#undef DO_
}

void MapList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.MapList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.Map map_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->map_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.MapList)
}

::google::protobuf::uint8* MapList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.MapList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.Map map_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->map_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.MapList)
  return target;
}

size_t MapList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.MapList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.Map map_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->map_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->map_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.MapList)
  GOOGLE_DCHECK_NE(&from, this);
  const MapList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.MapList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.MapList)
    MergeFrom(*source);
  }
}

void MapList::MergeFrom(const MapList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.MapList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_list_.MergeFrom(from.map_list_);
}

void MapList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.MapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapList::CopyFrom(const MapList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.MapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapList::IsInitialized() const {
  return true;
}

void MapList::Swap(MapList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapList::InternalSwap(MapList* other) {
  using std::swap;
  CastToBase(&map_list_)->InternalSwap(CastToBase(&other->map_list_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapGroupHandle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapGroupHandle::kIdentifierFieldNumber;
const int MapGroupHandle::kPermissionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapGroupHandle::MapGroupHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_MapGroupHandle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.MapGroupHandle)
}
MapGroupHandle::MapGroupHandle(const MapGroupHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&identifier_, &from.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.MapGroupHandle)
}

void MapGroupHandle::SharedCtor() {
  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
}

MapGroupHandle::~MapGroupHandle() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.MapGroupHandle)
  SharedDtor();
}

void MapGroupHandle::SharedDtor() {
}

void MapGroupHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapGroupHandle::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapGroupHandle& MapGroupHandle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_MapGroupHandle.base);
  return *internal_default_instance();
}


void MapGroupHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.MapGroupHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
  _internal_metadata_.Clear();
}

bool MapGroupHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.MapGroupHandle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 permission = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.MapGroupHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.MapGroupHandle)
  return false;
#undef DO_
}

void MapGroupHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.MapGroupHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->identifier(), output);
  }

  // fixed32 permission = 2;
  if (this->permission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->permission(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.MapGroupHandle)
}

::google::protobuf::uint8* MapGroupHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.MapGroupHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->identifier(), target);
  }

  // fixed32 permission = 2;
  if (this->permission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->permission(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.MapGroupHandle)
  return target;
}

size_t MapGroupHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.MapGroupHandle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->identifier());
  }

  // fixed32 permission = 2;
  if (this->permission() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapGroupHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.MapGroupHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const MapGroupHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapGroupHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.MapGroupHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.MapGroupHandle)
    MergeFrom(*source);
  }
}

void MapGroupHandle::MergeFrom(const MapGroupHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.MapGroupHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.identifier() != 0) {
    set_identifier(from.identifier());
  }
  if (from.permission() != 0) {
    set_permission(from.permission());
  }
}

void MapGroupHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.MapGroupHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapGroupHandle::CopyFrom(const MapGroupHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.MapGroupHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapGroupHandle::IsInitialized() const {
  return true;
}

void MapGroupHandle::Swap(MapGroupHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapGroupHandle::InternalSwap(MapGroupHandle* other) {
  using std::swap;
  swap(identifier_, other->identifier_);
  swap(permission_, other->permission_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapGroupHandle::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapGroup::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_MapGroup_default_instance_._instance.get_mutable()->group_handle_ = const_cast< ::Kinova::Api::Base::MapGroupHandle*>(
      ::Kinova::Api::Base::MapGroupHandle::internal_default_instance());
  ::Kinova::Api::Base::_MapGroup_default_instance_._instance.get_mutable()->related_mapping_handle_ = const_cast< ::Kinova::Api::Base::MappingHandle*>(
      ::Kinova::Api::Base::MappingHandle::internal_default_instance());
  ::Kinova::Api::Base::_MapGroup_default_instance_._instance.get_mutable()->parent_group_handle_ = const_cast< ::Kinova::Api::Base::MapGroupHandle*>(
      ::Kinova::Api::Base::MapGroupHandle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapGroup::kGroupHandleFieldNumber;
const int MapGroup::kNameFieldNumber;
const int MapGroup::kRelatedMappingHandleFieldNumber;
const int MapGroup::kParentGroupHandleFieldNumber;
const int MapGroup::kChildrenMapGroupHandlesFieldNumber;
const int MapGroup::kMapHandlesFieldNumber;
const int MapGroup::kApplicationDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapGroup::MapGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_MapGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.MapGroup)
}
MapGroup::MapGroup(const MapGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      children_map_group_handles_(from.children_map_group_handles_),
      map_handles_(from.map_handles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  application_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.application_data().size() > 0) {
    application_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_data_);
  }
  if (from.has_group_handle()) {
    group_handle_ = new ::Kinova::Api::Base::MapGroupHandle(*from.group_handle_);
  } else {
    group_handle_ = NULL;
  }
  if (from.has_related_mapping_handle()) {
    related_mapping_handle_ = new ::Kinova::Api::Base::MappingHandle(*from.related_mapping_handle_);
  } else {
    related_mapping_handle_ = NULL;
  }
  if (from.has_parent_group_handle()) {
    parent_group_handle_ = new ::Kinova::Api::Base::MapGroupHandle(*from.parent_group_handle_);
  } else {
    parent_group_handle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.MapGroup)
}

void MapGroup::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_group_handle_) -
      reinterpret_cast<char*>(&group_handle_)) + sizeof(parent_group_handle_));
}

MapGroup::~MapGroup() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.MapGroup)
  SharedDtor();
}

void MapGroup::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete group_handle_;
  if (this != internal_default_instance()) delete related_mapping_handle_;
  if (this != internal_default_instance()) delete parent_group_handle_;
}

void MapGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapGroup::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapGroup& MapGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_MapGroup.base);
  return *internal_default_instance();
}


void MapGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.MapGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_map_group_handles_.Clear();
  map_handles_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && group_handle_ != NULL) {
    delete group_handle_;
  }
  group_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && related_mapping_handle_ != NULL) {
    delete related_mapping_handle_;
  }
  related_mapping_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && parent_group_handle_ != NULL) {
    delete parent_group_handle_;
  }
  parent_group_handle_ = NULL;
  _internal_metadata_.Clear();
}

bool MapGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.MapGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.MapGroupHandle group_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_group_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.MapGroup.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.MappingHandle related_mapping_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_related_mapping_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.MapGroupHandle parent_group_handle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parent_group_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Kinova.Api.Base.MapGroupHandle children_map_group_handles = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_children_map_group_handles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Kinova.Api.Base.MapHandle map_handles = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_map_handles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string application_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->application_data().data(), static_cast<int>(this->application_data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.MapGroup.application_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.MapGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.MapGroup)
  return false;
#undef DO_
}

void MapGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.MapGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.MapGroupHandle group_handle = 1;
  if (this->has_group_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_group_handle(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.MapGroup.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .Kinova.Api.Base.MappingHandle related_mapping_handle = 3;
  if (this->has_related_mapping_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_related_mapping_handle(), output);
  }

  // .Kinova.Api.Base.MapGroupHandle parent_group_handle = 4;
  if (this->has_parent_group_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_parent_group_handle(), output);
  }

  // repeated .Kinova.Api.Base.MapGroupHandle children_map_group_handles = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_map_group_handles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->children_map_group_handles(static_cast<int>(i)),
      output);
  }

  // repeated .Kinova.Api.Base.MapHandle map_handles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_handles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->map_handles(static_cast<int>(i)),
      output);
  }

  // string application_data = 7;
  if (this->application_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_data().data(), static_cast<int>(this->application_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.MapGroup.application_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->application_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.MapGroup)
}

::google::protobuf::uint8* MapGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.MapGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.MapGroupHandle group_handle = 1;
  if (this->has_group_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_group_handle(), deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.MapGroup.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .Kinova.Api.Base.MappingHandle related_mapping_handle = 3;
  if (this->has_related_mapping_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_related_mapping_handle(), deterministic, target);
  }

  // .Kinova.Api.Base.MapGroupHandle parent_group_handle = 4;
  if (this->has_parent_group_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_parent_group_handle(), deterministic, target);
  }

  // repeated .Kinova.Api.Base.MapGroupHandle children_map_group_handles = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_map_group_handles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->children_map_group_handles(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Kinova.Api.Base.MapHandle map_handles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_handles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->map_handles(static_cast<int>(i)), deterministic, target);
  }

  // string application_data = 7;
  if (this->application_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_data().data(), static_cast<int>(this->application_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.MapGroup.application_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->application_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.MapGroup)
  return target;
}

size_t MapGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.MapGroup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.MapGroupHandle children_map_group_handles = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->children_map_group_handles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->children_map_group_handles(static_cast<int>(i)));
    }
  }

  // repeated .Kinova.Api.Base.MapHandle map_handles = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->map_handles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->map_handles(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string application_data = 7;
  if (this->application_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->application_data());
  }

  // .Kinova.Api.Base.MapGroupHandle group_handle = 1;
  if (this->has_group_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *group_handle_);
  }

  // .Kinova.Api.Base.MappingHandle related_mapping_handle = 3;
  if (this->has_related_mapping_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *related_mapping_handle_);
  }

  // .Kinova.Api.Base.MapGroupHandle parent_group_handle = 4;
  if (this->has_parent_group_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *parent_group_handle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.MapGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const MapGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.MapGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.MapGroup)
    MergeFrom(*source);
  }
}

void MapGroup::MergeFrom(const MapGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.MapGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_map_group_handles_.MergeFrom(from.children_map_group_handles_);
  map_handles_.MergeFrom(from.map_handles_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.application_data().size() > 0) {

    application_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_data_);
  }
  if (from.has_group_handle()) {
    mutable_group_handle()->::Kinova::Api::Base::MapGroupHandle::MergeFrom(from.group_handle());
  }
  if (from.has_related_mapping_handle()) {
    mutable_related_mapping_handle()->::Kinova::Api::Base::MappingHandle::MergeFrom(from.related_mapping_handle());
  }
  if (from.has_parent_group_handle()) {
    mutable_parent_group_handle()->::Kinova::Api::Base::MapGroupHandle::MergeFrom(from.parent_group_handle());
  }
}

void MapGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.MapGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapGroup::CopyFrom(const MapGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.MapGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapGroup::IsInitialized() const {
  return true;
}

void MapGroup::Swap(MapGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapGroup::InternalSwap(MapGroup* other) {
  using std::swap;
  CastToBase(&children_map_group_handles_)->InternalSwap(CastToBase(&other->children_map_group_handles_));
  CastToBase(&map_handles_)->InternalSwap(CastToBase(&other->map_handles_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  application_data_.Swap(&other->application_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(group_handle_, other->group_handle_);
  swap(related_mapping_handle_, other->related_mapping_handle_);
  swap(parent_group_handle_, other->parent_group_handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapGroup::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapGroupList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapGroupList::kMapGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapGroupList::MapGroupList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_MapGroupList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.MapGroupList)
}
MapGroupList::MapGroupList(const MapGroupList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      map_groups_(from.map_groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.MapGroupList)
}

void MapGroupList::SharedCtor() {
}

MapGroupList::~MapGroupList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.MapGroupList)
  SharedDtor();
}

void MapGroupList::SharedDtor() {
}

void MapGroupList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapGroupList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapGroupList& MapGroupList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_MapGroupList.base);
  return *internal_default_instance();
}


void MapGroupList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.MapGroupList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_groups_.Clear();
  _internal_metadata_.Clear();
}

bool MapGroupList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.MapGroupList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.MapGroup map_groups = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_map_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.MapGroupList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.MapGroupList)
  return false;
#undef DO_
}

void MapGroupList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.MapGroupList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.MapGroup map_groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->map_groups(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.MapGroupList)
}

::google::protobuf::uint8* MapGroupList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.MapGroupList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.MapGroup map_groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_groups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->map_groups(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.MapGroupList)
  return target;
}

size_t MapGroupList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.MapGroupList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.MapGroup map_groups = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->map_groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->map_groups(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapGroupList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.MapGroupList)
  GOOGLE_DCHECK_NE(&from, this);
  const MapGroupList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapGroupList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.MapGroupList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.MapGroupList)
    MergeFrom(*source);
  }
}

void MapGroupList::MergeFrom(const MapGroupList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.MapGroupList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_groups_.MergeFrom(from.map_groups_);
}

void MapGroupList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.MapGroupList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapGroupList::CopyFrom(const MapGroupList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.MapGroupList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapGroupList::IsInitialized() const {
  return true;
}

void MapGroupList::Swap(MapGroupList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapGroupList::InternalSwap(MapGroupList* other) {
  using std::swap;
  CastToBase(&map_groups_)->InternalSwap(CastToBase(&other->map_groups_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapGroupList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Mapping::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_Mapping_default_instance_._instance.get_mutable()->handle_ = const_cast< ::Kinova::Api::Base::MappingHandle*>(
      ::Kinova::Api::Base::MappingHandle::internal_default_instance());
  ::Kinova::Api::Base::_Mapping_default_instance_._instance.get_mutable()->active_map_group_handle_ = const_cast< ::Kinova::Api::Base::MapGroupHandle*>(
      ::Kinova::Api::Base::MapGroupHandle::internal_default_instance());
  ::Kinova::Api::Base::_Mapping_default_instance_._instance.get_mutable()->active_map_handle_ = const_cast< ::Kinova::Api::Base::MapHandle*>(
      ::Kinova::Api::Base::MapHandle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mapping::kHandleFieldNumber;
const int Mapping::kNameFieldNumber;
const int Mapping::kControllerIdentifierFieldNumber;
const int Mapping::kActiveMapGroupHandleFieldNumber;
const int Mapping::kMapGroupHandlesFieldNumber;
const int Mapping::kActiveMapHandleFieldNumber;
const int Mapping::kMapHandlesFieldNumber;
const int Mapping::kApplicationDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mapping::Mapping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Mapping.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Mapping)
}
Mapping::Mapping(const Mapping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      map_group_handles_(from.map_group_handles_),
      map_handles_(from.map_handles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  application_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.application_data().size() > 0) {
    application_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_data_);
  }
  if (from.has_handle()) {
    handle_ = new ::Kinova::Api::Base::MappingHandle(*from.handle_);
  } else {
    handle_ = NULL;
  }
  if (from.has_active_map_group_handle()) {
    active_map_group_handle_ = new ::Kinova::Api::Base::MapGroupHandle(*from.active_map_group_handle_);
  } else {
    active_map_group_handle_ = NULL;
  }
  if (from.has_active_map_handle()) {
    active_map_handle_ = new ::Kinova::Api::Base::MapHandle(*from.active_map_handle_);
  } else {
    active_map_handle_ = NULL;
  }
  controller_identifier_ = from.controller_identifier_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Mapping)
}

void Mapping::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_identifier_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(controller_identifier_));
}

Mapping::~Mapping() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Mapping)
  SharedDtor();
}

void Mapping::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete handle_;
  if (this != internal_default_instance()) delete active_map_group_handle_;
  if (this != internal_default_instance()) delete active_map_handle_;
}

void Mapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Mapping::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mapping& Mapping::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Mapping.base);
  return *internal_default_instance();
}


void Mapping::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Mapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_group_handles_.Clear();
  map_handles_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && handle_ != NULL) {
    delete handle_;
  }
  handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && active_map_group_handle_ != NULL) {
    delete active_map_group_handle_;
  }
  active_map_group_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && active_map_handle_ != NULL) {
    delete active_map_handle_;
  }
  active_map_handle_ = NULL;
  controller_identifier_ = 0u;
  _internal_metadata_.Clear();
}

bool Mapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Mapping)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.MappingHandle handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.Mapping.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_identifier = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.MapGroupHandle active_map_group_handle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_active_map_group_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Kinova.Api.Base.MapGroupHandle map_group_handles = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_map_group_handles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.MapHandle active_map_handle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_active_map_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Kinova.Api.Base.MapHandle map_handles = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_map_handles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string application_data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->application_data().data(), static_cast<int>(this->application_data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.Mapping.application_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Mapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Mapping)
  return false;
#undef DO_
}

void Mapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Mapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.MappingHandle handle = 1;
  if (this->has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_handle(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.Mapping.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // uint32 controller_identifier = 3;
  if (this->controller_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->controller_identifier(), output);
  }

  // .Kinova.Api.Base.MapGroupHandle active_map_group_handle = 4;
  if (this->has_active_map_group_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_active_map_group_handle(), output);
  }

  // repeated .Kinova.Api.Base.MapGroupHandle map_group_handles = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_group_handles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->map_group_handles(static_cast<int>(i)),
      output);
  }

  // .Kinova.Api.Base.MapHandle active_map_handle = 6;
  if (this->has_active_map_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_active_map_handle(), output);
  }

  // repeated .Kinova.Api.Base.MapHandle map_handles = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_handles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->map_handles(static_cast<int>(i)),
      output);
  }

  // string application_data = 8;
  if (this->application_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_data().data(), static_cast<int>(this->application_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.Mapping.application_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->application_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Mapping)
}

::google::protobuf::uint8* Mapping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Mapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.MappingHandle handle = 1;
  if (this->has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_handle(), deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.Mapping.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // uint32 controller_identifier = 3;
  if (this->controller_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->controller_identifier(), target);
  }

  // .Kinova.Api.Base.MapGroupHandle active_map_group_handle = 4;
  if (this->has_active_map_group_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_active_map_group_handle(), deterministic, target);
  }

  // repeated .Kinova.Api.Base.MapGroupHandle map_group_handles = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_group_handles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->map_group_handles(static_cast<int>(i)), deterministic, target);
  }

  // .Kinova.Api.Base.MapHandle active_map_handle = 6;
  if (this->has_active_map_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_active_map_handle(), deterministic, target);
  }

  // repeated .Kinova.Api.Base.MapHandle map_handles = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_handles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->map_handles(static_cast<int>(i)), deterministic, target);
  }

  // string application_data = 8;
  if (this->application_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_data().data(), static_cast<int>(this->application_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.Mapping.application_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->application_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Mapping)
  return target;
}

size_t Mapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Mapping)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.MapGroupHandle map_group_handles = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->map_group_handles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->map_group_handles(static_cast<int>(i)));
    }
  }

  // repeated .Kinova.Api.Base.MapHandle map_handles = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->map_handles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->map_handles(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string application_data = 8;
  if (this->application_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->application_data());
  }

  // .Kinova.Api.Base.MappingHandle handle = 1;
  if (this->has_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  // .Kinova.Api.Base.MapGroupHandle active_map_group_handle = 4;
  if (this->has_active_map_group_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *active_map_group_handle_);
  }

  // .Kinova.Api.Base.MapHandle active_map_handle = 6;
  if (this->has_active_map_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *active_map_handle_);
  }

  // uint32 controller_identifier = 3;
  if (this->controller_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_identifier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mapping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Mapping)
  GOOGLE_DCHECK_NE(&from, this);
  const Mapping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mapping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Mapping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Mapping)
    MergeFrom(*source);
  }
}

void Mapping::MergeFrom(const Mapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Mapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_group_handles_.MergeFrom(from.map_group_handles_);
  map_handles_.MergeFrom(from.map_handles_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.application_data().size() > 0) {

    application_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_data_);
  }
  if (from.has_handle()) {
    mutable_handle()->::Kinova::Api::Base::MappingHandle::MergeFrom(from.handle());
  }
  if (from.has_active_map_group_handle()) {
    mutable_active_map_group_handle()->::Kinova::Api::Base::MapGroupHandle::MergeFrom(from.active_map_group_handle());
  }
  if (from.has_active_map_handle()) {
    mutable_active_map_handle()->::Kinova::Api::Base::MapHandle::MergeFrom(from.active_map_handle());
  }
  if (from.controller_identifier() != 0) {
    set_controller_identifier(from.controller_identifier());
  }
}

void Mapping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Mapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mapping::CopyFrom(const Mapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Mapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mapping::IsInitialized() const {
  return true;
}

void Mapping::Swap(Mapping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mapping::InternalSwap(Mapping* other) {
  using std::swap;
  CastToBase(&map_group_handles_)->InternalSwap(CastToBase(&other->map_group_handles_));
  CastToBase(&map_handles_)->InternalSwap(CastToBase(&other->map_handles_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  application_data_.Swap(&other->application_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(handle_, other->handle_);
  swap(active_map_group_handle_, other->active_map_group_handle_);
  swap(active_map_handle_, other->active_map_handle_);
  swap(controller_identifier_, other->controller_identifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Mapping::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MappingList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MappingList::kMappingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MappingList::MappingList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_MappingList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.MappingList)
}
MappingList::MappingList(const MappingList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mappings_(from.mappings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.MappingList)
}

void MappingList::SharedCtor() {
}

MappingList::~MappingList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.MappingList)
  SharedDtor();
}

void MappingList::SharedDtor() {
}

void MappingList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MappingList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MappingList& MappingList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_MappingList.base);
  return *internal_default_instance();
}


void MappingList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.MappingList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mappings_.Clear();
  _internal_metadata_.Clear();
}

bool MappingList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.MappingList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.Mapping mappings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_mappings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.MappingList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.MappingList)
  return false;
#undef DO_
}

void MappingList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.MappingList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.Mapping mappings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mappings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->mappings(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.MappingList)
}

::google::protobuf::uint8* MappingList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.MappingList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.Mapping mappings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mappings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->mappings(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.MappingList)
  return target;
}

size_t MappingList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.MappingList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.Mapping mappings = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->mappings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mappings(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MappingList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.MappingList)
  GOOGLE_DCHECK_NE(&from, this);
  const MappingList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MappingList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.MappingList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.MappingList)
    MergeFrom(*source);
  }
}

void MappingList::MergeFrom(const MappingList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.MappingList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mappings_.MergeFrom(from.mappings_);
}

void MappingList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.MappingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MappingList::CopyFrom(const MappingList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.MappingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MappingList::IsInitialized() const {
  return true;
}

void MappingList::Swap(MappingList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MappingList::InternalSwap(MappingList* other) {
  using std::swap;
  CastToBase(&mappings_)->InternalSwap(CastToBase(&other->mappings_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MappingList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransformationMatrix::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_TransformationMatrix_default_instance_._instance.get_mutable()->r0_ = const_cast< ::Kinova::Api::Base::TransformationRow*>(
      ::Kinova::Api::Base::TransformationRow::internal_default_instance());
  ::Kinova::Api::Base::_TransformationMatrix_default_instance_._instance.get_mutable()->r1_ = const_cast< ::Kinova::Api::Base::TransformationRow*>(
      ::Kinova::Api::Base::TransformationRow::internal_default_instance());
  ::Kinova::Api::Base::_TransformationMatrix_default_instance_._instance.get_mutable()->r2_ = const_cast< ::Kinova::Api::Base::TransformationRow*>(
      ::Kinova::Api::Base::TransformationRow::internal_default_instance());
  ::Kinova::Api::Base::_TransformationMatrix_default_instance_._instance.get_mutable()->r3_ = const_cast< ::Kinova::Api::Base::TransformationRow*>(
      ::Kinova::Api::Base::TransformationRow::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformationMatrix::kR0FieldNumber;
const int TransformationMatrix::kR1FieldNumber;
const int TransformationMatrix::kR2FieldNumber;
const int TransformationMatrix::kR3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationMatrix::TransformationMatrix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_TransformationMatrix.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.TransformationMatrix)
}
TransformationMatrix::TransformationMatrix(const TransformationMatrix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_r0()) {
    r0_ = new ::Kinova::Api::Base::TransformationRow(*from.r0_);
  } else {
    r0_ = NULL;
  }
  if (from.has_r1()) {
    r1_ = new ::Kinova::Api::Base::TransformationRow(*from.r1_);
  } else {
    r1_ = NULL;
  }
  if (from.has_r2()) {
    r2_ = new ::Kinova::Api::Base::TransformationRow(*from.r2_);
  } else {
    r2_ = NULL;
  }
  if (from.has_r3()) {
    r3_ = new ::Kinova::Api::Base::TransformationRow(*from.r3_);
  } else {
    r3_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.TransformationMatrix)
}

void TransformationMatrix::SharedCtor() {
  ::memset(&r0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r3_) -
      reinterpret_cast<char*>(&r0_)) + sizeof(r3_));
}

TransformationMatrix::~TransformationMatrix() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.TransformationMatrix)
  SharedDtor();
}

void TransformationMatrix::SharedDtor() {
  if (this != internal_default_instance()) delete r0_;
  if (this != internal_default_instance()) delete r1_;
  if (this != internal_default_instance()) delete r2_;
  if (this != internal_default_instance()) delete r3_;
}

void TransformationMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TransformationMatrix::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransformationMatrix& TransformationMatrix::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_TransformationMatrix.base);
  return *internal_default_instance();
}


void TransformationMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.TransformationMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && r0_ != NULL) {
    delete r0_;
  }
  r0_ = NULL;
  if (GetArenaNoVirtual() == NULL && r1_ != NULL) {
    delete r1_;
  }
  r1_ = NULL;
  if (GetArenaNoVirtual() == NULL && r2_ != NULL) {
    delete r2_;
  }
  r2_ = NULL;
  if (GetArenaNoVirtual() == NULL && r3_ != NULL) {
    delete r3_;
  }
  r3_ = NULL;
  _internal_metadata_.Clear();
}

bool TransformationMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.TransformationMatrix)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.TransformationRow r0 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_r0()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.TransformationRow r1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_r1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.TransformationRow r2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_r2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.TransformationRow r3 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_r3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.TransformationMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.TransformationMatrix)
  return false;
#undef DO_
}

void TransformationMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.TransformationMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.TransformationRow r0 = 1;
  if (this->has_r0()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_r0(), output);
  }

  // .Kinova.Api.Base.TransformationRow r1 = 2;
  if (this->has_r1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_r1(), output);
  }

  // .Kinova.Api.Base.TransformationRow r2 = 3;
  if (this->has_r2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_r2(), output);
  }

  // .Kinova.Api.Base.TransformationRow r3 = 4;
  if (this->has_r3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_r3(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.TransformationMatrix)
}

::google::protobuf::uint8* TransformationMatrix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.TransformationMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.TransformationRow r0 = 1;
  if (this->has_r0()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_r0(), deterministic, target);
  }

  // .Kinova.Api.Base.TransformationRow r1 = 2;
  if (this->has_r1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_r1(), deterministic, target);
  }

  // .Kinova.Api.Base.TransformationRow r2 = 3;
  if (this->has_r2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_r2(), deterministic, target);
  }

  // .Kinova.Api.Base.TransformationRow r3 = 4;
  if (this->has_r3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_r3(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.TransformationMatrix)
  return target;
}

size_t TransformationMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.TransformationMatrix)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.TransformationRow r0 = 1;
  if (this->has_r0()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *r0_);
  }

  // .Kinova.Api.Base.TransformationRow r1 = 2;
  if (this->has_r1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *r1_);
  }

  // .Kinova.Api.Base.TransformationRow r2 = 3;
  if (this->has_r2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *r2_);
  }

  // .Kinova.Api.Base.TransformationRow r3 = 4;
  if (this->has_r3()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *r3_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformationMatrix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.TransformationMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformationMatrix* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransformationMatrix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.TransformationMatrix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.TransformationMatrix)
    MergeFrom(*source);
  }
}

void TransformationMatrix::MergeFrom(const TransformationMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.TransformationMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_r0()) {
    mutable_r0()->::Kinova::Api::Base::TransformationRow::MergeFrom(from.r0());
  }
  if (from.has_r1()) {
    mutable_r1()->::Kinova::Api::Base::TransformationRow::MergeFrom(from.r1());
  }
  if (from.has_r2()) {
    mutable_r2()->::Kinova::Api::Base::TransformationRow::MergeFrom(from.r2());
  }
  if (from.has_r3()) {
    mutable_r3()->::Kinova::Api::Base::TransformationRow::MergeFrom(from.r3());
  }
}

void TransformationMatrix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.TransformationMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationMatrix::CopyFrom(const TransformationMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.TransformationMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationMatrix::IsInitialized() const {
  return true;
}

void TransformationMatrix::Swap(TransformationMatrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationMatrix::InternalSwap(TransformationMatrix* other) {
  using std::swap;
  swap(r0_, other->r0_);
  swap(r1_, other->r1_);
  swap(r2_, other->r2_);
  swap(r3_, other->r3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TransformationMatrix::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransformationRow::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformationRow::kC0FieldNumber;
const int TransformationRow::kC1FieldNumber;
const int TransformationRow::kC2FieldNumber;
const int TransformationRow::kC3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationRow::TransformationRow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_TransformationRow.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.TransformationRow)
}
TransformationRow::TransformationRow(const TransformationRow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&c0_, &from.c0_,
    static_cast<size_t>(reinterpret_cast<char*>(&c3_) -
    reinterpret_cast<char*>(&c0_)) + sizeof(c3_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.TransformationRow)
}

void TransformationRow::SharedCtor() {
  ::memset(&c0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c3_) -
      reinterpret_cast<char*>(&c0_)) + sizeof(c3_));
}

TransformationRow::~TransformationRow() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.TransformationRow)
  SharedDtor();
}

void TransformationRow::SharedDtor() {
}

void TransformationRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TransformationRow::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransformationRow& TransformationRow::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_TransformationRow.base);
  return *internal_default_instance();
}


void TransformationRow::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.TransformationRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&c0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c3_) -
      reinterpret_cast<char*>(&c0_)) + sizeof(c3_));
  _internal_metadata_.Clear();
}

bool TransformationRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.TransformationRow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float c0 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float c1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float c2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float c3 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.TransformationRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.TransformationRow)
  return false;
#undef DO_
}

void TransformationRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.TransformationRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float c0 = 1;
  if (this->c0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->c0(), output);
  }

  // float c1 = 2;
  if (this->c1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->c1(), output);
  }

  // float c2 = 3;
  if (this->c2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->c2(), output);
  }

  // float c3 = 4;
  if (this->c3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->c3(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.TransformationRow)
}

::google::protobuf::uint8* TransformationRow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.TransformationRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float c0 = 1;
  if (this->c0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->c0(), target);
  }

  // float c1 = 2;
  if (this->c1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->c1(), target);
  }

  // float c2 = 3;
  if (this->c2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->c2(), target);
  }

  // float c3 = 4;
  if (this->c3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->c3(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.TransformationRow)
  return target;
}

size_t TransformationRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.TransformationRow)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float c0 = 1;
  if (this->c0() != 0) {
    total_size += 1 + 4;
  }

  // float c1 = 2;
  if (this->c1() != 0) {
    total_size += 1 + 4;
  }

  // float c2 = 3;
  if (this->c2() != 0) {
    total_size += 1 + 4;
  }

  // float c3 = 4;
  if (this->c3() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformationRow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.TransformationRow)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformationRow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransformationRow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.TransformationRow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.TransformationRow)
    MergeFrom(*source);
  }
}

void TransformationRow::MergeFrom(const TransformationRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.TransformationRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.c0() != 0) {
    set_c0(from.c0());
  }
  if (from.c1() != 0) {
    set_c1(from.c1());
  }
  if (from.c2() != 0) {
    set_c2(from.c2());
  }
  if (from.c3() != 0) {
    set_c3(from.c3());
  }
}

void TransformationRow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.TransformationRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationRow::CopyFrom(const TransformationRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.TransformationRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationRow::IsInitialized() const {
  return true;
}

void TransformationRow::Swap(TransformationRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationRow::InternalSwap(TransformationRow* other) {
  using std::swap;
  swap(c0_, other->c0_);
  swap(c1_, other->c1_);
  swap(c2_, other->c2_);
  swap(c3_, other->c3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TransformationRow::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Pose::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose::kXFieldNumber;
const int Pose::kYFieldNumber;
const int Pose::kZFieldNumber;
const int Pose::kThetaXFieldNumber;
const int Pose::kThetaYFieldNumber;
const int Pose::kThetaZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose::Pose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Pose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Pose)
}
Pose::Pose(const Pose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&theta_z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(theta_z_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Pose)
}

void Pose::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(theta_z_));
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Pose)
  SharedDtor();
}

void Pose::SharedDtor() {
}

void Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Pose::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pose& Pose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Pose.base);
  return *internal_default_instance();
}


void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(theta_z_));
  _internal_metadata_.Clear();
}

bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Pose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float theta_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float theta_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float theta_z = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Pose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Pose)
  return false;
#undef DO_
}

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // float theta_x = 4;
  if (this->theta_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->theta_x(), output);
  }

  // float theta_y = 5;
  if (this->theta_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->theta_y(), output);
  }

  // float theta_z = 6;
  if (this->theta_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->theta_z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Pose)
}

::google::protobuf::uint8* Pose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // float theta_x = 4;
  if (this->theta_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->theta_x(), target);
  }

  // float theta_y = 5;
  if (this->theta_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->theta_y(), target);
  }

  // float theta_z = 6;
  if (this->theta_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->theta_z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Pose)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // float theta_x = 4;
  if (this->theta_x() != 0) {
    total_size += 1 + 4;
  }

  // float theta_y = 5;
  if (this->theta_y() != 0) {
    total_size += 1 + 4;
  }

  // float theta_z = 6;
  if (this->theta_z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Pose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.theta_x() != 0) {
    set_theta_x(from.theta_x());
  }
  if (from.theta_y() != 0) {
    set_theta_y(from.theta_y());
  }
  if (from.theta_z() != 0) {
    set_theta_z(from.theta_z());
  }
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::Swap(Pose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose::InternalSwap(Pose* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(theta_x_, other->theta_x_);
  swap(theta_y_, other->theta_y_);
  swap(theta_z_, other->theta_z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kXFieldNumber;
const int Position::kYFieldNumber;
const int Position::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Position.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Position)
}
Position::Position(const Position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Position)
}

void Position::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Position)
  SharedDtor();
}

void Position::SharedDtor() {
}

void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Position& Position::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Position.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Position)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Position)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Orientation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Orientation::kThetaXFieldNumber;
const int Orientation::kThetaYFieldNumber;
const int Orientation::kThetaZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Orientation::Orientation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Orientation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Orientation)
}
Orientation::Orientation(const Orientation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&theta_x_, &from.theta_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&theta_z_) -
    reinterpret_cast<char*>(&theta_x_)) + sizeof(theta_z_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Orientation)
}

void Orientation::SharedCtor() {
  ::memset(&theta_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_z_) -
      reinterpret_cast<char*>(&theta_x_)) + sizeof(theta_z_));
}

Orientation::~Orientation() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Orientation)
  SharedDtor();
}

void Orientation::SharedDtor() {
}

void Orientation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Orientation::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Orientation& Orientation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Orientation.base);
  return *internal_default_instance();
}


void Orientation::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Orientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&theta_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_z_) -
      reinterpret_cast<char*>(&theta_x_)) + sizeof(theta_z_));
  _internal_metadata_.Clear();
}

bool Orientation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Orientation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float theta_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float theta_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float theta_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Orientation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Orientation)
  return false;
#undef DO_
}

void Orientation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Orientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float theta_x = 1;
  if (this->theta_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->theta_x(), output);
  }

  // float theta_y = 2;
  if (this->theta_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->theta_y(), output);
  }

  // float theta_z = 3;
  if (this->theta_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->theta_z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Orientation)
}

::google::protobuf::uint8* Orientation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Orientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float theta_x = 1;
  if (this->theta_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->theta_x(), target);
  }

  // float theta_y = 2;
  if (this->theta_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->theta_y(), target);
  }

  // float theta_z = 3;
  if (this->theta_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->theta_z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Orientation)
  return target;
}

size_t Orientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Orientation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float theta_x = 1;
  if (this->theta_x() != 0) {
    total_size += 1 + 4;
  }

  // float theta_y = 2;
  if (this->theta_y() != 0) {
    total_size += 1 + 4;
  }

  // float theta_z = 3;
  if (this->theta_z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Orientation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  const Orientation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Orientation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Orientation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Orientation)
    MergeFrom(*source);
  }
}

void Orientation::MergeFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.theta_x() != 0) {
    set_theta_x(from.theta_x());
  }
  if (from.theta_y() != 0) {
    set_theta_y(from.theta_y());
  }
  if (from.theta_z() != 0) {
    set_theta_z(from.theta_z());
  }
}

void Orientation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Orientation::CopyFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation::IsInitialized() const {
  return true;
}

void Orientation::Swap(Orientation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Orientation::InternalSwap(Orientation* other) {
  using std::swap;
  swap(theta_x_, other->theta_x_);
  swap(theta_y_, other->theta_y_);
  swap(theta_z_, other->theta_z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Orientation::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CartesianSpeed::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CartesianSpeed::kTranslationFieldNumber;
const int CartesianSpeed::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CartesianSpeed::CartesianSpeed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_CartesianSpeed.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.CartesianSpeed)
}
CartesianSpeed::CartesianSpeed(const CartesianSpeed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&translation_, &from.translation_,
    static_cast<size_t>(reinterpret_cast<char*>(&orientation_) -
    reinterpret_cast<char*>(&translation_)) + sizeof(orientation_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.CartesianSpeed)
}

void CartesianSpeed::SharedCtor() {
  ::memset(&translation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&translation_)) + sizeof(orientation_));
}

CartesianSpeed::~CartesianSpeed() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.CartesianSpeed)
  SharedDtor();
}

void CartesianSpeed::SharedDtor() {
}

void CartesianSpeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CartesianSpeed::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CartesianSpeed& CartesianSpeed::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_CartesianSpeed.base);
  return *internal_default_instance();
}


void CartesianSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.CartesianSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&translation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&translation_)) + sizeof(orientation_));
  _internal_metadata_.Clear();
}

bool CartesianSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.CartesianSpeed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float translation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &translation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float orientation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.CartesianSpeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.CartesianSpeed)
  return false;
#undef DO_
}

void CartesianSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.CartesianSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float translation = 1;
  if (this->translation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->translation(), output);
  }

  // float orientation = 2;
  if (this->orientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->orientation(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.CartesianSpeed)
}

::google::protobuf::uint8* CartesianSpeed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.CartesianSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float translation = 1;
  if (this->translation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->translation(), target);
  }

  // float orientation = 2;
  if (this->orientation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->orientation(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.CartesianSpeed)
  return target;
}

size_t CartesianSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.CartesianSpeed)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float translation = 1;
  if (this->translation() != 0) {
    total_size += 1 + 4;
  }

  // float orientation = 2;
  if (this->orientation() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CartesianSpeed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.CartesianSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  const CartesianSpeed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CartesianSpeed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.CartesianSpeed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.CartesianSpeed)
    MergeFrom(*source);
  }
}

void CartesianSpeed::MergeFrom(const CartesianSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.CartesianSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.translation() != 0) {
    set_translation(from.translation());
  }
  if (from.orientation() != 0) {
    set_orientation(from.orientation());
  }
}

void CartesianSpeed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.CartesianSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CartesianSpeed::CopyFrom(const CartesianSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.CartesianSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartesianSpeed::IsInitialized() const {
  return true;
}

void CartesianSpeed::Swap(CartesianSpeed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CartesianSpeed::InternalSwap(CartesianSpeed* other) {
  using std::swap;
  swap(translation_, other->translation_);
  swap(orientation_, other->orientation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CartesianSpeed::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CartesianTrajectoryConstraint::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_CartesianTrajectoryConstraint_default_instance_.speed_ = const_cast< ::Kinova::Api::Base::CartesianSpeed*>(
      ::Kinova::Api::Base::CartesianSpeed::internal_default_instance());
  ::Kinova::Api::Base::_CartesianTrajectoryConstraint_default_instance_.duration_ = 0;
}
void CartesianTrajectoryConstraint::set_allocated_speed(::Kinova::Api::Base::CartesianSpeed* speed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (speed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      speed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speed, submessage_arena);
    }
    set_has_speed();
    type_.speed_ = speed;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.CartesianTrajectoryConstraint.speed)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CartesianTrajectoryConstraint::kSpeedFieldNumber;
const int CartesianTrajectoryConstraint::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CartesianTrajectoryConstraint::CartesianTrajectoryConstraint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_CartesianTrajectoryConstraint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.CartesianTrajectoryConstraint)
}
CartesianTrajectoryConstraint::CartesianTrajectoryConstraint(const CartesianTrajectoryConstraint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kSpeed: {
      mutable_speed()->::Kinova::Api::Base::CartesianSpeed::MergeFrom(from.speed());
      break;
    }
    case kDuration: {
      set_duration(from.duration());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.CartesianTrajectoryConstraint)
}

void CartesianTrajectoryConstraint::SharedCtor() {
  clear_has_type();
}

CartesianTrajectoryConstraint::~CartesianTrajectoryConstraint() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.CartesianTrajectoryConstraint)
  SharedDtor();
}

void CartesianTrajectoryConstraint::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void CartesianTrajectoryConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CartesianTrajectoryConstraint::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CartesianTrajectoryConstraint& CartesianTrajectoryConstraint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_CartesianTrajectoryConstraint.base);
  return *internal_default_instance();
}


void CartesianTrajectoryConstraint::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:Kinova.Api.Base.CartesianTrajectoryConstraint)
  switch (type_case()) {
    case kSpeed: {
      delete type_.speed_;
      break;
    }
    case kDuration: {
      // No need to clear
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void CartesianTrajectoryConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.CartesianTrajectoryConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

bool CartesianTrajectoryConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.CartesianTrajectoryConstraint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.CartesianSpeed speed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &type_.duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.CartesianTrajectoryConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.CartesianTrajectoryConstraint)
  return false;
#undef DO_
}

void CartesianTrajectoryConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.CartesianTrajectoryConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.CartesianSpeed speed = 1;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_speed(), output);
  }

  // float duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.CartesianTrajectoryConstraint)
}

::google::protobuf::uint8* CartesianTrajectoryConstraint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.CartesianTrajectoryConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.CartesianSpeed speed = 1;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_speed(), deterministic, target);
  }

  // float duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.CartesianTrajectoryConstraint)
  return target;
}

size_t CartesianTrajectoryConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.CartesianTrajectoryConstraint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (type_case()) {
    // .Kinova.Api.Base.CartesianSpeed speed = 1;
    case kSpeed: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.speed_);
      break;
    }
    // float duration = 2;
    case kDuration: {
      total_size += 1 + 4;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CartesianTrajectoryConstraint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.CartesianTrajectoryConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const CartesianTrajectoryConstraint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CartesianTrajectoryConstraint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.CartesianTrajectoryConstraint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.CartesianTrajectoryConstraint)
    MergeFrom(*source);
  }
}

void CartesianTrajectoryConstraint::MergeFrom(const CartesianTrajectoryConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.CartesianTrajectoryConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kSpeed: {
      mutable_speed()->::Kinova::Api::Base::CartesianSpeed::MergeFrom(from.speed());
      break;
    }
    case kDuration: {
      set_duration(from.duration());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void CartesianTrajectoryConstraint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.CartesianTrajectoryConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CartesianTrajectoryConstraint::CopyFrom(const CartesianTrajectoryConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.CartesianTrajectoryConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartesianTrajectoryConstraint::IsInitialized() const {
  return true;
}

void CartesianTrajectoryConstraint::Swap(CartesianTrajectoryConstraint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CartesianTrajectoryConstraint::InternalSwap(CartesianTrajectoryConstraint* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CartesianTrajectoryConstraint::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JointTrajectoryConstraint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JointTrajectoryConstraint::kTypeFieldNumber;
const int JointTrajectoryConstraint::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JointTrajectoryConstraint::JointTrajectoryConstraint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_JointTrajectoryConstraint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.JointTrajectoryConstraint)
}
JointTrajectoryConstraint::JointTrajectoryConstraint(const JointTrajectoryConstraint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.JointTrajectoryConstraint)
}

void JointTrajectoryConstraint::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
}

JointTrajectoryConstraint::~JointTrajectoryConstraint() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.JointTrajectoryConstraint)
  SharedDtor();
}

void JointTrajectoryConstraint::SharedDtor() {
}

void JointTrajectoryConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JointTrajectoryConstraint::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JointTrajectoryConstraint& JointTrajectoryConstraint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_JointTrajectoryConstraint.base);
  return *internal_default_instance();
}


void JointTrajectoryConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.JointTrajectoryConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

bool JointTrajectoryConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.JointTrajectoryConstraint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.JointTrajectoryConstraintType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Kinova::Api::Base::JointTrajectoryConstraintType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.JointTrajectoryConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.JointTrajectoryConstraint)
  return false;
#undef DO_
}

void JointTrajectoryConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.JointTrajectoryConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.JointTrajectoryConstraintType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // float value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.JointTrajectoryConstraint)
}

::google::protobuf::uint8* JointTrajectoryConstraint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.JointTrajectoryConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.JointTrajectoryConstraintType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // float value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.JointTrajectoryConstraint)
  return target;
}

size_t JointTrajectoryConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.JointTrajectoryConstraint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.JointTrajectoryConstraintType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // float value = 2;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointTrajectoryConstraint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.JointTrajectoryConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const JointTrajectoryConstraint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JointTrajectoryConstraint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.JointTrajectoryConstraint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.JointTrajectoryConstraint)
    MergeFrom(*source);
  }
}

void JointTrajectoryConstraint::MergeFrom(const JointTrajectoryConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.JointTrajectoryConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void JointTrajectoryConstraint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.JointTrajectoryConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointTrajectoryConstraint::CopyFrom(const JointTrajectoryConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.JointTrajectoryConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointTrajectoryConstraint::IsInitialized() const {
  return true;
}

void JointTrajectoryConstraint::Swap(JointTrajectoryConstraint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JointTrajectoryConstraint::InternalSwap(JointTrajectoryConstraint* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JointTrajectoryConstraint::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Wrench::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Wrench::kForceXFieldNumber;
const int Wrench::kForceYFieldNumber;
const int Wrench::kForceZFieldNumber;
const int Wrench::kTorqueXFieldNumber;
const int Wrench::kTorqueYFieldNumber;
const int Wrench::kTorqueZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Wrench::Wrench()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Wrench.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Wrench)
}
Wrench::Wrench(const Wrench& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&force_x_, &from.force_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&torque_z_) -
    reinterpret_cast<char*>(&force_x_)) + sizeof(torque_z_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Wrench)
}

void Wrench::SharedCtor() {
  ::memset(&force_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&torque_z_) -
      reinterpret_cast<char*>(&force_x_)) + sizeof(torque_z_));
}

Wrench::~Wrench() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Wrench)
  SharedDtor();
}

void Wrench::SharedDtor() {
}

void Wrench::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Wrench::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Wrench& Wrench::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Wrench.base);
  return *internal_default_instance();
}


void Wrench::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Wrench)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&force_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&torque_z_) -
      reinterpret_cast<char*>(&force_x_)) + sizeof(torque_z_));
  _internal_metadata_.Clear();
}

bool Wrench::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Wrench)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float force_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &force_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float force_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &force_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float force_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &force_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float torque_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &torque_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float torque_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &torque_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float torque_z = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &torque_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Wrench)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Wrench)
  return false;
#undef DO_
}

void Wrench::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Wrench)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float force_x = 1;
  if (this->force_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->force_x(), output);
  }

  // float force_y = 2;
  if (this->force_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->force_y(), output);
  }

  // float force_z = 3;
  if (this->force_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->force_z(), output);
  }

  // float torque_x = 4;
  if (this->torque_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->torque_x(), output);
  }

  // float torque_y = 5;
  if (this->torque_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->torque_y(), output);
  }

  // float torque_z = 6;
  if (this->torque_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->torque_z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Wrench)
}

::google::protobuf::uint8* Wrench::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Wrench)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float force_x = 1;
  if (this->force_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->force_x(), target);
  }

  // float force_y = 2;
  if (this->force_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->force_y(), target);
  }

  // float force_z = 3;
  if (this->force_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->force_z(), target);
  }

  // float torque_x = 4;
  if (this->torque_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->torque_x(), target);
  }

  // float torque_y = 5;
  if (this->torque_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->torque_y(), target);
  }

  // float torque_z = 6;
  if (this->torque_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->torque_z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Wrench)
  return target;
}

size_t Wrench::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Wrench)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float force_x = 1;
  if (this->force_x() != 0) {
    total_size += 1 + 4;
  }

  // float force_y = 2;
  if (this->force_y() != 0) {
    total_size += 1 + 4;
  }

  // float force_z = 3;
  if (this->force_z() != 0) {
    total_size += 1 + 4;
  }

  // float torque_x = 4;
  if (this->torque_x() != 0) {
    total_size += 1 + 4;
  }

  // float torque_y = 5;
  if (this->torque_y() != 0) {
    total_size += 1 + 4;
  }

  // float torque_z = 6;
  if (this->torque_z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wrench::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Wrench)
  GOOGLE_DCHECK_NE(&from, this);
  const Wrench* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Wrench>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Wrench)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Wrench)
    MergeFrom(*source);
  }
}

void Wrench::MergeFrom(const Wrench& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Wrench)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.force_x() != 0) {
    set_force_x(from.force_x());
  }
  if (from.force_y() != 0) {
    set_force_y(from.force_y());
  }
  if (from.force_z() != 0) {
    set_force_z(from.force_z());
  }
  if (from.torque_x() != 0) {
    set_torque_x(from.torque_x());
  }
  if (from.torque_y() != 0) {
    set_torque_y(from.torque_y());
  }
  if (from.torque_z() != 0) {
    set_torque_z(from.torque_z());
  }
}

void Wrench::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Wrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wrench::CopyFrom(const Wrench& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Wrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wrench::IsInitialized() const {
  return true;
}

void Wrench::Swap(Wrench* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Wrench::InternalSwap(Wrench* other) {
  using std::swap;
  swap(force_x_, other->force_x_);
  swap(force_y_, other->force_y_);
  swap(force_z_, other->force_z_);
  swap(torque_x_, other->torque_x_);
  swap(torque_y_, other->torque_y_);
  swap(torque_z_, other->torque_z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Wrench::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Twist::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Twist::kLinearXFieldNumber;
const int Twist::kLinearYFieldNumber;
const int Twist::kLinearZFieldNumber;
const int Twist::kAngularXFieldNumber;
const int Twist::kAngularYFieldNumber;
const int Twist::kAngularZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Twist::Twist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Twist.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Twist)
}
Twist::Twist(const Twist& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&linear_x_, &from.linear_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&angular_z_) -
    reinterpret_cast<char*>(&linear_x_)) + sizeof(angular_z_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Twist)
}

void Twist::SharedCtor() {
  ::memset(&linear_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_z_) -
      reinterpret_cast<char*>(&linear_x_)) + sizeof(angular_z_));
}

Twist::~Twist() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Twist)
  SharedDtor();
}

void Twist::SharedDtor() {
}

void Twist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Twist::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Twist& Twist::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Twist.base);
  return *internal_default_instance();
}


void Twist::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Twist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&linear_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_z_) -
      reinterpret_cast<char*>(&linear_x_)) + sizeof(angular_z_));
  _internal_metadata_.Clear();
}

bool Twist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Twist)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float linear_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linear_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float linear_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linear_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float linear_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linear_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angular_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angular_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angular_z = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Twist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Twist)
  return false;
#undef DO_
}

void Twist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Twist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float linear_x = 1;
  if (this->linear_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->linear_x(), output);
  }

  // float linear_y = 2;
  if (this->linear_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->linear_y(), output);
  }

  // float linear_z = 3;
  if (this->linear_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->linear_z(), output);
  }

  // float angular_x = 4;
  if (this->angular_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->angular_x(), output);
  }

  // float angular_y = 5;
  if (this->angular_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->angular_y(), output);
  }

  // float angular_z = 6;
  if (this->angular_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->angular_z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Twist)
}

::google::protobuf::uint8* Twist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Twist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float linear_x = 1;
  if (this->linear_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->linear_x(), target);
  }

  // float linear_y = 2;
  if (this->linear_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->linear_y(), target);
  }

  // float linear_z = 3;
  if (this->linear_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->linear_z(), target);
  }

  // float angular_x = 4;
  if (this->angular_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->angular_x(), target);
  }

  // float angular_y = 5;
  if (this->angular_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->angular_y(), target);
  }

  // float angular_z = 6;
  if (this->angular_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->angular_z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Twist)
  return target;
}

size_t Twist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Twist)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float linear_x = 1;
  if (this->linear_x() != 0) {
    total_size += 1 + 4;
  }

  // float linear_y = 2;
  if (this->linear_y() != 0) {
    total_size += 1 + 4;
  }

  // float linear_z = 3;
  if (this->linear_z() != 0) {
    total_size += 1 + 4;
  }

  // float angular_x = 4;
  if (this->angular_x() != 0) {
    total_size += 1 + 4;
  }

  // float angular_y = 5;
  if (this->angular_y() != 0) {
    total_size += 1 + 4;
  }

  // float angular_z = 6;
  if (this->angular_z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Twist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Twist)
  GOOGLE_DCHECK_NE(&from, this);
  const Twist* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Twist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Twist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Twist)
    MergeFrom(*source);
  }
}

void Twist::MergeFrom(const Twist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Twist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.linear_x() != 0) {
    set_linear_x(from.linear_x());
  }
  if (from.linear_y() != 0) {
    set_linear_y(from.linear_y());
  }
  if (from.linear_z() != 0) {
    set_linear_z(from.linear_z());
  }
  if (from.angular_x() != 0) {
    set_angular_x(from.angular_x());
  }
  if (from.angular_y() != 0) {
    set_angular_y(from.angular_y());
  }
  if (from.angular_z() != 0) {
    set_angular_z(from.angular_z());
  }
}

void Twist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Twist::CopyFrom(const Twist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Twist::IsInitialized() const {
  return true;
}

void Twist::Swap(Twist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Twist::InternalSwap(Twist* other) {
  using std::swap;
  swap(linear_x_, other->linear_x_);
  swap(linear_y_, other->linear_y_);
  swap(linear_z_, other->linear_z_);
  swap(angular_x_, other->angular_x_);
  swap(angular_y_, other->angular_y_);
  swap(angular_z_, other->angular_z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Twist::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Admittance::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Admittance::kAdmittanceModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Admittance::Admittance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Admittance.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Admittance)
}
Admittance::Admittance(const Admittance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  admittance_mode_ = from.admittance_mode_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Admittance)
}

void Admittance::SharedCtor() {
  admittance_mode_ = 0;
}

Admittance::~Admittance() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Admittance)
  SharedDtor();
}

void Admittance::SharedDtor() {
}

void Admittance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Admittance::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Admittance& Admittance::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Admittance.base);
  return *internal_default_instance();
}


void Admittance::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Admittance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  admittance_mode_ = 0;
  _internal_metadata_.Clear();
}

bool Admittance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Admittance)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.AdmittanceMode admittance_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_admittance_mode(static_cast< ::Kinova::Api::Base::AdmittanceMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Admittance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Admittance)
  return false;
#undef DO_
}

void Admittance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Admittance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.AdmittanceMode admittance_mode = 1;
  if (this->admittance_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->admittance_mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Admittance)
}

::google::protobuf::uint8* Admittance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Admittance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.AdmittanceMode admittance_mode = 1;
  if (this->admittance_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->admittance_mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Admittance)
  return target;
}

size_t Admittance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Admittance)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.AdmittanceMode admittance_mode = 1;
  if (this->admittance_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->admittance_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Admittance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Admittance)
  GOOGLE_DCHECK_NE(&from, this);
  const Admittance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Admittance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Admittance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Admittance)
    MergeFrom(*source);
  }
}

void Admittance::MergeFrom(const Admittance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Admittance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.admittance_mode() != 0) {
    set_admittance_mode(from.admittance_mode());
  }
}

void Admittance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Admittance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admittance::CopyFrom(const Admittance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Admittance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admittance::IsInitialized() const {
  return true;
}

void Admittance::Swap(Admittance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admittance::InternalSwap(Admittance* other) {
  using std::swap;
  swap(admittance_mode_, other->admittance_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Admittance::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConstrainedPose::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ConstrainedPose_default_instance_._instance.get_mutable()->target_pose_ = const_cast< ::Kinova::Api::Base::Pose*>(
      ::Kinova::Api::Base::Pose::internal_default_instance());
  ::Kinova::Api::Base::_ConstrainedPose_default_instance_._instance.get_mutable()->constraint_ = const_cast< ::Kinova::Api::Base::CartesianTrajectoryConstraint*>(
      ::Kinova::Api::Base::CartesianTrajectoryConstraint::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConstrainedPose::kTargetPoseFieldNumber;
const int ConstrainedPose::kConstraintFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConstrainedPose::ConstrainedPose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ConstrainedPose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ConstrainedPose)
}
ConstrainedPose::ConstrainedPose(const ConstrainedPose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target_pose()) {
    target_pose_ = new ::Kinova::Api::Base::Pose(*from.target_pose_);
  } else {
    target_pose_ = NULL;
  }
  if (from.has_constraint()) {
    constraint_ = new ::Kinova::Api::Base::CartesianTrajectoryConstraint(*from.constraint_);
  } else {
    constraint_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ConstrainedPose)
}

void ConstrainedPose::SharedCtor() {
  ::memset(&target_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&constraint_) -
      reinterpret_cast<char*>(&target_pose_)) + sizeof(constraint_));
}

ConstrainedPose::~ConstrainedPose() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ConstrainedPose)
  SharedDtor();
}

void ConstrainedPose::SharedDtor() {
  if (this != internal_default_instance()) delete target_pose_;
  if (this != internal_default_instance()) delete constraint_;
}

void ConstrainedPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConstrainedPose::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConstrainedPose& ConstrainedPose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ConstrainedPose.base);
  return *internal_default_instance();
}


void ConstrainedPose::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ConstrainedPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && target_pose_ != NULL) {
    delete target_pose_;
  }
  target_pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && constraint_ != NULL) {
    delete constraint_;
  }
  constraint_ = NULL;
  _internal_metadata_.Clear();
}

bool ConstrainedPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ConstrainedPose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.Pose target_pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.CartesianTrajectoryConstraint constraint = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_constraint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ConstrainedPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ConstrainedPose)
  return false;
#undef DO_
}

void ConstrainedPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ConstrainedPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.Pose target_pose = 1;
  if (this->has_target_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_target_pose(), output);
  }

  // .Kinova.Api.Base.CartesianTrajectoryConstraint constraint = 2;
  if (this->has_constraint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_constraint(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ConstrainedPose)
}

::google::protobuf::uint8* ConstrainedPose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ConstrainedPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.Pose target_pose = 1;
  if (this->has_target_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_target_pose(), deterministic, target);
  }

  // .Kinova.Api.Base.CartesianTrajectoryConstraint constraint = 2;
  if (this->has_constraint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_constraint(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ConstrainedPose)
  return target;
}

size_t ConstrainedPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ConstrainedPose)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.Pose target_pose = 1;
  if (this->has_target_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *target_pose_);
  }

  // .Kinova.Api.Base.CartesianTrajectoryConstraint constraint = 2;
  if (this->has_constraint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *constraint_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConstrainedPose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ConstrainedPose)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstrainedPose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConstrainedPose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ConstrainedPose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ConstrainedPose)
    MergeFrom(*source);
  }
}

void ConstrainedPose::MergeFrom(const ConstrainedPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ConstrainedPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target_pose()) {
    mutable_target_pose()->::Kinova::Api::Base::Pose::MergeFrom(from.target_pose());
  }
  if (from.has_constraint()) {
    mutable_constraint()->::Kinova::Api::Base::CartesianTrajectoryConstraint::MergeFrom(from.constraint());
  }
}

void ConstrainedPose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ConstrainedPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstrainedPose::CopyFrom(const ConstrainedPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ConstrainedPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstrainedPose::IsInitialized() const {
  return true;
}

void ConstrainedPose::Swap(ConstrainedPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConstrainedPose::InternalSwap(ConstrainedPose* other) {
  using std::swap;
  swap(target_pose_, other->target_pose_);
  swap(constraint_, other->constraint_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConstrainedPose::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConstrainedPosition::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ConstrainedPosition_default_instance_._instance.get_mutable()->target_position_ = const_cast< ::Kinova::Api::Base::Position*>(
      ::Kinova::Api::Base::Position::internal_default_instance());
  ::Kinova::Api::Base::_ConstrainedPosition_default_instance_._instance.get_mutable()->constraint_ = const_cast< ::Kinova::Api::Base::CartesianTrajectoryConstraint*>(
      ::Kinova::Api::Base::CartesianTrajectoryConstraint::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConstrainedPosition::kTargetPositionFieldNumber;
const int ConstrainedPosition::kConstraintFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConstrainedPosition::ConstrainedPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ConstrainedPosition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ConstrainedPosition)
}
ConstrainedPosition::ConstrainedPosition(const ConstrainedPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target_position()) {
    target_position_ = new ::Kinova::Api::Base::Position(*from.target_position_);
  } else {
    target_position_ = NULL;
  }
  if (from.has_constraint()) {
    constraint_ = new ::Kinova::Api::Base::CartesianTrajectoryConstraint(*from.constraint_);
  } else {
    constraint_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ConstrainedPosition)
}

void ConstrainedPosition::SharedCtor() {
  ::memset(&target_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&constraint_) -
      reinterpret_cast<char*>(&target_position_)) + sizeof(constraint_));
}

ConstrainedPosition::~ConstrainedPosition() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ConstrainedPosition)
  SharedDtor();
}

void ConstrainedPosition::SharedDtor() {
  if (this != internal_default_instance()) delete target_position_;
  if (this != internal_default_instance()) delete constraint_;
}

void ConstrainedPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConstrainedPosition::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConstrainedPosition& ConstrainedPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ConstrainedPosition.base);
  return *internal_default_instance();
}


void ConstrainedPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ConstrainedPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && target_position_ != NULL) {
    delete target_position_;
  }
  target_position_ = NULL;
  if (GetArenaNoVirtual() == NULL && constraint_ != NULL) {
    delete constraint_;
  }
  constraint_ = NULL;
  _internal_metadata_.Clear();
}

bool ConstrainedPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ConstrainedPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.Position target_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.CartesianTrajectoryConstraint constraint = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_constraint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ConstrainedPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ConstrainedPosition)
  return false;
#undef DO_
}

void ConstrainedPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ConstrainedPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.Position target_position = 1;
  if (this->has_target_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_target_position(), output);
  }

  // .Kinova.Api.Base.CartesianTrajectoryConstraint constraint = 2;
  if (this->has_constraint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_constraint(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ConstrainedPosition)
}

::google::protobuf::uint8* ConstrainedPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ConstrainedPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.Position target_position = 1;
  if (this->has_target_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_target_position(), deterministic, target);
  }

  // .Kinova.Api.Base.CartesianTrajectoryConstraint constraint = 2;
  if (this->has_constraint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_constraint(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ConstrainedPosition)
  return target;
}

size_t ConstrainedPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ConstrainedPosition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.Position target_position = 1;
  if (this->has_target_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *target_position_);
  }

  // .Kinova.Api.Base.CartesianTrajectoryConstraint constraint = 2;
  if (this->has_constraint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *constraint_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConstrainedPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ConstrainedPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstrainedPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConstrainedPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ConstrainedPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ConstrainedPosition)
    MergeFrom(*source);
  }
}

void ConstrainedPosition::MergeFrom(const ConstrainedPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ConstrainedPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target_position()) {
    mutable_target_position()->::Kinova::Api::Base::Position::MergeFrom(from.target_position());
  }
  if (from.has_constraint()) {
    mutable_constraint()->::Kinova::Api::Base::CartesianTrajectoryConstraint::MergeFrom(from.constraint());
  }
}

void ConstrainedPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ConstrainedPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstrainedPosition::CopyFrom(const ConstrainedPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ConstrainedPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstrainedPosition::IsInitialized() const {
  return true;
}

void ConstrainedPosition::Swap(ConstrainedPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConstrainedPosition::InternalSwap(ConstrainedPosition* other) {
  using std::swap;
  swap(target_position_, other->target_position_);
  swap(constraint_, other->constraint_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConstrainedPosition::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConstrainedOrientation::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ConstrainedOrientation_default_instance_._instance.get_mutable()->target_orientation_ = const_cast< ::Kinova::Api::Base::Orientation*>(
      ::Kinova::Api::Base::Orientation::internal_default_instance());
  ::Kinova::Api::Base::_ConstrainedOrientation_default_instance_._instance.get_mutable()->constraint_ = const_cast< ::Kinova::Api::Base::CartesianTrajectoryConstraint*>(
      ::Kinova::Api::Base::CartesianTrajectoryConstraint::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConstrainedOrientation::kTargetOrientationFieldNumber;
const int ConstrainedOrientation::kConstraintFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConstrainedOrientation::ConstrainedOrientation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ConstrainedOrientation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ConstrainedOrientation)
}
ConstrainedOrientation::ConstrainedOrientation(const ConstrainedOrientation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target_orientation()) {
    target_orientation_ = new ::Kinova::Api::Base::Orientation(*from.target_orientation_);
  } else {
    target_orientation_ = NULL;
  }
  if (from.has_constraint()) {
    constraint_ = new ::Kinova::Api::Base::CartesianTrajectoryConstraint(*from.constraint_);
  } else {
    constraint_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ConstrainedOrientation)
}

void ConstrainedOrientation::SharedCtor() {
  ::memset(&target_orientation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&constraint_) -
      reinterpret_cast<char*>(&target_orientation_)) + sizeof(constraint_));
}

ConstrainedOrientation::~ConstrainedOrientation() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ConstrainedOrientation)
  SharedDtor();
}

void ConstrainedOrientation::SharedDtor() {
  if (this != internal_default_instance()) delete target_orientation_;
  if (this != internal_default_instance()) delete constraint_;
}

void ConstrainedOrientation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConstrainedOrientation::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConstrainedOrientation& ConstrainedOrientation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ConstrainedOrientation.base);
  return *internal_default_instance();
}


void ConstrainedOrientation::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ConstrainedOrientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && target_orientation_ != NULL) {
    delete target_orientation_;
  }
  target_orientation_ = NULL;
  if (GetArenaNoVirtual() == NULL && constraint_ != NULL) {
    delete constraint_;
  }
  constraint_ = NULL;
  _internal_metadata_.Clear();
}

bool ConstrainedOrientation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ConstrainedOrientation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.Orientation target_orientation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.CartesianTrajectoryConstraint constraint = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_constraint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ConstrainedOrientation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ConstrainedOrientation)
  return false;
#undef DO_
}

void ConstrainedOrientation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ConstrainedOrientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.Orientation target_orientation = 1;
  if (this->has_target_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_target_orientation(), output);
  }

  // .Kinova.Api.Base.CartesianTrajectoryConstraint constraint = 2;
  if (this->has_constraint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_constraint(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ConstrainedOrientation)
}

::google::protobuf::uint8* ConstrainedOrientation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ConstrainedOrientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.Orientation target_orientation = 1;
  if (this->has_target_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_target_orientation(), deterministic, target);
  }

  // .Kinova.Api.Base.CartesianTrajectoryConstraint constraint = 2;
  if (this->has_constraint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_constraint(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ConstrainedOrientation)
  return target;
}

size_t ConstrainedOrientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ConstrainedOrientation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.Orientation target_orientation = 1;
  if (this->has_target_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *target_orientation_);
  }

  // .Kinova.Api.Base.CartesianTrajectoryConstraint constraint = 2;
  if (this->has_constraint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *constraint_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConstrainedOrientation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ConstrainedOrientation)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstrainedOrientation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConstrainedOrientation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ConstrainedOrientation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ConstrainedOrientation)
    MergeFrom(*source);
  }
}

void ConstrainedOrientation::MergeFrom(const ConstrainedOrientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ConstrainedOrientation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target_orientation()) {
    mutable_target_orientation()->::Kinova::Api::Base::Orientation::MergeFrom(from.target_orientation());
  }
  if (from.has_constraint()) {
    mutable_constraint()->::Kinova::Api::Base::CartesianTrajectoryConstraint::MergeFrom(from.constraint());
  }
}

void ConstrainedOrientation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ConstrainedOrientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstrainedOrientation::CopyFrom(const ConstrainedOrientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ConstrainedOrientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstrainedOrientation::IsInitialized() const {
  return true;
}

void ConstrainedOrientation::Swap(ConstrainedOrientation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConstrainedOrientation::InternalSwap(ConstrainedOrientation* other) {
  using std::swap;
  swap(target_orientation_, other->target_orientation_);
  swap(constraint_, other->constraint_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConstrainedOrientation::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WrenchCommand::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_WrenchCommand_default_instance_._instance.get_mutable()->wrench_ = const_cast< ::Kinova::Api::Base::Wrench*>(
      ::Kinova::Api::Base::Wrench::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WrenchCommand::kReferenceFrameFieldNumber;
const int WrenchCommand::kModeFieldNumber;
const int WrenchCommand::kWrenchFieldNumber;
const int WrenchCommand::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WrenchCommand::WrenchCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_WrenchCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.WrenchCommand)
}
WrenchCommand::WrenchCommand(const WrenchCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_wrench()) {
    wrench_ = new ::Kinova::Api::Base::Wrench(*from.wrench_);
  } else {
    wrench_ = NULL;
  }
  ::memcpy(&reference_frame_, &from.reference_frame_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&reference_frame_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.WrenchCommand)
}

void WrenchCommand::SharedCtor() {
  ::memset(&wrench_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&wrench_)) + sizeof(duration_));
}

WrenchCommand::~WrenchCommand() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.WrenchCommand)
  SharedDtor();
}

void WrenchCommand::SharedDtor() {
  if (this != internal_default_instance()) delete wrench_;
}

void WrenchCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WrenchCommand::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WrenchCommand& WrenchCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_WrenchCommand.base);
  return *internal_default_instance();
}


void WrenchCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.WrenchCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && wrench_ != NULL) {
    delete wrench_;
  }
  wrench_ = NULL;
  ::memset(&reference_frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&reference_frame_)) + sizeof(duration_));
  _internal_metadata_.Clear();
}

bool WrenchCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.WrenchCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Common.CartesianReferenceFrame reference_frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reference_frame(static_cast< ::Kinova::Api::Common::CartesianReferenceFrame >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.WrenchMode mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::Kinova::Api::Base::WrenchMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.Wrench wrench = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wrench()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.WrenchCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.WrenchCommand)
  return false;
#undef DO_
}

void WrenchCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.WrenchCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.CartesianReferenceFrame reference_frame = 1;
  if (this->reference_frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reference_frame(), output);
  }

  // .Kinova.Api.Base.WrenchMode mode = 2;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // .Kinova.Api.Base.Wrench wrench = 3;
  if (this->has_wrench()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_wrench(), output);
  }

  // uint32 duration = 4;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.WrenchCommand)
}

::google::protobuf::uint8* WrenchCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.WrenchCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.CartesianReferenceFrame reference_frame = 1;
  if (this->reference_frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reference_frame(), target);
  }

  // .Kinova.Api.Base.WrenchMode mode = 2;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // .Kinova.Api.Base.Wrench wrench = 3;
  if (this->has_wrench()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_wrench(), deterministic, target);
  }

  // uint32 duration = 4;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->duration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.WrenchCommand)
  return target;
}

size_t WrenchCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.WrenchCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.Wrench wrench = 3;
  if (this->has_wrench()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *wrench_);
  }

  // .Kinova.Api.Common.CartesianReferenceFrame reference_frame = 1;
  if (this->reference_frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reference_frame());
  }

  // .Kinova.Api.Base.WrenchMode mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  // uint32 duration = 4;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WrenchCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.WrenchCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const WrenchCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WrenchCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.WrenchCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.WrenchCommand)
    MergeFrom(*source);
  }
}

void WrenchCommand::MergeFrom(const WrenchCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.WrenchCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wrench()) {
    mutable_wrench()->::Kinova::Api::Base::Wrench::MergeFrom(from.wrench());
  }
  if (from.reference_frame() != 0) {
    set_reference_frame(from.reference_frame());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void WrenchCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.WrenchCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WrenchCommand::CopyFrom(const WrenchCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.WrenchCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrenchCommand::IsInitialized() const {
  return true;
}

void WrenchCommand::Swap(WrenchCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WrenchCommand::InternalSwap(WrenchCommand* other) {
  using std::swap;
  swap(wrench_, other->wrench_);
  swap(reference_frame_, other->reference_frame_);
  swap(mode_, other->mode_);
  swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WrenchCommand::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TwistCommand::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_TwistCommand_default_instance_._instance.get_mutable()->twist_ = const_cast< ::Kinova::Api::Base::Twist*>(
      ::Kinova::Api::Base::Twist::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TwistCommand::kReferenceFrameFieldNumber;
const int TwistCommand::kTwistFieldNumber;
const int TwistCommand::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TwistCommand::TwistCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_TwistCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.TwistCommand)
}
TwistCommand::TwistCommand(const TwistCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_twist()) {
    twist_ = new ::Kinova::Api::Base::Twist(*from.twist_);
  } else {
    twist_ = NULL;
  }
  ::memcpy(&reference_frame_, &from.reference_frame_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&reference_frame_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.TwistCommand)
}

void TwistCommand::SharedCtor() {
  ::memset(&twist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&twist_)) + sizeof(duration_));
}

TwistCommand::~TwistCommand() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.TwistCommand)
  SharedDtor();
}

void TwistCommand::SharedDtor() {
  if (this != internal_default_instance()) delete twist_;
}

void TwistCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TwistCommand::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TwistCommand& TwistCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_TwistCommand.base);
  return *internal_default_instance();
}


void TwistCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.TwistCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && twist_ != NULL) {
    delete twist_;
  }
  twist_ = NULL;
  ::memset(&reference_frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&reference_frame_)) + sizeof(duration_));
  _internal_metadata_.Clear();
}

bool TwistCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.TwistCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Common.CartesianReferenceFrame reference_frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reference_frame(static_cast< ::Kinova::Api::Common::CartesianReferenceFrame >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.Twist twist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_twist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.TwistCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.TwistCommand)
  return false;
#undef DO_
}

void TwistCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.TwistCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.CartesianReferenceFrame reference_frame = 1;
  if (this->reference_frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reference_frame(), output);
  }

  // .Kinova.Api.Base.Twist twist = 2;
  if (this->has_twist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_twist(), output);
  }

  // uint32 duration = 3;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.TwistCommand)
}

::google::protobuf::uint8* TwistCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.TwistCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.CartesianReferenceFrame reference_frame = 1;
  if (this->reference_frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reference_frame(), target);
  }

  // .Kinova.Api.Base.Twist twist = 2;
  if (this->has_twist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_twist(), deterministic, target);
  }

  // uint32 duration = 3;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.TwistCommand)
  return target;
}

size_t TwistCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.TwistCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.Twist twist = 2;
  if (this->has_twist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *twist_);
  }

  // .Kinova.Api.Common.CartesianReferenceFrame reference_frame = 1;
  if (this->reference_frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reference_frame());
  }

  // uint32 duration = 3;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TwistCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.TwistCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const TwistCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TwistCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.TwistCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.TwistCommand)
    MergeFrom(*source);
  }
}

void TwistCommand::MergeFrom(const TwistCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.TwistCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_twist()) {
    mutable_twist()->::Kinova::Api::Base::Twist::MergeFrom(from.twist());
  }
  if (from.reference_frame() != 0) {
    set_reference_frame(from.reference_frame());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void TwistCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.TwistCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwistCommand::CopyFrom(const TwistCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.TwistCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwistCommand::IsInitialized() const {
  return true;
}

void TwistCommand::Swap(TwistCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TwistCommand::InternalSwap(TwistCommand* other) {
  using std::swap;
  swap(twist_, other->twist_);
  swap(reference_frame_, other->reference_frame_);
  swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TwistCommand::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConstrainedJointAngles::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ConstrainedJointAngles_default_instance_._instance.get_mutable()->joint_angles_ = const_cast< ::Kinova::Api::Base::JointAngles*>(
      ::Kinova::Api::Base::JointAngles::internal_default_instance());
  ::Kinova::Api::Base::_ConstrainedJointAngles_default_instance_._instance.get_mutable()->constraint_ = const_cast< ::Kinova::Api::Base::JointTrajectoryConstraint*>(
      ::Kinova::Api::Base::JointTrajectoryConstraint::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConstrainedJointAngles::kJointAnglesFieldNumber;
const int ConstrainedJointAngles::kConstraintFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConstrainedJointAngles::ConstrainedJointAngles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ConstrainedJointAngles.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ConstrainedJointAngles)
}
ConstrainedJointAngles::ConstrainedJointAngles(const ConstrainedJointAngles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_joint_angles()) {
    joint_angles_ = new ::Kinova::Api::Base::JointAngles(*from.joint_angles_);
  } else {
    joint_angles_ = NULL;
  }
  if (from.has_constraint()) {
    constraint_ = new ::Kinova::Api::Base::JointTrajectoryConstraint(*from.constraint_);
  } else {
    constraint_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ConstrainedJointAngles)
}

void ConstrainedJointAngles::SharedCtor() {
  ::memset(&joint_angles_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&constraint_) -
      reinterpret_cast<char*>(&joint_angles_)) + sizeof(constraint_));
}

ConstrainedJointAngles::~ConstrainedJointAngles() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ConstrainedJointAngles)
  SharedDtor();
}

void ConstrainedJointAngles::SharedDtor() {
  if (this != internal_default_instance()) delete joint_angles_;
  if (this != internal_default_instance()) delete constraint_;
}

void ConstrainedJointAngles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConstrainedJointAngles::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConstrainedJointAngles& ConstrainedJointAngles::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ConstrainedJointAngles.base);
  return *internal_default_instance();
}


void ConstrainedJointAngles::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ConstrainedJointAngles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && joint_angles_ != NULL) {
    delete joint_angles_;
  }
  joint_angles_ = NULL;
  if (GetArenaNoVirtual() == NULL && constraint_ != NULL) {
    delete constraint_;
  }
  constraint_ = NULL;
  _internal_metadata_.Clear();
}

bool ConstrainedJointAngles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ConstrainedJointAngles)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.JointAngles joint_angles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_joint_angles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.JointTrajectoryConstraint constraint = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_constraint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ConstrainedJointAngles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ConstrainedJointAngles)
  return false;
#undef DO_
}

void ConstrainedJointAngles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ConstrainedJointAngles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.JointAngles joint_angles = 1;
  if (this->has_joint_angles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_joint_angles(), output);
  }

  // .Kinova.Api.Base.JointTrajectoryConstraint constraint = 2;
  if (this->has_constraint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_constraint(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ConstrainedJointAngles)
}

::google::protobuf::uint8* ConstrainedJointAngles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ConstrainedJointAngles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.JointAngles joint_angles = 1;
  if (this->has_joint_angles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_joint_angles(), deterministic, target);
  }

  // .Kinova.Api.Base.JointTrajectoryConstraint constraint = 2;
  if (this->has_constraint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_constraint(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ConstrainedJointAngles)
  return target;
}

size_t ConstrainedJointAngles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ConstrainedJointAngles)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.JointAngles joint_angles = 1;
  if (this->has_joint_angles()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *joint_angles_);
  }

  // .Kinova.Api.Base.JointTrajectoryConstraint constraint = 2;
  if (this->has_constraint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *constraint_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConstrainedJointAngles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ConstrainedJointAngles)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstrainedJointAngles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConstrainedJointAngles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ConstrainedJointAngles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ConstrainedJointAngles)
    MergeFrom(*source);
  }
}

void ConstrainedJointAngles::MergeFrom(const ConstrainedJointAngles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ConstrainedJointAngles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_joint_angles()) {
    mutable_joint_angles()->::Kinova::Api::Base::JointAngles::MergeFrom(from.joint_angles());
  }
  if (from.has_constraint()) {
    mutable_constraint()->::Kinova::Api::Base::JointTrajectoryConstraint::MergeFrom(from.constraint());
  }
}

void ConstrainedJointAngles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ConstrainedJointAngles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstrainedJointAngles::CopyFrom(const ConstrainedJointAngles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ConstrainedJointAngles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstrainedJointAngles::IsInitialized() const {
  return true;
}

void ConstrainedJointAngles::Swap(ConstrainedJointAngles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConstrainedJointAngles::InternalSwap(ConstrainedJointAngles* other) {
  using std::swap;
  swap(joint_angles_, other->joint_angles_);
  swap(constraint_, other->constraint_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConstrainedJointAngles::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConstrainedJointAngle::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ConstrainedJointAngle_default_instance_._instance.get_mutable()->constraint_ = const_cast< ::Kinova::Api::Base::JointTrajectoryConstraint*>(
      ::Kinova::Api::Base::JointTrajectoryConstraint::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConstrainedJointAngle::kJointIdentifierFieldNumber;
const int ConstrainedJointAngle::kValueFieldNumber;
const int ConstrainedJointAngle::kConstraintFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConstrainedJointAngle::ConstrainedJointAngle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ConstrainedJointAngle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ConstrainedJointAngle)
}
ConstrainedJointAngle::ConstrainedJointAngle(const ConstrainedJointAngle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_constraint()) {
    constraint_ = new ::Kinova::Api::Base::JointTrajectoryConstraint(*from.constraint_);
  } else {
    constraint_ = NULL;
  }
  ::memcpy(&joint_identifier_, &from.joint_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&joint_identifier_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ConstrainedJointAngle)
}

void ConstrainedJointAngle::SharedCtor() {
  ::memset(&constraint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&constraint_)) + sizeof(value_));
}

ConstrainedJointAngle::~ConstrainedJointAngle() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ConstrainedJointAngle)
  SharedDtor();
}

void ConstrainedJointAngle::SharedDtor() {
  if (this != internal_default_instance()) delete constraint_;
}

void ConstrainedJointAngle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConstrainedJointAngle::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConstrainedJointAngle& ConstrainedJointAngle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ConstrainedJointAngle.base);
  return *internal_default_instance();
}


void ConstrainedJointAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ConstrainedJointAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && constraint_ != NULL) {
    delete constraint_;
  }
  constraint_ = NULL;
  ::memset(&joint_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&joint_identifier_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

bool ConstrainedJointAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ConstrainedJointAngle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 joint_identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joint_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.JointTrajectoryConstraint constraint = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_constraint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ConstrainedJointAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ConstrainedJointAngle)
  return false;
#undef DO_
}

void ConstrainedJointAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ConstrainedJointAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 joint_identifier = 1;
  if (this->joint_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->joint_identifier(), output);
  }

  // float value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  // .Kinova.Api.Base.JointTrajectoryConstraint constraint = 3;
  if (this->has_constraint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_constraint(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ConstrainedJointAngle)
}

::google::protobuf::uint8* ConstrainedJointAngle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ConstrainedJointAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 joint_identifier = 1;
  if (this->joint_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->joint_identifier(), target);
  }

  // float value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  // .Kinova.Api.Base.JointTrajectoryConstraint constraint = 3;
  if (this->has_constraint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_constraint(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ConstrainedJointAngle)
  return target;
}

size_t ConstrainedJointAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ConstrainedJointAngle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.JointTrajectoryConstraint constraint = 3;
  if (this->has_constraint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *constraint_);
  }

  // uint32 joint_identifier = 1;
  if (this->joint_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->joint_identifier());
  }

  // float value = 2;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConstrainedJointAngle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ConstrainedJointAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstrainedJointAngle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConstrainedJointAngle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ConstrainedJointAngle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ConstrainedJointAngle)
    MergeFrom(*source);
  }
}

void ConstrainedJointAngle::MergeFrom(const ConstrainedJointAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ConstrainedJointAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_constraint()) {
    mutable_constraint()->::Kinova::Api::Base::JointTrajectoryConstraint::MergeFrom(from.constraint());
  }
  if (from.joint_identifier() != 0) {
    set_joint_identifier(from.joint_identifier());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void ConstrainedJointAngle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ConstrainedJointAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstrainedJointAngle::CopyFrom(const ConstrainedJointAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ConstrainedJointAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstrainedJointAngle::IsInitialized() const {
  return true;
}

void ConstrainedJointAngle::Swap(ConstrainedJointAngle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConstrainedJointAngle::InternalSwap(ConstrainedJointAngle* other) {
  using std::swap;
  swap(constraint_, other->constraint_);
  swap(joint_identifier_, other->joint_identifier_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConstrainedJointAngle::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JointAngles::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JointAngles::kJointAnglesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JointAngles::JointAngles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_JointAngles.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.JointAngles)
}
JointAngles::JointAngles(const JointAngles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      joint_angles_(from.joint_angles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.JointAngles)
}

void JointAngles::SharedCtor() {
}

JointAngles::~JointAngles() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.JointAngles)
  SharedDtor();
}

void JointAngles::SharedDtor() {
}

void JointAngles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JointAngles::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JointAngles& JointAngles::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_JointAngles.base);
  return *internal_default_instance();
}


void JointAngles::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.JointAngles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joint_angles_.Clear();
  _internal_metadata_.Clear();
}

bool JointAngles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.JointAngles)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.JointAngle joint_angles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_joint_angles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.JointAngles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.JointAngles)
  return false;
#undef DO_
}

void JointAngles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.JointAngles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.JointAngle joint_angles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->joint_angles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->joint_angles(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.JointAngles)
}

::google::protobuf::uint8* JointAngles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.JointAngles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.JointAngle joint_angles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->joint_angles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->joint_angles(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.JointAngles)
  return target;
}

size_t JointAngles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.JointAngles)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.JointAngle joint_angles = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->joint_angles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->joint_angles(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointAngles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.JointAngles)
  GOOGLE_DCHECK_NE(&from, this);
  const JointAngles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JointAngles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.JointAngles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.JointAngles)
    MergeFrom(*source);
  }
}

void JointAngles::MergeFrom(const JointAngles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.JointAngles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joint_angles_.MergeFrom(from.joint_angles_);
}

void JointAngles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.JointAngles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointAngles::CopyFrom(const JointAngles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.JointAngles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointAngles::IsInitialized() const {
  return true;
}

void JointAngles::Swap(JointAngles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JointAngles::InternalSwap(JointAngles* other) {
  using std::swap;
  CastToBase(&joint_angles_)->InternalSwap(CastToBase(&other->joint_angles_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JointAngles::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JointAngle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JointAngle::kJointIdentifierFieldNumber;
const int JointAngle::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JointAngle::JointAngle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_JointAngle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.JointAngle)
}
JointAngle::JointAngle(const JointAngle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&joint_identifier_, &from.joint_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&joint_identifier_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.JointAngle)
}

void JointAngle::SharedCtor() {
  ::memset(&joint_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&joint_identifier_)) + sizeof(value_));
}

JointAngle::~JointAngle() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.JointAngle)
  SharedDtor();
}

void JointAngle::SharedDtor() {
}

void JointAngle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JointAngle::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JointAngle& JointAngle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_JointAngle.base);
  return *internal_default_instance();
}


void JointAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.JointAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&joint_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&joint_identifier_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

bool JointAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.JointAngle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 joint_identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joint_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.JointAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.JointAngle)
  return false;
#undef DO_
}

void JointAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.JointAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 joint_identifier = 1;
  if (this->joint_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->joint_identifier(), output);
  }

  // float value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.JointAngle)
}

::google::protobuf::uint8* JointAngle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.JointAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 joint_identifier = 1;
  if (this->joint_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->joint_identifier(), target);
  }

  // float value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.JointAngle)
  return target;
}

size_t JointAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.JointAngle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 joint_identifier = 1;
  if (this->joint_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->joint_identifier());
  }

  // float value = 2;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointAngle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.JointAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const JointAngle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JointAngle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.JointAngle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.JointAngle)
    MergeFrom(*source);
  }
}

void JointAngle::MergeFrom(const JointAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.JointAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.joint_identifier() != 0) {
    set_joint_identifier(from.joint_identifier());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void JointAngle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.JointAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointAngle::CopyFrom(const JointAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.JointAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointAngle::IsInitialized() const {
  return true;
}

void JointAngle::Swap(JointAngle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JointAngle::InternalSwap(JointAngle* other) {
  using std::swap;
  swap(joint_identifier_, other->joint_identifier_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JointAngle::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JointSpeeds::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JointSpeeds::kJointSpeedsFieldNumber;
const int JointSpeeds::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JointSpeeds::JointSpeeds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_JointSpeeds.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.JointSpeeds)
}
JointSpeeds::JointSpeeds(const JointSpeeds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      joint_speeds_(from.joint_speeds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.JointSpeeds)
}

void JointSpeeds::SharedCtor() {
  duration_ = 0u;
}

JointSpeeds::~JointSpeeds() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.JointSpeeds)
  SharedDtor();
}

void JointSpeeds::SharedDtor() {
}

void JointSpeeds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JointSpeeds::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JointSpeeds& JointSpeeds::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_JointSpeeds.base);
  return *internal_default_instance();
}


void JointSpeeds::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.JointSpeeds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joint_speeds_.Clear();
  duration_ = 0u;
  _internal_metadata_.Clear();
}

bool JointSpeeds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.JointSpeeds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.JointSpeed joint_speeds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_joint_speeds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.JointSpeeds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.JointSpeeds)
  return false;
#undef DO_
}

void JointSpeeds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.JointSpeeds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.JointSpeed joint_speeds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->joint_speeds_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->joint_speeds(static_cast<int>(i)),
      output);
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.JointSpeeds)
}

::google::protobuf::uint8* JointSpeeds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.JointSpeeds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.JointSpeed joint_speeds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->joint_speeds_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->joint_speeds(static_cast<int>(i)), deterministic, target);
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.JointSpeeds)
  return target;
}

size_t JointSpeeds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.JointSpeeds)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.JointSpeed joint_speeds = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->joint_speeds_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->joint_speeds(static_cast<int>(i)));
    }
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointSpeeds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.JointSpeeds)
  GOOGLE_DCHECK_NE(&from, this);
  const JointSpeeds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JointSpeeds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.JointSpeeds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.JointSpeeds)
    MergeFrom(*source);
  }
}

void JointSpeeds::MergeFrom(const JointSpeeds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.JointSpeeds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joint_speeds_.MergeFrom(from.joint_speeds_);
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void JointSpeeds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.JointSpeeds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointSpeeds::CopyFrom(const JointSpeeds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.JointSpeeds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointSpeeds::IsInitialized() const {
  return true;
}

void JointSpeeds::Swap(JointSpeeds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JointSpeeds::InternalSwap(JointSpeeds* other) {
  using std::swap;
  CastToBase(&joint_speeds_)->InternalSwap(CastToBase(&other->joint_speeds_));
  swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JointSpeeds::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JointSpeed::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JointSpeed::kJointIdentifierFieldNumber;
const int JointSpeed::kValueFieldNumber;
const int JointSpeed::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JointSpeed::JointSpeed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_JointSpeed.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.JointSpeed)
}
JointSpeed::JointSpeed(const JointSpeed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&joint_identifier_, &from.joint_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&joint_identifier_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.JointSpeed)
}

void JointSpeed::SharedCtor() {
  ::memset(&joint_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&joint_identifier_)) + sizeof(duration_));
}

JointSpeed::~JointSpeed() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.JointSpeed)
  SharedDtor();
}

void JointSpeed::SharedDtor() {
}

void JointSpeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JointSpeed::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JointSpeed& JointSpeed::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_JointSpeed.base);
  return *internal_default_instance();
}


void JointSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.JointSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&joint_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&joint_identifier_)) + sizeof(duration_));
  _internal_metadata_.Clear();
}

bool JointSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.JointSpeed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 joint_identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joint_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.JointSpeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.JointSpeed)
  return false;
#undef DO_
}

void JointSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.JointSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 joint_identifier = 1;
  if (this->joint_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->joint_identifier(), output);
  }

  // float value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  // uint32 duration = 3;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.JointSpeed)
}

::google::protobuf::uint8* JointSpeed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.JointSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 joint_identifier = 1;
  if (this->joint_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->joint_identifier(), target);
  }

  // float value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  // uint32 duration = 3;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.JointSpeed)
  return target;
}

size_t JointSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.JointSpeed)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 joint_identifier = 1;
  if (this->joint_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->joint_identifier());
  }

  // float value = 2;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  // uint32 duration = 3;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointSpeed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.JointSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  const JointSpeed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JointSpeed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.JointSpeed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.JointSpeed)
    MergeFrom(*source);
  }
}

void JointSpeed::MergeFrom(const JointSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.JointSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.joint_identifier() != 0) {
    set_joint_identifier(from.joint_identifier());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void JointSpeed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.JointSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointSpeed::CopyFrom(const JointSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.JointSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointSpeed::IsInitialized() const {
  return true;
}

void JointSpeed::Swap(JointSpeed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JointSpeed::InternalSwap(JointSpeed* other) {
  using std::swap;
  swap(joint_identifier_, other->joint_identifier_);
  swap(value_, other->value_);
  swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JointSpeed::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JointTorques::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JointTorques::kJointTorquesFieldNumber;
const int JointTorques::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JointTorques::JointTorques()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_JointTorques.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.JointTorques)
}
JointTorques::JointTorques(const JointTorques& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      joint_torques_(from.joint_torques_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.JointTorques)
}

void JointTorques::SharedCtor() {
  duration_ = 0u;
}

JointTorques::~JointTorques() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.JointTorques)
  SharedDtor();
}

void JointTorques::SharedDtor() {
}

void JointTorques::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JointTorques::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JointTorques& JointTorques::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_JointTorques.base);
  return *internal_default_instance();
}


void JointTorques::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.JointTorques)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joint_torques_.Clear();
  duration_ = 0u;
  _internal_metadata_.Clear();
}

bool JointTorques::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.JointTorques)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.JointTorque joint_torques = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_joint_torques()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.JointTorques)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.JointTorques)
  return false;
#undef DO_
}

void JointTorques::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.JointTorques)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.JointTorque joint_torques = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->joint_torques_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->joint_torques(static_cast<int>(i)),
      output);
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.JointTorques)
}

::google::protobuf::uint8* JointTorques::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.JointTorques)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.JointTorque joint_torques = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->joint_torques_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->joint_torques(static_cast<int>(i)), deterministic, target);
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.JointTorques)
  return target;
}

size_t JointTorques::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.JointTorques)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.JointTorque joint_torques = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->joint_torques_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->joint_torques(static_cast<int>(i)));
    }
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointTorques::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.JointTorques)
  GOOGLE_DCHECK_NE(&from, this);
  const JointTorques* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JointTorques>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.JointTorques)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.JointTorques)
    MergeFrom(*source);
  }
}

void JointTorques::MergeFrom(const JointTorques& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.JointTorques)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joint_torques_.MergeFrom(from.joint_torques_);
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void JointTorques::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.JointTorques)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointTorques::CopyFrom(const JointTorques& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.JointTorques)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointTorques::IsInitialized() const {
  return true;
}

void JointTorques::Swap(JointTorques* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JointTorques::InternalSwap(JointTorques* other) {
  using std::swap;
  CastToBase(&joint_torques_)->InternalSwap(CastToBase(&other->joint_torques_));
  swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JointTorques::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JointTorque::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JointTorque::kJointIdentifierFieldNumber;
const int JointTorque::kValueFieldNumber;
const int JointTorque::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JointTorque::JointTorque()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_JointTorque.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.JointTorque)
}
JointTorque::JointTorque(const JointTorque& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&joint_identifier_, &from.joint_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&joint_identifier_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.JointTorque)
}

void JointTorque::SharedCtor() {
  ::memset(&joint_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&joint_identifier_)) + sizeof(duration_));
}

JointTorque::~JointTorque() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.JointTorque)
  SharedDtor();
}

void JointTorque::SharedDtor() {
}

void JointTorque::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JointTorque::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JointTorque& JointTorque::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_JointTorque.base);
  return *internal_default_instance();
}


void JointTorque::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.JointTorque)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&joint_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&joint_identifier_)) + sizeof(duration_));
  _internal_metadata_.Clear();
}

bool JointTorque::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.JointTorque)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 joint_identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joint_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.JointTorque)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.JointTorque)
  return false;
#undef DO_
}

void JointTorque::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.JointTorque)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 joint_identifier = 1;
  if (this->joint_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->joint_identifier(), output);
  }

  // float value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  // uint32 duration = 3;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.JointTorque)
}

::google::protobuf::uint8* JointTorque::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.JointTorque)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 joint_identifier = 1;
  if (this->joint_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->joint_identifier(), target);
  }

  // float value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  // uint32 duration = 3;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.JointTorque)
  return target;
}

size_t JointTorque::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.JointTorque)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 joint_identifier = 1;
  if (this->joint_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->joint_identifier());
  }

  // float value = 2;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  // uint32 duration = 3;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointTorque::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.JointTorque)
  GOOGLE_DCHECK_NE(&from, this);
  const JointTorque* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JointTorque>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.JointTorque)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.JointTorque)
    MergeFrom(*source);
  }
}

void JointTorque::MergeFrom(const JointTorque& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.JointTorque)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.joint_identifier() != 0) {
    set_joint_identifier(from.joint_identifier());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void JointTorque::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.JointTorque)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointTorque::CopyFrom(const JointTorque& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.JointTorque)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointTorque::IsInitialized() const {
  return true;
}

void JointTorque::Swap(JointTorque* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JointTorque::InternalSwap(JointTorque* other) {
  using std::swap;
  swap(joint_identifier_, other->joint_identifier_);
  swap(value_, other->value_);
  swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JointTorque::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GripperCommand::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_GripperCommand_default_instance_._instance.get_mutable()->gripper_ = const_cast< ::Kinova::Api::Base::Gripper*>(
      ::Kinova::Api::Base::Gripper::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GripperCommand::kModeFieldNumber;
const int GripperCommand::kGripperFieldNumber;
const int GripperCommand::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GripperCommand::GripperCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_GripperCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.GripperCommand)
}
GripperCommand::GripperCommand(const GripperCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gripper()) {
    gripper_ = new ::Kinova::Api::Base::Gripper(*from.gripper_);
  } else {
    gripper_ = NULL;
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.GripperCommand)
}

void GripperCommand::SharedCtor() {
  ::memset(&gripper_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&gripper_)) + sizeof(duration_));
}

GripperCommand::~GripperCommand() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.GripperCommand)
  SharedDtor();
}

void GripperCommand::SharedDtor() {
  if (this != internal_default_instance()) delete gripper_;
}

void GripperCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GripperCommand::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GripperCommand& GripperCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_GripperCommand.base);
  return *internal_default_instance();
}


void GripperCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.GripperCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && gripper_ != NULL) {
    delete gripper_;
  }
  gripper_ = NULL;
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(duration_));
  _internal_metadata_.Clear();
}

bool GripperCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.GripperCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.GripperMode mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::Kinova::Api::Base::GripperMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.Gripper gripper = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gripper()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.GripperCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.GripperCommand)
  return false;
#undef DO_
}

void GripperCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.GripperCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.GripperMode mode = 1;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // .Kinova.Api.Base.Gripper gripper = 2;
  if (this->has_gripper()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_gripper(), output);
  }

  // uint32 duration = 3;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.GripperCommand)
}

::google::protobuf::uint8* GripperCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.GripperCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.GripperMode mode = 1;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // .Kinova.Api.Base.Gripper gripper = 2;
  if (this->has_gripper()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_gripper(), deterministic, target);
  }

  // uint32 duration = 3;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.GripperCommand)
  return target;
}

size_t GripperCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.GripperCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.Gripper gripper = 2;
  if (this->has_gripper()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gripper_);
  }

  // .Kinova.Api.Base.GripperMode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  // uint32 duration = 3;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GripperCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.GripperCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GripperCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GripperCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.GripperCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.GripperCommand)
    MergeFrom(*source);
  }
}

void GripperCommand::MergeFrom(const GripperCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.GripperCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gripper()) {
    mutable_gripper()->::Kinova::Api::Base::Gripper::MergeFrom(from.gripper());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void GripperCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.GripperCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GripperCommand::CopyFrom(const GripperCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.GripperCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GripperCommand::IsInitialized() const {
  return true;
}

void GripperCommand::Swap(GripperCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GripperCommand::InternalSwap(GripperCommand* other) {
  using std::swap;
  swap(gripper_, other->gripper_);
  swap(mode_, other->mode_);
  swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GripperCommand::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GripperRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GripperRequest::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GripperRequest::GripperRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_GripperRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.GripperRequest)
}
GripperRequest::GripperRequest(const GripperRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.GripperRequest)
}

void GripperRequest::SharedCtor() {
  mode_ = 0;
}

GripperRequest::~GripperRequest() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.GripperRequest)
  SharedDtor();
}

void GripperRequest::SharedDtor() {
}

void GripperRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GripperRequest::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GripperRequest& GripperRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_GripperRequest.base);
  return *internal_default_instance();
}


void GripperRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.GripperRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_ = 0;
  _internal_metadata_.Clear();
}

bool GripperRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.GripperRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.GripperMode mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::Kinova::Api::Base::GripperMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.GripperRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.GripperRequest)
  return false;
#undef DO_
}

void GripperRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.GripperRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.GripperMode mode = 1;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.GripperRequest)
}

::google::protobuf::uint8* GripperRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.GripperRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.GripperMode mode = 1;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.GripperRequest)
  return target;
}

size_t GripperRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.GripperRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.GripperMode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GripperRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.GripperRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GripperRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GripperRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.GripperRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.GripperRequest)
    MergeFrom(*source);
  }
}

void GripperRequest::MergeFrom(const GripperRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.GripperRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void GripperRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.GripperRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GripperRequest::CopyFrom(const GripperRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.GripperRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GripperRequest::IsInitialized() const {
  return true;
}

void GripperRequest::Swap(GripperRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GripperRequest::InternalSwap(GripperRequest* other) {
  using std::swap;
  swap(mode_, other->mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GripperRequest::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Gripper::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gripper::kFingerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gripper::Gripper()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Gripper.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Gripper)
}
Gripper::Gripper(const Gripper& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      finger_(from.finger_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Gripper)
}

void Gripper::SharedCtor() {
}

Gripper::~Gripper() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Gripper)
  SharedDtor();
}

void Gripper::SharedDtor() {
}

void Gripper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Gripper::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gripper& Gripper::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Gripper.base);
  return *internal_default_instance();
}


void Gripper::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Gripper)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  finger_.Clear();
  _internal_metadata_.Clear();
}

bool Gripper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Gripper)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.Finger finger = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_finger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Gripper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Gripper)
  return false;
#undef DO_
}

void Gripper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Gripper)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.Finger finger = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->finger_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->finger(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Gripper)
}

::google::protobuf::uint8* Gripper::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Gripper)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.Finger finger = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->finger_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->finger(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Gripper)
  return target;
}

size_t Gripper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Gripper)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.Finger finger = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->finger_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->finger(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gripper::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Gripper)
  GOOGLE_DCHECK_NE(&from, this);
  const Gripper* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gripper>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Gripper)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Gripper)
    MergeFrom(*source);
  }
}

void Gripper::MergeFrom(const Gripper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Gripper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  finger_.MergeFrom(from.finger_);
}

void Gripper::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Gripper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gripper::CopyFrom(const Gripper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Gripper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gripper::IsInitialized() const {
  return true;
}

void Gripper::Swap(Gripper* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gripper::InternalSwap(Gripper* other) {
  using std::swap;
  CastToBase(&finger_)->InternalSwap(CastToBase(&other->finger_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Gripper::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Finger::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Finger::kFingerIdentifierFieldNumber;
const int Finger::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Finger::Finger()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Finger.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Finger)
}
Finger::Finger(const Finger& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&finger_identifier_, &from.finger_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&finger_identifier_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Finger)
}

void Finger::SharedCtor() {
  ::memset(&finger_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&finger_identifier_)) + sizeof(value_));
}

Finger::~Finger() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Finger)
  SharedDtor();
}

void Finger::SharedDtor() {
}

void Finger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Finger::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Finger& Finger::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Finger.base);
  return *internal_default_instance();
}


void Finger::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Finger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&finger_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&finger_identifier_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

bool Finger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Finger)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 finger_identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finger_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Finger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Finger)
  return false;
#undef DO_
}

void Finger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Finger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 finger_identifier = 1;
  if (this->finger_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->finger_identifier(), output);
  }

  // float value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Finger)
}

::google::protobuf::uint8* Finger::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Finger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 finger_identifier = 1;
  if (this->finger_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->finger_identifier(), target);
  }

  // float value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Finger)
  return target;
}

size_t Finger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Finger)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 finger_identifier = 1;
  if (this->finger_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->finger_identifier());
  }

  // float value = 2;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Finger::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Finger)
  GOOGLE_DCHECK_NE(&from, this);
  const Finger* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Finger>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Finger)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Finger)
    MergeFrom(*source);
  }
}

void Finger::MergeFrom(const Finger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Finger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.finger_identifier() != 0) {
    set_finger_identifier(from.finger_identifier());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Finger::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Finger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Finger::CopyFrom(const Finger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Finger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Finger::IsInitialized() const {
  return true;
}

void Finger::Swap(Finger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Finger::InternalSwap(Finger* other) {
  using std::swap;
  swap(finger_identifier_, other->finger_identifier_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Finger::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GpioCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GpioCommand::kPortIdentifierFieldNumber;
const int GpioCommand::kPinIdentifierFieldNumber;
const int GpioCommand::kActionFieldNumber;
const int GpioCommand::kPeriodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GpioCommand::GpioCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_GpioCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.GpioCommand)
}
GpioCommand::GpioCommand(const GpioCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&port_identifier_, &from.port_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&period_) -
    reinterpret_cast<char*>(&port_identifier_)) + sizeof(period_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.GpioCommand)
}

void GpioCommand::SharedCtor() {
  ::memset(&port_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_) -
      reinterpret_cast<char*>(&port_identifier_)) + sizeof(period_));
}

GpioCommand::~GpioCommand() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.GpioCommand)
  SharedDtor();
}

void GpioCommand::SharedDtor() {
}

void GpioCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GpioCommand::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GpioCommand& GpioCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_GpioCommand.base);
  return *internal_default_instance();
}


void GpioCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.GpioCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&port_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_) -
      reinterpret_cast<char*>(&port_identifier_)) + sizeof(period_));
  _internal_metadata_.Clear();
}

bool GpioCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.GpioCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 port_identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pin_identifier = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pin_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.GpioAction action = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::Kinova::Api::Base::GpioAction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 period = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.GpioCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.GpioCommand)
  return false;
#undef DO_
}

void GpioCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.GpioCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port_identifier = 1;
  if (this->port_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port_identifier(), output);
  }

  // uint32 pin_identifier = 2;
  if (this->pin_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pin_identifier(), output);
  }

  // .Kinova.Api.Base.GpioAction action = 3;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  // uint32 period = 4;
  if (this->period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->period(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.GpioCommand)
}

::google::protobuf::uint8* GpioCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.GpioCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port_identifier = 1;
  if (this->port_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port_identifier(), target);
  }

  // uint32 pin_identifier = 2;
  if (this->pin_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pin_identifier(), target);
  }

  // .Kinova.Api.Base.GpioAction action = 3;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  // uint32 period = 4;
  if (this->period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->period(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.GpioCommand)
  return target;
}

size_t GpioCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.GpioCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 port_identifier = 1;
  if (this->port_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port_identifier());
  }

  // uint32 pin_identifier = 2;
  if (this->pin_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pin_identifier());
  }

  // .Kinova.Api.Base.GpioAction action = 3;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  // uint32 period = 4;
  if (this->period() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->period());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpioCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.GpioCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GpioCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GpioCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.GpioCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.GpioCommand)
    MergeFrom(*source);
  }
}

void GpioCommand::MergeFrom(const GpioCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.GpioCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.port_identifier() != 0) {
    set_port_identifier(from.port_identifier());
  }
  if (from.pin_identifier() != 0) {
    set_pin_identifier(from.pin_identifier());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.period() != 0) {
    set_period(from.period());
  }
}

void GpioCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.GpioCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpioCommand::CopyFrom(const GpioCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.GpioCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioCommand::IsInitialized() const {
  return true;
}

void GpioCommand::Swap(GpioCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GpioCommand::InternalSwap(GpioCommand* other) {
  using std::swap;
  swap(port_identifier_, other->port_identifier_);
  swap(pin_identifier_, other->pin_identifier_);
  swap(action_, other->action_);
  swap(period_, other->period_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GpioCommand::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SystemTime::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemTime::kSecFieldNumber;
const int SystemTime::kMinFieldNumber;
const int SystemTime::kHourFieldNumber;
const int SystemTime::kMdayFieldNumber;
const int SystemTime::kMonFieldNumber;
const int SystemTime::kYearFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemTime::SystemTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_SystemTime.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.SystemTime)
}
SystemTime::SystemTime(const SystemTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sec_, &from.sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&year_) -
    reinterpret_cast<char*>(&sec_)) + sizeof(year_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.SystemTime)
}

void SystemTime::SharedCtor() {
  ::memset(&sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&year_) -
      reinterpret_cast<char*>(&sec_)) + sizeof(year_));
}

SystemTime::~SystemTime() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.SystemTime)
  SharedDtor();
}

void SystemTime::SharedDtor() {
}

void SystemTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SystemTime::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SystemTime& SystemTime::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_SystemTime.base);
  return *internal_default_instance();
}


void SystemTime::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.SystemTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&year_) -
      reinterpret_cast<char*>(&sec_)) + sizeof(year_));
  _internal_metadata_.Clear();
}

bool SystemTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.SystemTime)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 min = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hour = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mday = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mday_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mon = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 year = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.SystemTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.SystemTime)
  return false;
#undef DO_
}

void SystemTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.SystemTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sec = 1;
  if (this->sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sec(), output);
  }

  // uint32 min = 2;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min(), output);
  }

  // uint32 hour = 3;
  if (this->hour() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hour(), output);
  }

  // uint32 mday = 4;
  if (this->mday() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mday(), output);
  }

  // uint32 mon = 5;
  if (this->mon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mon(), output);
  }

  // uint32 year = 6;
  if (this->year() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->year(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.SystemTime)
}

::google::protobuf::uint8* SystemTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.SystemTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sec = 1;
  if (this->sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sec(), target);
  }

  // uint32 min = 2;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min(), target);
  }

  // uint32 hour = 3;
  if (this->hour() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hour(), target);
  }

  // uint32 mday = 4;
  if (this->mday() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mday(), target);
  }

  // uint32 mon = 5;
  if (this->mon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mon(), target);
  }

  // uint32 year = 6;
  if (this->year() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->year(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.SystemTime)
  return target;
}

size_t SystemTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.SystemTime)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 sec = 1;
  if (this->sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sec());
  }

  // uint32 min = 2;
  if (this->min() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->min());
  }

  // uint32 hour = 3;
  if (this->hour() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hour());
  }

  // uint32 mday = 4;
  if (this->mday() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mday());
  }

  // uint32 mon = 5;
  if (this->mon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mon());
  }

  // uint32 year = 6;
  if (this->year() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->year());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.SystemTime)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SystemTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.SystemTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.SystemTime)
    MergeFrom(*source);
  }
}

void SystemTime::MergeFrom(const SystemTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.SystemTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sec() != 0) {
    set_sec(from.sec());
  }
  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.hour() != 0) {
    set_hour(from.hour());
  }
  if (from.mday() != 0) {
    set_mday(from.mday());
  }
  if (from.mon() != 0) {
    set_mon(from.mon());
  }
  if (from.year() != 0) {
    set_year(from.year());
  }
}

void SystemTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.SystemTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemTime::CopyFrom(const SystemTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.SystemTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemTime::IsInitialized() const {
  return true;
}

void SystemTime::Swap(SystemTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemTime::InternalSwap(SystemTime* other) {
  using std::swap;
  swap(sec_, other->sec_);
  swap(min_, other->min_);
  swap(hour_, other->hour_);
  swap(mday_, other->mday_);
  swap(mon_, other->mon_);
  swap(year_, other->year_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SystemTime::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControllerConfigurationMode::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerConfigurationMode::kEnableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerConfigurationMode::ControllerConfigurationMode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ControllerConfigurationMode.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ControllerConfigurationMode)
}
ControllerConfigurationMode::ControllerConfigurationMode(const ControllerConfigurationMode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ControllerConfigurationMode)
}

void ControllerConfigurationMode::SharedCtor() {
  enable_ = false;
}

ControllerConfigurationMode::~ControllerConfigurationMode() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ControllerConfigurationMode)
  SharedDtor();
}

void ControllerConfigurationMode::SharedDtor() {
}

void ControllerConfigurationMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerConfigurationMode::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerConfigurationMode& ControllerConfigurationMode::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ControllerConfigurationMode.base);
  return *internal_default_instance();
}


void ControllerConfigurationMode::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ControllerConfigurationMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enable_ = false;
  _internal_metadata_.Clear();
}

bool ControllerConfigurationMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ControllerConfigurationMode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ControllerConfigurationMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ControllerConfigurationMode)
  return false;
#undef DO_
}

void ControllerConfigurationMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ControllerConfigurationMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ControllerConfigurationMode)
}

::google::protobuf::uint8* ControllerConfigurationMode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ControllerConfigurationMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ControllerConfigurationMode)
  return target;
}

size_t ControllerConfigurationMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ControllerConfigurationMode)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerConfigurationMode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ControllerConfigurationMode)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerConfigurationMode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerConfigurationMode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ControllerConfigurationMode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ControllerConfigurationMode)
    MergeFrom(*source);
  }
}

void ControllerConfigurationMode::MergeFrom(const ControllerConfigurationMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ControllerConfigurationMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    set_enable(from.enable());
  }
}

void ControllerConfigurationMode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ControllerConfigurationMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerConfigurationMode::CopyFrom(const ControllerConfigurationMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ControllerConfigurationMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerConfigurationMode::IsInitialized() const {
  return true;
}

void ControllerConfigurationMode::Swap(ControllerConfigurationMode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerConfigurationMode::InternalSwap(ControllerConfigurationMode* other) {
  using std::swap;
  swap(enable_, other->enable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerConfigurationMode::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControllerConfiguration::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ControllerConfiguration_default_instance_._instance.get_mutable()->handle_ = const_cast< ::Kinova::Api::Base::ControllerHandle*>(
      ::Kinova::Api::Base::ControllerHandle::internal_default_instance());
  ::Kinova::Api::Base::_ControllerConfiguration_default_instance_._instance.get_mutable()->active_mapping_handle_ = const_cast< ::Kinova::Api::Base::MappingHandle*>(
      ::Kinova::Api::Base::MappingHandle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerConfiguration::kHandleFieldNumber;
const int ControllerConfiguration::kNameFieldNumber;
const int ControllerConfiguration::kActiveMappingHandleFieldNumber;
const int ControllerConfiguration::kAnalogInputIdentifierEnumFieldNumber;
const int ControllerConfiguration::kDigitalInputIdentifierEnumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerConfiguration::ControllerConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ControllerConfiguration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ControllerConfiguration)
}
ControllerConfiguration::ControllerConfiguration(const ControllerConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  analog_input_identifier_enum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.analog_input_identifier_enum().size() > 0) {
    analog_input_identifier_enum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analog_input_identifier_enum_);
  }
  digital_input_identifier_enum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.digital_input_identifier_enum().size() > 0) {
    digital_input_identifier_enum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.digital_input_identifier_enum_);
  }
  if (from.has_handle()) {
    handle_ = new ::Kinova::Api::Base::ControllerHandle(*from.handle_);
  } else {
    handle_ = NULL;
  }
  if (from.has_active_mapping_handle()) {
    active_mapping_handle_ = new ::Kinova::Api::Base::MappingHandle(*from.active_mapping_handle_);
  } else {
    active_mapping_handle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ControllerConfiguration)
}

void ControllerConfiguration::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  analog_input_identifier_enum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  digital_input_identifier_enum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_mapping_handle_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(active_mapping_handle_));
}

ControllerConfiguration::~ControllerConfiguration() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ControllerConfiguration)
  SharedDtor();
}

void ControllerConfiguration::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  analog_input_identifier_enum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  digital_input_identifier_enum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete handle_;
  if (this != internal_default_instance()) delete active_mapping_handle_;
}

void ControllerConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerConfiguration::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerConfiguration& ControllerConfiguration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ControllerConfiguration.base);
  return *internal_default_instance();
}


void ControllerConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ControllerConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  analog_input_identifier_enum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  digital_input_identifier_enum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && handle_ != NULL) {
    delete handle_;
  }
  handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && active_mapping_handle_ != NULL) {
    delete active_mapping_handle_;
  }
  active_mapping_handle_ = NULL;
  _internal_metadata_.Clear();
}

bool ControllerConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ControllerConfiguration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.ControllerHandle handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.ControllerConfiguration.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.MappingHandle active_mapping_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_active_mapping_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string analog_input_identifier_enum = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analog_input_identifier_enum()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analog_input_identifier_enum().data(), static_cast<int>(this->analog_input_identifier_enum().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.ControllerConfiguration.analog_input_identifier_enum"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string digital_input_identifier_enum = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_digital_input_identifier_enum()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->digital_input_identifier_enum().data(), static_cast<int>(this->digital_input_identifier_enum().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.ControllerConfiguration.digital_input_identifier_enum"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ControllerConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ControllerConfiguration)
  return false;
#undef DO_
}

void ControllerConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ControllerConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ControllerHandle handle = 1;
  if (this->has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_handle(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.ControllerConfiguration.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .Kinova.Api.Base.MappingHandle active_mapping_handle = 3;
  if (this->has_active_mapping_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_active_mapping_handle(), output);
  }

  // string analog_input_identifier_enum = 4;
  if (this->analog_input_identifier_enum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analog_input_identifier_enum().data(), static_cast<int>(this->analog_input_identifier_enum().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.ControllerConfiguration.analog_input_identifier_enum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->analog_input_identifier_enum(), output);
  }

  // string digital_input_identifier_enum = 5;
  if (this->digital_input_identifier_enum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->digital_input_identifier_enum().data(), static_cast<int>(this->digital_input_identifier_enum().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.ControllerConfiguration.digital_input_identifier_enum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->digital_input_identifier_enum(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ControllerConfiguration)
}

::google::protobuf::uint8* ControllerConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ControllerConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.ControllerHandle handle = 1;
  if (this->has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_handle(), deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.ControllerConfiguration.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .Kinova.Api.Base.MappingHandle active_mapping_handle = 3;
  if (this->has_active_mapping_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_active_mapping_handle(), deterministic, target);
  }

  // string analog_input_identifier_enum = 4;
  if (this->analog_input_identifier_enum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analog_input_identifier_enum().data(), static_cast<int>(this->analog_input_identifier_enum().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.ControllerConfiguration.analog_input_identifier_enum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->analog_input_identifier_enum(), target);
  }

  // string digital_input_identifier_enum = 5;
  if (this->digital_input_identifier_enum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->digital_input_identifier_enum().data(), static_cast<int>(this->digital_input_identifier_enum().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.ControllerConfiguration.digital_input_identifier_enum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->digital_input_identifier_enum(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ControllerConfiguration)
  return target;
}

size_t ControllerConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ControllerConfiguration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string analog_input_identifier_enum = 4;
  if (this->analog_input_identifier_enum().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->analog_input_identifier_enum());
  }

  // string digital_input_identifier_enum = 5;
  if (this->digital_input_identifier_enum().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->digital_input_identifier_enum());
  }

  // .Kinova.Api.Base.ControllerHandle handle = 1;
  if (this->has_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  // .Kinova.Api.Base.MappingHandle active_mapping_handle = 3;
  if (this->has_active_mapping_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *active_mapping_handle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ControllerConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ControllerConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ControllerConfiguration)
    MergeFrom(*source);
  }
}

void ControllerConfiguration::MergeFrom(const ControllerConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ControllerConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.analog_input_identifier_enum().size() > 0) {

    analog_input_identifier_enum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analog_input_identifier_enum_);
  }
  if (from.digital_input_identifier_enum().size() > 0) {

    digital_input_identifier_enum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.digital_input_identifier_enum_);
  }
  if (from.has_handle()) {
    mutable_handle()->::Kinova::Api::Base::ControllerHandle::MergeFrom(from.handle());
  }
  if (from.has_active_mapping_handle()) {
    mutable_active_mapping_handle()->::Kinova::Api::Base::MappingHandle::MergeFrom(from.active_mapping_handle());
  }
}

void ControllerConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ControllerConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerConfiguration::CopyFrom(const ControllerConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ControllerConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerConfiguration::IsInitialized() const {
  return true;
}

void ControllerConfiguration::Swap(ControllerConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerConfiguration::InternalSwap(ControllerConfiguration* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  analog_input_identifier_enum_.Swap(&other->analog_input_identifier_enum_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  digital_input_identifier_enum_.Swap(&other->digital_input_identifier_enum_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(handle_, other->handle_);
  swap(active_mapping_handle_, other->active_mapping_handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerConfiguration::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControllerConfigurationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerConfigurationList::kControllerConfigurationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerConfigurationList::ControllerConfigurationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ControllerConfigurationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ControllerConfigurationList)
}
ControllerConfigurationList::ControllerConfigurationList(const ControllerConfigurationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      controller_configurations_(from.controller_configurations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ControllerConfigurationList)
}

void ControllerConfigurationList::SharedCtor() {
}

ControllerConfigurationList::~ControllerConfigurationList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ControllerConfigurationList)
  SharedDtor();
}

void ControllerConfigurationList::SharedDtor() {
}

void ControllerConfigurationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerConfigurationList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerConfigurationList& ControllerConfigurationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ControllerConfigurationList.base);
  return *internal_default_instance();
}


void ControllerConfigurationList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ControllerConfigurationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controller_configurations_.Clear();
  _internal_metadata_.Clear();
}

bool ControllerConfigurationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ControllerConfigurationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.ControllerConfiguration controller_configurations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_controller_configurations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ControllerConfigurationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ControllerConfigurationList)
  return false;
#undef DO_
}

void ControllerConfigurationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ControllerConfigurationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.ControllerConfiguration controller_configurations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->controller_configurations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->controller_configurations(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ControllerConfigurationList)
}

::google::protobuf::uint8* ControllerConfigurationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ControllerConfigurationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.ControllerConfiguration controller_configurations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->controller_configurations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->controller_configurations(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ControllerConfigurationList)
  return target;
}

size_t ControllerConfigurationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ControllerConfigurationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.ControllerConfiguration controller_configurations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->controller_configurations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->controller_configurations(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerConfigurationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ControllerConfigurationList)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerConfigurationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerConfigurationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ControllerConfigurationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ControllerConfigurationList)
    MergeFrom(*source);
  }
}

void ControllerConfigurationList::MergeFrom(const ControllerConfigurationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ControllerConfigurationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  controller_configurations_.MergeFrom(from.controller_configurations_);
}

void ControllerConfigurationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ControllerConfigurationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerConfigurationList::CopyFrom(const ControllerConfigurationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ControllerConfigurationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerConfigurationList::IsInitialized() const {
  return true;
}

void ControllerConfigurationList::Swap(ControllerConfigurationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerConfigurationList::InternalSwap(ControllerConfigurationList* other) {
  using std::swap;
  CastToBase(&controller_configurations_)->InternalSwap(CastToBase(&other->controller_configurations_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerConfigurationList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActuatorInformation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActuatorInformation::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActuatorInformation::ActuatorInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ActuatorInformation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ActuatorInformation)
}
ActuatorInformation::ActuatorInformation(const ActuatorInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ActuatorInformation)
}

void ActuatorInformation::SharedCtor() {
  count_ = 0u;
}

ActuatorInformation::~ActuatorInformation() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ActuatorInformation)
  SharedDtor();
}

void ActuatorInformation::SharedDtor() {
}

void ActuatorInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActuatorInformation::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActuatorInformation& ActuatorInformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ActuatorInformation.base);
  return *internal_default_instance();
}


void ActuatorInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ActuatorInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = 0u;
  _internal_metadata_.Clear();
}

bool ActuatorInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ActuatorInformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ActuatorInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ActuatorInformation)
  return false;
#undef DO_
}

void ActuatorInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ActuatorInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ActuatorInformation)
}

::google::protobuf::uint8* ActuatorInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ActuatorInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ActuatorInformation)
  return target;
}

size_t ActuatorInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ActuatorInformation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActuatorInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ActuatorInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const ActuatorInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActuatorInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ActuatorInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ActuatorInformation)
    MergeFrom(*source);
  }
}

void ActuatorInformation::MergeFrom(const ActuatorInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ActuatorInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    set_count(from.count());
  }
}

void ActuatorInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ActuatorInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActuatorInformation::CopyFrom(const ActuatorInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ActuatorInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorInformation::IsInitialized() const {
  return true;
}

void ActuatorInformation::Swap(ActuatorInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActuatorInformation::InternalSwap(ActuatorInformation* other) {
  using std::swap;
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActuatorInformation::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ArmStateInformation::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ArmStateInformation_default_instance_._instance.get_mutable()->connection_ = const_cast< ::Kinova::Api::Common::Connection*>(
      ::Kinova::Api::Common::Connection::internal_default_instance());
}
void ArmStateInformation::clear_connection() {
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArmStateInformation::kActiveStateFieldNumber;
const int ArmStateInformation::kConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArmStateInformation::ArmStateInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ArmStateInformation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ArmStateInformation)
}
ArmStateInformation::ArmStateInformation(const ArmStateInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_connection()) {
    connection_ = new ::Kinova::Api::Common::Connection(*from.connection_);
  } else {
    connection_ = NULL;
  }
  active_state_ = from.active_state_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ArmStateInformation)
}

void ArmStateInformation::SharedCtor() {
  ::memset(&connection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_state_) -
      reinterpret_cast<char*>(&connection_)) + sizeof(active_state_));
}

ArmStateInformation::~ArmStateInformation() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ArmStateInformation)
  SharedDtor();
}

void ArmStateInformation::SharedDtor() {
  if (this != internal_default_instance()) delete connection_;
}

void ArmStateInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ArmStateInformation::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ArmStateInformation& ArmStateInformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ArmStateInformation.base);
  return *internal_default_instance();
}


void ArmStateInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ArmStateInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
  active_state_ = 0;
  _internal_metadata_.Clear();
}

bool ArmStateInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ArmStateInformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Common.ArmState active_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_active_state(static_cast< ::Kinova::Api::Common::ArmState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Connection connection = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ArmStateInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ArmStateInformation)
  return false;
#undef DO_
}

void ArmStateInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ArmStateInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.ArmState active_state = 1;
  if (this->active_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->active_state(), output);
  }

  // .Kinova.Api.Common.Connection connection = 2;
  if (this->has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_connection(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ArmStateInformation)
}

::google::protobuf::uint8* ArmStateInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ArmStateInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.ArmState active_state = 1;
  if (this->active_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->active_state(), target);
  }

  // .Kinova.Api.Common.Connection connection = 2;
  if (this->has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_connection(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ArmStateInformation)
  return target;
}

size_t ArmStateInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ArmStateInformation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Common.Connection connection = 2;
  if (this->has_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *connection_);
  }

  // .Kinova.Api.Common.ArmState active_state = 1;
  if (this->active_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->active_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArmStateInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ArmStateInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const ArmStateInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArmStateInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ArmStateInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ArmStateInformation)
    MergeFrom(*source);
  }
}

void ArmStateInformation::MergeFrom(const ArmStateInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ArmStateInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_connection()) {
    mutable_connection()->::Kinova::Api::Common::Connection::MergeFrom(from.connection());
  }
  if (from.active_state() != 0) {
    set_active_state(from.active_state());
  }
}

void ArmStateInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ArmStateInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmStateInformation::CopyFrom(const ArmStateInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ArmStateInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmStateInformation::IsInitialized() const {
  return true;
}

void ArmStateInformation::Swap(ArmStateInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArmStateInformation::InternalSwap(ArmStateInformation* other) {
  using std::swap;
  swap(connection_, other->connection_);
  swap(active_state_, other->active_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ArmStateInformation::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ArmStateNotification::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_ArmStateNotification_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::Kinova::Api::Common::Timestamp*>(
      ::Kinova::Api::Common::Timestamp::internal_default_instance());
  ::Kinova::Api::Base::_ArmStateNotification_default_instance_._instance.get_mutable()->connection_ = const_cast< ::Kinova::Api::Common::Connection*>(
      ::Kinova::Api::Common::Connection::internal_default_instance());
}
void ArmStateNotification::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
void ArmStateNotification::clear_connection() {
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArmStateNotification::kActiveStateFieldNumber;
const int ArmStateNotification::kTimestampFieldNumber;
const int ArmStateNotification::kConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArmStateNotification::ArmStateNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_ArmStateNotification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.ArmStateNotification)
}
ArmStateNotification::ArmStateNotification(const ArmStateNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::Kinova::Api::Common::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_connection()) {
    connection_ = new ::Kinova::Api::Common::Connection(*from.connection_);
  } else {
    connection_ = NULL;
  }
  active_state_ = from.active_state_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.ArmStateNotification)
}

void ArmStateNotification::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_state_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(active_state_));
}

ArmStateNotification::~ArmStateNotification() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.ArmStateNotification)
  SharedDtor();
}

void ArmStateNotification::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete connection_;
}

void ArmStateNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ArmStateNotification::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ArmStateNotification& ArmStateNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_ArmStateNotification.base);
  return *internal_default_instance();
}


void ArmStateNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.ArmStateNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
  active_state_ = 0;
  _internal_metadata_.Clear();
}

bool ArmStateNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.ArmStateNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Common.ArmState active_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_active_state(static_cast< ::Kinova::Api::Common::ArmState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Timestamp timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Connection connection = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.ArmStateNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.ArmStateNotification)
  return false;
#undef DO_
}

void ArmStateNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.ArmStateNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.ArmState active_state = 1;
  if (this->active_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->active_state(), output);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_timestamp(), output);
  }

  // .Kinova.Api.Common.Connection connection = 3;
  if (this->has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_connection(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.ArmStateNotification)
}

::google::protobuf::uint8* ArmStateNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.ArmStateNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.ArmState active_state = 1;
  if (this->active_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->active_state(), target);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_timestamp(), deterministic, target);
  }

  // .Kinova.Api.Common.Connection connection = 3;
  if (this->has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_connection(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.ArmStateNotification)
  return target;
}

size_t ArmStateNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.ArmStateNotification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Common.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .Kinova.Api.Common.Connection connection = 3;
  if (this->has_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *connection_);
  }

  // .Kinova.Api.Common.ArmState active_state = 1;
  if (this->active_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->active_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArmStateNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.ArmStateNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const ArmStateNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArmStateNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.ArmStateNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.ArmStateNotification)
    MergeFrom(*source);
  }
}

void ArmStateNotification::MergeFrom(const ArmStateNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.ArmStateNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    mutable_timestamp()->::Kinova::Api::Common::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_connection()) {
    mutable_connection()->::Kinova::Api::Common::Connection::MergeFrom(from.connection());
  }
  if (from.active_state() != 0) {
    set_active_state(from.active_state());
  }
}

void ArmStateNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.ArmStateNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmStateNotification::CopyFrom(const ArmStateNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.ArmStateNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmStateNotification::IsInitialized() const {
  return true;
}

void ArmStateNotification::Swap(ArmStateNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArmStateNotification::InternalSwap(ArmStateNotification* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(connection_, other->connection_);
  swap(active_state_, other->active_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ArmStateNotification::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CapSenseConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CapSenseConfig::kIdentifierFieldNumber;
const int CapSenseConfig::kModeFieldNumber;
const int CapSenseConfig::kThresholdAFieldNumber;
const int CapSenseConfig::kThresholdBFieldNumber;
const int CapSenseConfig::kSensitivityAFieldNumber;
const int CapSenseConfig::kSensitivityBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CapSenseConfig::CapSenseConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_CapSenseConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.CapSenseConfig)
}
CapSenseConfig::CapSenseConfig(const CapSenseConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&identifier_, &from.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&sensitivity_b_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(sensitivity_b_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.CapSenseConfig)
}

void CapSenseConfig::SharedCtor() {
  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensitivity_b_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(sensitivity_b_));
}

CapSenseConfig::~CapSenseConfig() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.CapSenseConfig)
  SharedDtor();
}

void CapSenseConfig::SharedDtor() {
}

void CapSenseConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CapSenseConfig::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CapSenseConfig& CapSenseConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_CapSenseConfig.base);
  return *internal_default_instance();
}


void CapSenseConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.CapSenseConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensitivity_b_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(sensitivity_b_));
  _internal_metadata_.Clear();
}

bool CapSenseConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.CapSenseConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.CapSenseMode mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::Kinova::Api::Base::CapSenseMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float threshold_a = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float threshold_b = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sensitivity_a = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sensitivity_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sensitivity_b = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sensitivity_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.CapSenseConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.CapSenseConfig)
  return false;
#undef DO_
}

void CapSenseConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.CapSenseConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->identifier(), output);
  }

  // .Kinova.Api.Base.CapSenseMode mode = 2;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // float threshold_a = 3;
  if (this->threshold_a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->threshold_a(), output);
  }

  // float threshold_b = 4;
  if (this->threshold_b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->threshold_b(), output);
  }

  // float sensitivity_a = 5;
  if (this->sensitivity_a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->sensitivity_a(), output);
  }

  // float sensitivity_b = 6;
  if (this->sensitivity_b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->sensitivity_b(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.CapSenseConfig)
}

::google::protobuf::uint8* CapSenseConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.CapSenseConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->identifier(), target);
  }

  // .Kinova.Api.Base.CapSenseMode mode = 2;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // float threshold_a = 3;
  if (this->threshold_a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->threshold_a(), target);
  }

  // float threshold_b = 4;
  if (this->threshold_b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->threshold_b(), target);
  }

  // float sensitivity_a = 5;
  if (this->sensitivity_a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->sensitivity_a(), target);
  }

  // float sensitivity_b = 6;
  if (this->sensitivity_b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->sensitivity_b(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.CapSenseConfig)
  return target;
}

size_t CapSenseConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.CapSenseConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->identifier());
  }

  // .Kinova.Api.Base.CapSenseMode mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  // float threshold_a = 3;
  if (this->threshold_a() != 0) {
    total_size += 1 + 4;
  }

  // float threshold_b = 4;
  if (this->threshold_b() != 0) {
    total_size += 1 + 4;
  }

  // float sensitivity_a = 5;
  if (this->sensitivity_a() != 0) {
    total_size += 1 + 4;
  }

  // float sensitivity_b = 6;
  if (this->sensitivity_b() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CapSenseConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.CapSenseConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CapSenseConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CapSenseConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.CapSenseConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.CapSenseConfig)
    MergeFrom(*source);
  }
}

void CapSenseConfig::MergeFrom(const CapSenseConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.CapSenseConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.identifier() != 0) {
    set_identifier(from.identifier());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.threshold_a() != 0) {
    set_threshold_a(from.threshold_a());
  }
  if (from.threshold_b() != 0) {
    set_threshold_b(from.threshold_b());
  }
  if (from.sensitivity_a() != 0) {
    set_sensitivity_a(from.sensitivity_a());
  }
  if (from.sensitivity_b() != 0) {
    set_sensitivity_b(from.sensitivity_b());
  }
}

void CapSenseConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.CapSenseConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapSenseConfig::CopyFrom(const CapSenseConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.CapSenseConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapSenseConfig::IsInitialized() const {
  return true;
}

void CapSenseConfig::Swap(CapSenseConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CapSenseConfig::InternalSwap(CapSenseConfig* other) {
  using std::swap;
  swap(identifier_, other->identifier_);
  swap(mode_, other->mode_);
  swap(threshold_a_, other->threshold_a_);
  swap(threshold_b_, other->threshold_b_);
  swap(sensitivity_a_, other->sensitivity_a_);
  swap(sensitivity_b_, other->sensitivity_b_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CapSenseConfig::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BridgeList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BridgeList::kBridgeConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BridgeList::BridgeList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_BridgeList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.BridgeList)
}
BridgeList::BridgeList(const BridgeList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      bridgeconfig_(from.bridgeconfig_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.BridgeList)
}

void BridgeList::SharedCtor() {
}

BridgeList::~BridgeList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.BridgeList)
  SharedDtor();
}

void BridgeList::SharedDtor() {
}

void BridgeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BridgeList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BridgeList& BridgeList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_BridgeList.base);
  return *internal_default_instance();
}


void BridgeList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.BridgeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bridgeconfig_.Clear();
  _internal_metadata_.Clear();
}

bool BridgeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.BridgeList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.BridgeConfig bridgeConfig = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bridgeconfig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.BridgeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.BridgeList)
  return false;
#undef DO_
}

void BridgeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.BridgeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.BridgeConfig bridgeConfig = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bridgeconfig_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->bridgeconfig(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.BridgeList)
}

::google::protobuf::uint8* BridgeList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.BridgeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.BridgeConfig bridgeConfig = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bridgeconfig_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->bridgeconfig(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.BridgeList)
  return target;
}

size_t BridgeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.BridgeList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.BridgeConfig bridgeConfig = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->bridgeconfig_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bridgeconfig(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BridgeList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.BridgeList)
  GOOGLE_DCHECK_NE(&from, this);
  const BridgeList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BridgeList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.BridgeList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.BridgeList)
    MergeFrom(*source);
  }
}

void BridgeList::MergeFrom(const BridgeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.BridgeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bridgeconfig_.MergeFrom(from.bridgeconfig_);
}

void BridgeList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.BridgeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BridgeList::CopyFrom(const BridgeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.BridgeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BridgeList::IsInitialized() const {
  return true;
}

void BridgeList::Swap(BridgeList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BridgeList::InternalSwap(BridgeList* other) {
  using std::swap;
  CastToBase(&bridgeconfig_)->InternalSwap(CastToBase(&other->bridgeconfig_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BridgeList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BridgeResult::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_BridgeResult_default_instance_._instance.get_mutable()->bridge_id_ = const_cast< ::Kinova::Api::Base::BridgeIdentifier*>(
      ::Kinova::Api::Base::BridgeIdentifier::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BridgeResult::kBridgeIdFieldNumber;
const int BridgeResult::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BridgeResult::BridgeResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_BridgeResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.BridgeResult)
}
BridgeResult::BridgeResult(const BridgeResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bridge_id()) {
    bridge_id_ = new ::Kinova::Api::Base::BridgeIdentifier(*from.bridge_id_);
  } else {
    bridge_id_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.BridgeResult)
}

void BridgeResult::SharedCtor() {
  ::memset(&bridge_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&bridge_id_)) + sizeof(status_));
}

BridgeResult::~BridgeResult() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.BridgeResult)
  SharedDtor();
}

void BridgeResult::SharedDtor() {
  if (this != internal_default_instance()) delete bridge_id_;
}

void BridgeResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BridgeResult::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BridgeResult& BridgeResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_BridgeResult.base);
  return *internal_default_instance();
}


void BridgeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.BridgeResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && bridge_id_ != NULL) {
    delete bridge_id_;
  }
  bridge_id_ = NULL;
  status_ = 0;
  _internal_metadata_.Clear();
}

bool BridgeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.BridgeResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.BridgeIdentifier bridge_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bridge_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.BridgeStatus status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::Kinova::Api::Base::BridgeStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.BridgeResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.BridgeResult)
  return false;
#undef DO_
}

void BridgeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.BridgeResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.BridgeIdentifier bridge_id = 1;
  if (this->has_bridge_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_bridge_id(), output);
  }

  // .Kinova.Api.Base.BridgeStatus status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.BridgeResult)
}

::google::protobuf::uint8* BridgeResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.BridgeResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.BridgeIdentifier bridge_id = 1;
  if (this->has_bridge_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_bridge_id(), deterministic, target);
  }

  // .Kinova.Api.Base.BridgeStatus status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.BridgeResult)
  return target;
}

size_t BridgeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.BridgeResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.BridgeIdentifier bridge_id = 1;
  if (this->has_bridge_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bridge_id_);
  }

  // .Kinova.Api.Base.BridgeStatus status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BridgeResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.BridgeResult)
  GOOGLE_DCHECK_NE(&from, this);
  const BridgeResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BridgeResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.BridgeResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.BridgeResult)
    MergeFrom(*source);
  }
}

void BridgeResult::MergeFrom(const BridgeResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.BridgeResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bridge_id()) {
    mutable_bridge_id()->::Kinova::Api::Base::BridgeIdentifier::MergeFrom(from.bridge_id());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void BridgeResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.BridgeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BridgeResult::CopyFrom(const BridgeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.BridgeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BridgeResult::IsInitialized() const {
  return true;
}

void BridgeResult::Swap(BridgeResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BridgeResult::InternalSwap(BridgeResult* other) {
  using std::swap;
  swap(bridge_id_, other->bridge_id_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BridgeResult::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BridgeIdentifier::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BridgeIdentifier::kBridgeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BridgeIdentifier::BridgeIdentifier()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_BridgeIdentifier.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.BridgeIdentifier)
}
BridgeIdentifier::BridgeIdentifier(const BridgeIdentifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bridge_id_ = from.bridge_id_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.BridgeIdentifier)
}

void BridgeIdentifier::SharedCtor() {
  bridge_id_ = 0u;
}

BridgeIdentifier::~BridgeIdentifier() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.BridgeIdentifier)
  SharedDtor();
}

void BridgeIdentifier::SharedDtor() {
}

void BridgeIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BridgeIdentifier::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BridgeIdentifier& BridgeIdentifier::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_BridgeIdentifier.base);
  return *internal_default_instance();
}


void BridgeIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.BridgeIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bridge_id_ = 0u;
  _internal_metadata_.Clear();
}

bool BridgeIdentifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.BridgeIdentifier)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 bridge_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bridge_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.BridgeIdentifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.BridgeIdentifier)
  return false;
#undef DO_
}

void BridgeIdentifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.BridgeIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bridge_id = 1;
  if (this->bridge_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bridge_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.BridgeIdentifier)
}

::google::protobuf::uint8* BridgeIdentifier::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.BridgeIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bridge_id = 1;
  if (this->bridge_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bridge_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.BridgeIdentifier)
  return target;
}

size_t BridgeIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.BridgeIdentifier)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 bridge_id = 1;
  if (this->bridge_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bridge_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BridgeIdentifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.BridgeIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  const BridgeIdentifier* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BridgeIdentifier>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.BridgeIdentifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.BridgeIdentifier)
    MergeFrom(*source);
  }
}

void BridgeIdentifier::MergeFrom(const BridgeIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.BridgeIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bridge_id() != 0) {
    set_bridge_id(from.bridge_id());
  }
}

void BridgeIdentifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.BridgeIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BridgeIdentifier::CopyFrom(const BridgeIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.BridgeIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BridgeIdentifier::IsInitialized() const {
  return true;
}

void BridgeIdentifier::Swap(BridgeIdentifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BridgeIdentifier::InternalSwap(BridgeIdentifier* other) {
  using std::swap;
  swap(bridge_id_, other->bridge_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BridgeIdentifier::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BridgeConfig::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_BridgeConfig_default_instance_._instance.get_mutable()->port_config_ = const_cast< ::Kinova::Api::Base::BridgePortConfig*>(
      ::Kinova::Api::Base::BridgePortConfig::internal_default_instance());
  ::Kinova::Api::Base::_BridgeConfig_default_instance_._instance.get_mutable()->bridge_id_ = const_cast< ::Kinova::Api::Base::BridgeIdentifier*>(
      ::Kinova::Api::Base::BridgeIdentifier::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BridgeConfig::kDeviceIdentifierFieldNumber;
const int BridgeConfig::kBridgetypeFieldNumber;
const int BridgeConfig::kPortConfigFieldNumber;
const int BridgeConfig::kBridgeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BridgeConfig::BridgeConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_BridgeConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.BridgeConfig)
}
BridgeConfig::BridgeConfig(const BridgeConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_port_config()) {
    port_config_ = new ::Kinova::Api::Base::BridgePortConfig(*from.port_config_);
  } else {
    port_config_ = NULL;
  }
  if (from.has_bridge_id()) {
    bridge_id_ = new ::Kinova::Api::Base::BridgeIdentifier(*from.bridge_id_);
  } else {
    bridge_id_ = NULL;
  }
  ::memcpy(&device_identifier_, &from.device_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&bridgetype_) -
    reinterpret_cast<char*>(&device_identifier_)) + sizeof(bridgetype_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.BridgeConfig)
}

void BridgeConfig::SharedCtor() {
  ::memset(&port_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bridgetype_) -
      reinterpret_cast<char*>(&port_config_)) + sizeof(bridgetype_));
}

BridgeConfig::~BridgeConfig() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.BridgeConfig)
  SharedDtor();
}

void BridgeConfig::SharedDtor() {
  if (this != internal_default_instance()) delete port_config_;
  if (this != internal_default_instance()) delete bridge_id_;
}

void BridgeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BridgeConfig::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BridgeConfig& BridgeConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_BridgeConfig.base);
  return *internal_default_instance();
}


void BridgeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.BridgeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && port_config_ != NULL) {
    delete port_config_;
  }
  port_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && bridge_id_ != NULL) {
    delete bridge_id_;
  }
  bridge_id_ = NULL;
  ::memset(&device_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bridgetype_) -
      reinterpret_cast<char*>(&device_identifier_)) + sizeof(bridgetype_));
  _internal_metadata_.Clear();
}

bool BridgeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.BridgeConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 device_identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.BridgeType bridgetype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bridgetype(static_cast< ::Kinova::Api::Base::BridgeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.BridgePortConfig port_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_port_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.BridgeIdentifier bridge_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bridge_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.BridgeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.BridgeConfig)
  return false;
#undef DO_
}

void BridgeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.BridgeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 device_identifier = 1;
  if (this->device_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device_identifier(), output);
  }

  // .Kinova.Api.Base.BridgeType bridgetype = 2;
  if (this->bridgetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->bridgetype(), output);
  }

  // .Kinova.Api.Base.BridgePortConfig port_config = 3;
  if (this->has_port_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_port_config(), output);
  }

  // .Kinova.Api.Base.BridgeIdentifier bridge_id = 4;
  if (this->has_bridge_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_bridge_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.BridgeConfig)
}

::google::protobuf::uint8* BridgeConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.BridgeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 device_identifier = 1;
  if (this->device_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device_identifier(), target);
  }

  // .Kinova.Api.Base.BridgeType bridgetype = 2;
  if (this->bridgetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->bridgetype(), target);
  }

  // .Kinova.Api.Base.BridgePortConfig port_config = 3;
  if (this->has_port_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_port_config(), deterministic, target);
  }

  // .Kinova.Api.Base.BridgeIdentifier bridge_id = 4;
  if (this->has_bridge_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_bridge_id(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.BridgeConfig)
  return target;
}

size_t BridgeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.BridgeConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.BridgePortConfig port_config = 3;
  if (this->has_port_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *port_config_);
  }

  // .Kinova.Api.Base.BridgeIdentifier bridge_id = 4;
  if (this->has_bridge_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bridge_id_);
  }

  // uint32 device_identifier = 1;
  if (this->device_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device_identifier());
  }

  // .Kinova.Api.Base.BridgeType bridgetype = 2;
  if (this->bridgetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bridgetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BridgeConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.BridgeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BridgeConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BridgeConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.BridgeConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.BridgeConfig)
    MergeFrom(*source);
  }
}

void BridgeConfig::MergeFrom(const BridgeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.BridgeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_port_config()) {
    mutable_port_config()->::Kinova::Api::Base::BridgePortConfig::MergeFrom(from.port_config());
  }
  if (from.has_bridge_id()) {
    mutable_bridge_id()->::Kinova::Api::Base::BridgeIdentifier::MergeFrom(from.bridge_id());
  }
  if (from.device_identifier() != 0) {
    set_device_identifier(from.device_identifier());
  }
  if (from.bridgetype() != 0) {
    set_bridgetype(from.bridgetype());
  }
}

void BridgeConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.BridgeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BridgeConfig::CopyFrom(const BridgeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.BridgeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BridgeConfig::IsInitialized() const {
  return true;
}

void BridgeConfig::Swap(BridgeConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BridgeConfig::InternalSwap(BridgeConfig* other) {
  using std::swap;
  swap(port_config_, other->port_config_);
  swap(bridge_id_, other->bridge_id_);
  swap(device_identifier_, other->device_identifier_);
  swap(bridgetype_, other->bridgetype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BridgeConfig::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BridgePortConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BridgePortConfig::kTargetPortFieldNumber;
const int BridgePortConfig::kOutPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BridgePortConfig::BridgePortConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_BridgePortConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.BridgePortConfig)
}
BridgePortConfig::BridgePortConfig(const BridgePortConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_port_, &from.target_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_port_) -
    reinterpret_cast<char*>(&target_port_)) + sizeof(out_port_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.BridgePortConfig)
}

void BridgePortConfig::SharedCtor() {
  ::memset(&target_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_port_) -
      reinterpret_cast<char*>(&target_port_)) + sizeof(out_port_));
}

BridgePortConfig::~BridgePortConfig() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.BridgePortConfig)
  SharedDtor();
}

void BridgePortConfig::SharedDtor() {
}

void BridgePortConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BridgePortConfig::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BridgePortConfig& BridgePortConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_BridgePortConfig.base);
  return *internal_default_instance();
}


void BridgePortConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.BridgePortConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_port_) -
      reinterpret_cast<char*>(&target_port_)) + sizeof(out_port_));
  _internal_metadata_.Clear();
}

bool BridgePortConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.BridgePortConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 target_port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 out_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.BridgePortConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.BridgePortConfig)
  return false;
#undef DO_
}

void BridgePortConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.BridgePortConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_port = 1;
  if (this->target_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_port(), output);
  }

  // uint32 out_port = 2;
  if (this->out_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->out_port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.BridgePortConfig)
}

::google::protobuf::uint8* BridgePortConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.BridgePortConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_port = 1;
  if (this->target_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_port(), target);
  }

  // uint32 out_port = 2;
  if (this->out_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->out_port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.BridgePortConfig)
  return target;
}

size_t BridgePortConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.BridgePortConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 target_port = 1;
  if (this->target_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_port());
  }

  // uint32 out_port = 2;
  if (this->out_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->out_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BridgePortConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.BridgePortConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BridgePortConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BridgePortConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.BridgePortConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.BridgePortConfig)
    MergeFrom(*source);
  }
}

void BridgePortConfig::MergeFrom(const BridgePortConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.BridgePortConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_port() != 0) {
    set_target_port(from.target_port());
  }
  if (from.out_port() != 0) {
    set_out_port(from.out_port());
  }
}

void BridgePortConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.BridgePortConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BridgePortConfig::CopyFrom(const BridgePortConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.BridgePortConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BridgePortConfig::IsInitialized() const {
  return true;
}

void BridgePortConfig::Swap(BridgePortConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BridgePortConfig::InternalSwap(BridgePortConfig* other) {
  using std::swap;
  swap(target_port_, other->target_port_);
  swap(out_port_, other->out_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BridgePortConfig::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PreComputedJointTrajectory::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreComputedJointTrajectory::kModeFieldNumber;
const int PreComputedJointTrajectory::kTrajectoryElementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreComputedJointTrajectory::PreComputedJointTrajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_PreComputedJointTrajectory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.PreComputedJointTrajectory)
}
PreComputedJointTrajectory::PreComputedJointTrajectory(const PreComputedJointTrajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      trajectory_elements_(from.trajectory_elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.PreComputedJointTrajectory)
}

void PreComputedJointTrajectory::SharedCtor() {
  mode_ = 0;
}

PreComputedJointTrajectory::~PreComputedJointTrajectory() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.PreComputedJointTrajectory)
  SharedDtor();
}

void PreComputedJointTrajectory::SharedDtor() {
}

void PreComputedJointTrajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PreComputedJointTrajectory::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PreComputedJointTrajectory& PreComputedJointTrajectory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_PreComputedJointTrajectory.base);
  return *internal_default_instance();
}


void PreComputedJointTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.PreComputedJointTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_elements_.Clear();
  mode_ = 0;
  _internal_metadata_.Clear();
}

bool PreComputedJointTrajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.PreComputedJointTrajectory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.TrajectoryContinuityMode mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::Kinova::Api::Base::TrajectoryContinuityMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Kinova.Api.Base.PreComputedJointTrajectoryElement trajectory_elements = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trajectory_elements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.PreComputedJointTrajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.PreComputedJointTrajectory)
  return false;
#undef DO_
}

void PreComputedJointTrajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.PreComputedJointTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.TrajectoryContinuityMode mode = 1;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // repeated .Kinova.Api.Base.PreComputedJointTrajectoryElement trajectory_elements = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_elements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->trajectory_elements(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.PreComputedJointTrajectory)
}

::google::protobuf::uint8* PreComputedJointTrajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.PreComputedJointTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.TrajectoryContinuityMode mode = 1;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // repeated .Kinova.Api.Base.PreComputedJointTrajectoryElement trajectory_elements = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_elements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->trajectory_elements(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.PreComputedJointTrajectory)
  return target;
}

size_t PreComputedJointTrajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.PreComputedJointTrajectory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.PreComputedJointTrajectoryElement trajectory_elements = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectory_elements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trajectory_elements(static_cast<int>(i)));
    }
  }

  // .Kinova.Api.Base.TrajectoryContinuityMode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreComputedJointTrajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.PreComputedJointTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const PreComputedJointTrajectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PreComputedJointTrajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.PreComputedJointTrajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.PreComputedJointTrajectory)
    MergeFrom(*source);
  }
}

void PreComputedJointTrajectory::MergeFrom(const PreComputedJointTrajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.PreComputedJointTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_elements_.MergeFrom(from.trajectory_elements_);
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void PreComputedJointTrajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.PreComputedJointTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreComputedJointTrajectory::CopyFrom(const PreComputedJointTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.PreComputedJointTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreComputedJointTrajectory::IsInitialized() const {
  return true;
}

void PreComputedJointTrajectory::Swap(PreComputedJointTrajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreComputedJointTrajectory::InternalSwap(PreComputedJointTrajectory* other) {
  using std::swap;
  CastToBase(&trajectory_elements_)->InternalSwap(CastToBase(&other->trajectory_elements_));
  swap(mode_, other->mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PreComputedJointTrajectory::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PreComputedJointTrajectoryElement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreComputedJointTrajectoryElement::kJointAnglesFieldNumber;
const int PreComputedJointTrajectoryElement::kJointSpeedsFieldNumber;
const int PreComputedJointTrajectoryElement::kJointAccelerationsFieldNumber;
const int PreComputedJointTrajectoryElement::kTimeFromStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreComputedJointTrajectoryElement::PreComputedJointTrajectoryElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_PreComputedJointTrajectoryElement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.PreComputedJointTrajectoryElement)
}
PreComputedJointTrajectoryElement::PreComputedJointTrajectoryElement(const PreComputedJointTrajectoryElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      joint_angles_(from.joint_angles_),
      joint_speeds_(from.joint_speeds_),
      joint_accelerations_(from.joint_accelerations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_from_start_ = from.time_from_start_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.PreComputedJointTrajectoryElement)
}

void PreComputedJointTrajectoryElement::SharedCtor() {
  time_from_start_ = 0;
}

PreComputedJointTrajectoryElement::~PreComputedJointTrajectoryElement() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.PreComputedJointTrajectoryElement)
  SharedDtor();
}

void PreComputedJointTrajectoryElement::SharedDtor() {
}

void PreComputedJointTrajectoryElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PreComputedJointTrajectoryElement::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PreComputedJointTrajectoryElement& PreComputedJointTrajectoryElement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_PreComputedJointTrajectoryElement.base);
  return *internal_default_instance();
}


void PreComputedJointTrajectoryElement::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.PreComputedJointTrajectoryElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joint_angles_.Clear();
  joint_speeds_.Clear();
  joint_accelerations_.Clear();
  time_from_start_ = 0;
  _internal_metadata_.Clear();
}

bool PreComputedJointTrajectoryElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.PreComputedJointTrajectoryElement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float joint_angles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_joint_angles())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_joint_angles())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float joint_speeds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_joint_speeds())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_joint_speeds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float joint_accelerations = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_joint_accelerations())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_joint_accelerations())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time_from_start = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_from_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.PreComputedJointTrajectoryElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.PreComputedJointTrajectoryElement)
  return false;
#undef DO_
}

void PreComputedJointTrajectoryElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.PreComputedJointTrajectoryElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float joint_angles = 1;
  if (this->joint_angles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _joint_angles_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->joint_angles().data(), this->joint_angles_size(), output);
  }

  // repeated float joint_speeds = 2;
  if (this->joint_speeds_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _joint_speeds_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->joint_speeds().data(), this->joint_speeds_size(), output);
  }

  // repeated float joint_accelerations = 3;
  if (this->joint_accelerations_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _joint_accelerations_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->joint_accelerations().data(), this->joint_accelerations_size(), output);
  }

  // float time_from_start = 4;
  if (this->time_from_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->time_from_start(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.PreComputedJointTrajectoryElement)
}

::google::protobuf::uint8* PreComputedJointTrajectoryElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.PreComputedJointTrajectoryElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float joint_angles = 1;
  if (this->joint_angles_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _joint_angles_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->joint_angles_, target);
  }

  // repeated float joint_speeds = 2;
  if (this->joint_speeds_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _joint_speeds_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->joint_speeds_, target);
  }

  // repeated float joint_accelerations = 3;
  if (this->joint_accelerations_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _joint_accelerations_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->joint_accelerations_, target);
  }

  // float time_from_start = 4;
  if (this->time_from_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->time_from_start(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.PreComputedJointTrajectoryElement)
  return target;
}

size_t PreComputedJointTrajectoryElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.PreComputedJointTrajectoryElement)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float joint_angles = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->joint_angles_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _joint_angles_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float joint_speeds = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->joint_speeds_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _joint_speeds_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float joint_accelerations = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->joint_accelerations_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _joint_accelerations_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // float time_from_start = 4;
  if (this->time_from_start() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreComputedJointTrajectoryElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.PreComputedJointTrajectoryElement)
  GOOGLE_DCHECK_NE(&from, this);
  const PreComputedJointTrajectoryElement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PreComputedJointTrajectoryElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.PreComputedJointTrajectoryElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.PreComputedJointTrajectoryElement)
    MergeFrom(*source);
  }
}

void PreComputedJointTrajectoryElement::MergeFrom(const PreComputedJointTrajectoryElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.PreComputedJointTrajectoryElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joint_angles_.MergeFrom(from.joint_angles_);
  joint_speeds_.MergeFrom(from.joint_speeds_);
  joint_accelerations_.MergeFrom(from.joint_accelerations_);
  if (from.time_from_start() != 0) {
    set_time_from_start(from.time_from_start());
  }
}

void PreComputedJointTrajectoryElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.PreComputedJointTrajectoryElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreComputedJointTrajectoryElement::CopyFrom(const PreComputedJointTrajectoryElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.PreComputedJointTrajectoryElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreComputedJointTrajectoryElement::IsInitialized() const {
  return true;
}

void PreComputedJointTrajectoryElement::Swap(PreComputedJointTrajectoryElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreComputedJointTrajectoryElement::InternalSwap(PreComputedJointTrajectoryElement* other) {
  using std::swap;
  joint_angles_.InternalSwap(&other->joint_angles_);
  joint_speeds_.InternalSwap(&other->joint_speeds_);
  joint_accelerations_.InternalSwap(&other->joint_accelerations_);
  swap(time_from_start_, other->time_from_start_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PreComputedJointTrajectoryElement::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrajectoryErrorElement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryErrorElement::kErrorTypeFieldNumber;
const int TrajectoryErrorElement::kErrorIdentifierFieldNumber;
const int TrajectoryErrorElement::kErrorValueFieldNumber;
const int TrajectoryErrorElement::kMinValueFieldNumber;
const int TrajectoryErrorElement::kMaxValueFieldNumber;
const int TrajectoryErrorElement::kIndexFieldNumber;
const int TrajectoryErrorElement::kMessageFieldNumber;
const int TrajectoryErrorElement::kWaypointIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryErrorElement::TrajectoryErrorElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_TrajectoryErrorElement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.TrajectoryErrorElement)
}
TrajectoryErrorElement::TrajectoryErrorElement(const TrajectoryErrorElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&error_type_, &from.error_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&waypoint_index_) -
    reinterpret_cast<char*>(&error_type_)) + sizeof(waypoint_index_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.TrajectoryErrorElement)
}

void TrajectoryErrorElement::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&waypoint_index_) -
      reinterpret_cast<char*>(&error_type_)) + sizeof(waypoint_index_));
}

TrajectoryErrorElement::~TrajectoryErrorElement() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.TrajectoryErrorElement)
  SharedDtor();
}

void TrajectoryErrorElement::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrajectoryErrorElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrajectoryErrorElement::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryErrorElement& TrajectoryErrorElement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_TrajectoryErrorElement.base);
  return *internal_default_instance();
}


void TrajectoryErrorElement::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.TrajectoryErrorElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&waypoint_index_) -
      reinterpret_cast<char*>(&error_type_)) + sizeof(waypoint_index_));
  _internal_metadata_.Clear();
}

bool TrajectoryErrorElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.TrajectoryErrorElement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.TrajectoryErrorType error_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_type(static_cast< ::Kinova::Api::Base::TrajectoryErrorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.TrajectoryErrorIdentifier error_identifier = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_identifier(static_cast< ::Kinova::Api::Base::TrajectoryErrorIdentifier >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float error_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &error_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.TrajectoryErrorElement.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 waypoint_index = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &waypoint_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.TrajectoryErrorElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.TrajectoryErrorElement)
  return false;
#undef DO_
}

void TrajectoryErrorElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.TrajectoryErrorElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.TrajectoryErrorType error_type = 1;
  if (this->error_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_type(), output);
  }

  // .Kinova.Api.Base.TrajectoryErrorIdentifier error_identifier = 2 [deprecated = true];
  if (this->error_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_identifier(), output);
  }

  // float error_value = 3;
  if (this->error_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->error_value(), output);
  }

  // float min_value = 4;
  if (this->min_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->min_value(), output);
  }

  // float max_value = 5;
  if (this->max_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_value(), output);
  }

  // uint32 index = 6;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->index(), output);
  }

  // string message = 7;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.TrajectoryErrorElement.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->message(), output);
  }

  // uint32 waypoint_index = 8;
  if (this->waypoint_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->waypoint_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.TrajectoryErrorElement)
}

::google::protobuf::uint8* TrajectoryErrorElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.TrajectoryErrorElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.TrajectoryErrorType error_type = 1;
  if (this->error_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_type(), target);
  }

  // .Kinova.Api.Base.TrajectoryErrorIdentifier error_identifier = 2 [deprecated = true];
  if (this->error_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error_identifier(), target);
  }

  // float error_value = 3;
  if (this->error_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->error_value(), target);
  }

  // float min_value = 4;
  if (this->min_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->min_value(), target);
  }

  // float max_value = 5;
  if (this->max_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_value(), target);
  }

  // uint32 index = 6;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->index(), target);
  }

  // string message = 7;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.TrajectoryErrorElement.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->message(), target);
  }

  // uint32 waypoint_index = 8;
  if (this->waypoint_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->waypoint_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.TrajectoryErrorElement)
  return target;
}

size_t TrajectoryErrorElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.TrajectoryErrorElement)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 7;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .Kinova.Api.Base.TrajectoryErrorType error_type = 1;
  if (this->error_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_type());
  }

  // .Kinova.Api.Base.TrajectoryErrorIdentifier error_identifier = 2 [deprecated = true];
  if (this->error_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_identifier());
  }

  // float error_value = 3;
  if (this->error_value() != 0) {
    total_size += 1 + 4;
  }

  // float min_value = 4;
  if (this->min_value() != 0) {
    total_size += 1 + 4;
  }

  // float max_value = 5;
  if (this->max_value() != 0) {
    total_size += 1 + 4;
  }

  // uint32 index = 6;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  // uint32 waypoint_index = 8;
  if (this->waypoint_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->waypoint_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryErrorElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.TrajectoryErrorElement)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryErrorElement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryErrorElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.TrajectoryErrorElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.TrajectoryErrorElement)
    MergeFrom(*source);
  }
}

void TrajectoryErrorElement::MergeFrom(const TrajectoryErrorElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.TrajectoryErrorElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.error_type() != 0) {
    set_error_type(from.error_type());
  }
  if (from.error_identifier() != 0) {
    set_error_identifier(from.error_identifier());
  }
  if (from.error_value() != 0) {
    set_error_value(from.error_value());
  }
  if (from.min_value() != 0) {
    set_min_value(from.min_value());
  }
  if (from.max_value() != 0) {
    set_max_value(from.max_value());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.waypoint_index() != 0) {
    set_waypoint_index(from.waypoint_index());
  }
}

void TrajectoryErrorElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.TrajectoryErrorElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryErrorElement::CopyFrom(const TrajectoryErrorElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.TrajectoryErrorElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryErrorElement::IsInitialized() const {
  return true;
}

void TrajectoryErrorElement::Swap(TrajectoryErrorElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryErrorElement::InternalSwap(TrajectoryErrorElement* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_type_, other->error_type_);
  swap(error_identifier_, other->error_identifier_);
  swap(error_value_, other->error_value_);
  swap(min_value_, other->min_value_);
  swap(max_value_, other->max_value_);
  swap(index_, other->index_);
  swap(waypoint_index_, other->waypoint_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrajectoryErrorElement::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrajectoryErrorReport::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryErrorReport::kTrajectoryErrorElementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryErrorReport::TrajectoryErrorReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_TrajectoryErrorReport.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.TrajectoryErrorReport)
}
TrajectoryErrorReport::TrajectoryErrorReport(const TrajectoryErrorReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      trajectory_error_elements_(from.trajectory_error_elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.TrajectoryErrorReport)
}

void TrajectoryErrorReport::SharedCtor() {
}

TrajectoryErrorReport::~TrajectoryErrorReport() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.TrajectoryErrorReport)
  SharedDtor();
}

void TrajectoryErrorReport::SharedDtor() {
}

void TrajectoryErrorReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrajectoryErrorReport::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryErrorReport& TrajectoryErrorReport::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_TrajectoryErrorReport.base);
  return *internal_default_instance();
}


void TrajectoryErrorReport::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.TrajectoryErrorReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_error_elements_.Clear();
  _internal_metadata_.Clear();
}

bool TrajectoryErrorReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.TrajectoryErrorReport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.TrajectoryErrorElement trajectory_error_elements = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trajectory_error_elements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.TrajectoryErrorReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.TrajectoryErrorReport)
  return false;
#undef DO_
}

void TrajectoryErrorReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.TrajectoryErrorReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.TrajectoryErrorElement trajectory_error_elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_error_elements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->trajectory_error_elements(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.TrajectoryErrorReport)
}

::google::protobuf::uint8* TrajectoryErrorReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.TrajectoryErrorReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.TrajectoryErrorElement trajectory_error_elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_error_elements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->trajectory_error_elements(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.TrajectoryErrorReport)
  return target;
}

size_t TrajectoryErrorReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.TrajectoryErrorReport)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.TrajectoryErrorElement trajectory_error_elements = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectory_error_elements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trajectory_error_elements(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryErrorReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.TrajectoryErrorReport)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryErrorReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryErrorReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.TrajectoryErrorReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.TrajectoryErrorReport)
    MergeFrom(*source);
  }
}

void TrajectoryErrorReport::MergeFrom(const TrajectoryErrorReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.TrajectoryErrorReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_error_elements_.MergeFrom(from.trajectory_error_elements_);
}

void TrajectoryErrorReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.TrajectoryErrorReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryErrorReport::CopyFrom(const TrajectoryErrorReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.TrajectoryErrorReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryErrorReport::IsInitialized() const {
  return true;
}

void TrajectoryErrorReport::Swap(TrajectoryErrorReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryErrorReport::InternalSwap(TrajectoryErrorReport* other) {
  using std::swap;
  CastToBase(&trajectory_error_elements_)->InternalSwap(CastToBase(&other->trajectory_error_elements_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrajectoryErrorReport::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WaypointValidationReport::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_WaypointValidationReport_default_instance_._instance.get_mutable()->trajectory_error_report_ = const_cast< ::Kinova::Api::Base::TrajectoryErrorReport*>(
      ::Kinova::Api::Base::TrajectoryErrorReport::internal_default_instance());
  ::Kinova::Api::Base::_WaypointValidationReport_default_instance_._instance.get_mutable()->optimal_waypoint_list_ = const_cast< ::Kinova::Api::Base::WaypointList*>(
      ::Kinova::Api::Base::WaypointList::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WaypointValidationReport::kTrajectoryErrorReportFieldNumber;
const int WaypointValidationReport::kOptimalWaypointListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaypointValidationReport::WaypointValidationReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_WaypointValidationReport.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.WaypointValidationReport)
}
WaypointValidationReport::WaypointValidationReport(const WaypointValidationReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trajectory_error_report()) {
    trajectory_error_report_ = new ::Kinova::Api::Base::TrajectoryErrorReport(*from.trajectory_error_report_);
  } else {
    trajectory_error_report_ = NULL;
  }
  if (from.has_optimal_waypoint_list()) {
    optimal_waypoint_list_ = new ::Kinova::Api::Base::WaypointList(*from.optimal_waypoint_list_);
  } else {
    optimal_waypoint_list_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.WaypointValidationReport)
}

void WaypointValidationReport::SharedCtor() {
  ::memset(&trajectory_error_report_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optimal_waypoint_list_) -
      reinterpret_cast<char*>(&trajectory_error_report_)) + sizeof(optimal_waypoint_list_));
}

WaypointValidationReport::~WaypointValidationReport() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.WaypointValidationReport)
  SharedDtor();
}

void WaypointValidationReport::SharedDtor() {
  if (this != internal_default_instance()) delete trajectory_error_report_;
  if (this != internal_default_instance()) delete optimal_waypoint_list_;
}

void WaypointValidationReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WaypointValidationReport::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WaypointValidationReport& WaypointValidationReport::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_WaypointValidationReport.base);
  return *internal_default_instance();
}


void WaypointValidationReport::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.WaypointValidationReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && trajectory_error_report_ != NULL) {
    delete trajectory_error_report_;
  }
  trajectory_error_report_ = NULL;
  if (GetArenaNoVirtual() == NULL && optimal_waypoint_list_ != NULL) {
    delete optimal_waypoint_list_;
  }
  optimal_waypoint_list_ = NULL;
  _internal_metadata_.Clear();
}

bool WaypointValidationReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.WaypointValidationReport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.TrajectoryErrorReport trajectory_error_report = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory_error_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.WaypointList optimal_waypoint_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_optimal_waypoint_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.WaypointValidationReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.WaypointValidationReport)
  return false;
#undef DO_
}

void WaypointValidationReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.WaypointValidationReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.TrajectoryErrorReport trajectory_error_report = 1;
  if (this->has_trajectory_error_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_trajectory_error_report(), output);
  }

  // .Kinova.Api.Base.WaypointList optimal_waypoint_list = 2;
  if (this->has_optimal_waypoint_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_optimal_waypoint_list(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.WaypointValidationReport)
}

::google::protobuf::uint8* WaypointValidationReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.WaypointValidationReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.TrajectoryErrorReport trajectory_error_report = 1;
  if (this->has_trajectory_error_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_trajectory_error_report(), deterministic, target);
  }

  // .Kinova.Api.Base.WaypointList optimal_waypoint_list = 2;
  if (this->has_optimal_waypoint_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_optimal_waypoint_list(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.WaypointValidationReport)
  return target;
}

size_t WaypointValidationReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.WaypointValidationReport)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.TrajectoryErrorReport trajectory_error_report = 1;
  if (this->has_trajectory_error_report()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trajectory_error_report_);
  }

  // .Kinova.Api.Base.WaypointList optimal_waypoint_list = 2;
  if (this->has_optimal_waypoint_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *optimal_waypoint_list_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaypointValidationReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.WaypointValidationReport)
  GOOGLE_DCHECK_NE(&from, this);
  const WaypointValidationReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WaypointValidationReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.WaypointValidationReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.WaypointValidationReport)
    MergeFrom(*source);
  }
}

void WaypointValidationReport::MergeFrom(const WaypointValidationReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.WaypointValidationReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trajectory_error_report()) {
    mutable_trajectory_error_report()->::Kinova::Api::Base::TrajectoryErrorReport::MergeFrom(from.trajectory_error_report());
  }
  if (from.has_optimal_waypoint_list()) {
    mutable_optimal_waypoint_list()->::Kinova::Api::Base::WaypointList::MergeFrom(from.optimal_waypoint_list());
  }
}

void WaypointValidationReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.WaypointValidationReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaypointValidationReport::CopyFrom(const WaypointValidationReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.WaypointValidationReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaypointValidationReport::IsInitialized() const {
  return true;
}

void WaypointValidationReport::Swap(WaypointValidationReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaypointValidationReport::InternalSwap(WaypointValidationReport* other) {
  using std::swap;
  swap(trajectory_error_report_, other->trajectory_error_report_);
  swap(optimal_waypoint_list_, other->optimal_waypoint_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WaypointValidationReport::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Waypoint::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_Waypoint_default_instance_.angular_waypoint_ = const_cast< ::Kinova::Api::Base::AngularWaypoint*>(
      ::Kinova::Api::Base::AngularWaypoint::internal_default_instance());
  ::Kinova::Api::Base::_Waypoint_default_instance_.cartesian_waypoint_ = const_cast< ::Kinova::Api::Base::CartesianWaypoint*>(
      ::Kinova::Api::Base::CartesianWaypoint::internal_default_instance());
}
void Waypoint::set_allocated_angular_waypoint(::Kinova::Api::Base::AngularWaypoint* angular_waypoint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type_of_waypoint();
  if (angular_waypoint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      angular_waypoint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, angular_waypoint, submessage_arena);
    }
    set_has_angular_waypoint();
    type_of_waypoint_.angular_waypoint_ = angular_waypoint;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Waypoint.angular_waypoint)
}
void Waypoint::set_allocated_cartesian_waypoint(::Kinova::Api::Base::CartesianWaypoint* cartesian_waypoint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type_of_waypoint();
  if (cartesian_waypoint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cartesian_waypoint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cartesian_waypoint, submessage_arena);
    }
    set_has_cartesian_waypoint();
    type_of_waypoint_.cartesian_waypoint_ = cartesian_waypoint;
  }
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.Base.Waypoint.cartesian_waypoint)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Waypoint::kNameFieldNumber;
const int Waypoint::kAngularWaypointFieldNumber;
const int Waypoint::kCartesianWaypointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Waypoint::Waypoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_Waypoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.Waypoint)
}
Waypoint::Waypoint(const Waypoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  clear_has_type_of_waypoint();
  switch (from.type_of_waypoint_case()) {
    case kAngularWaypoint: {
      mutable_angular_waypoint()->::Kinova::Api::Base::AngularWaypoint::MergeFrom(from.angular_waypoint());
      break;
    }
    case kCartesianWaypoint: {
      mutable_cartesian_waypoint()->::Kinova::Api::Base::CartesianWaypoint::MergeFrom(from.cartesian_waypoint());
      break;
    }
    case TYPE_OF_WAYPOINT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.Waypoint)
}

void Waypoint::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type_of_waypoint();
}

Waypoint::~Waypoint() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.Waypoint)
  SharedDtor();
}

void Waypoint::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_type_of_waypoint()) {
    clear_type_of_waypoint();
  }
}

void Waypoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Waypoint::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Waypoint& Waypoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_Waypoint.base);
  return *internal_default_instance();
}


void Waypoint::clear_type_of_waypoint() {
// @@protoc_insertion_point(one_of_clear_start:Kinova.Api.Base.Waypoint)
  switch (type_of_waypoint_case()) {
    case kAngularWaypoint: {
      delete type_of_waypoint_.angular_waypoint_;
      break;
    }
    case kCartesianWaypoint: {
      delete type_of_waypoint_.cartesian_waypoint_;
      break;
    }
    case TYPE_OF_WAYPOINT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_OF_WAYPOINT_NOT_SET;
}


void Waypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.Waypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_type_of_waypoint();
  _internal_metadata_.Clear();
}

bool Waypoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.Waypoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.Waypoint.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.AngularWaypoint angular_waypoint = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_waypoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.CartesianWaypoint cartesian_waypoint = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cartesian_waypoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.Waypoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.Waypoint)
  return false;
#undef DO_
}

void Waypoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.Waypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.Waypoint.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .Kinova.Api.Base.AngularWaypoint angular_waypoint = 2;
  if (has_angular_waypoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_angular_waypoint(), output);
  }

  // .Kinova.Api.Base.CartesianWaypoint cartesian_waypoint = 3;
  if (has_cartesian_waypoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_cartesian_waypoint(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.Waypoint)
}

::google::protobuf::uint8* Waypoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.Waypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.Waypoint.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .Kinova.Api.Base.AngularWaypoint angular_waypoint = 2;
  if (has_angular_waypoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_angular_waypoint(), deterministic, target);
  }

  // .Kinova.Api.Base.CartesianWaypoint cartesian_waypoint = 3;
  if (has_cartesian_waypoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_cartesian_waypoint(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.Waypoint)
  return target;
}

size_t Waypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.Waypoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  switch (type_of_waypoint_case()) {
    // .Kinova.Api.Base.AngularWaypoint angular_waypoint = 2;
    case kAngularWaypoint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_of_waypoint_.angular_waypoint_);
      break;
    }
    // .Kinova.Api.Base.CartesianWaypoint cartesian_waypoint = 3;
    case kCartesianWaypoint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_of_waypoint_.cartesian_waypoint_);
      break;
    }
    case TYPE_OF_WAYPOINT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Waypoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.Waypoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Waypoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Waypoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.Waypoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.Waypoint)
    MergeFrom(*source);
  }
}

void Waypoint::MergeFrom(const Waypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.Waypoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  switch (from.type_of_waypoint_case()) {
    case kAngularWaypoint: {
      mutable_angular_waypoint()->::Kinova::Api::Base::AngularWaypoint::MergeFrom(from.angular_waypoint());
      break;
    }
    case kCartesianWaypoint: {
      mutable_cartesian_waypoint()->::Kinova::Api::Base::CartesianWaypoint::MergeFrom(from.cartesian_waypoint());
      break;
    }
    case TYPE_OF_WAYPOINT_NOT_SET: {
      break;
    }
  }
}

void Waypoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.Waypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Waypoint::CopyFrom(const Waypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.Waypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Waypoint::IsInitialized() const {
  return true;
}

void Waypoint::Swap(Waypoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Waypoint::InternalSwap(Waypoint* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_of_waypoint_, other->type_of_waypoint_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Waypoint::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AngularWaypoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AngularWaypoint::kAnglesFieldNumber;
const int AngularWaypoint::kMaximumVelocitiesFieldNumber;
const int AngularWaypoint::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AngularWaypoint::AngularWaypoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_AngularWaypoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.AngularWaypoint)
}
AngularWaypoint::AngularWaypoint(const AngularWaypoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      angles_(from.angles_),
      maximum_velocities_(from.maximum_velocities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.AngularWaypoint)
}

void AngularWaypoint::SharedCtor() {
  duration_ = 0;
}

AngularWaypoint::~AngularWaypoint() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.AngularWaypoint)
  SharedDtor();
}

void AngularWaypoint::SharedDtor() {
}

void AngularWaypoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AngularWaypoint::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AngularWaypoint& AngularWaypoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_AngularWaypoint.base);
  return *internal_default_instance();
}


void AngularWaypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.AngularWaypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  angles_.Clear();
  maximum_velocities_.Clear();
  duration_ = 0;
  _internal_metadata_.Clear();
}

bool AngularWaypoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.AngularWaypoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float angles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_angles())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_angles())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float maximum_velocities = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_maximum_velocities())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_maximum_velocities())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.AngularWaypoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.AngularWaypoint)
  return false;
#undef DO_
}

void AngularWaypoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.AngularWaypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float angles = 1;
  if (this->angles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _angles_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->angles().data(), this->angles_size(), output);
  }

  // repeated float maximum_velocities = 2;
  if (this->maximum_velocities_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _maximum_velocities_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->maximum_velocities().data(), this->maximum_velocities_size(), output);
  }

  // float duration = 3;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.AngularWaypoint)
}

::google::protobuf::uint8* AngularWaypoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.AngularWaypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float angles = 1;
  if (this->angles_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _angles_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->angles_, target);
  }

  // repeated float maximum_velocities = 2;
  if (this->maximum_velocities_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _maximum_velocities_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->maximum_velocities_, target);
  }

  // float duration = 3;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->duration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.AngularWaypoint)
  return target;
}

size_t AngularWaypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.AngularWaypoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float angles = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->angles_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _angles_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float maximum_velocities = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->maximum_velocities_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _maximum_velocities_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // float duration = 3;
  if (this->duration() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AngularWaypoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.AngularWaypoint)
  GOOGLE_DCHECK_NE(&from, this);
  const AngularWaypoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AngularWaypoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.AngularWaypoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.AngularWaypoint)
    MergeFrom(*source);
  }
}

void AngularWaypoint::MergeFrom(const AngularWaypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.AngularWaypoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  angles_.MergeFrom(from.angles_);
  maximum_velocities_.MergeFrom(from.maximum_velocities_);
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void AngularWaypoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.AngularWaypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AngularWaypoint::CopyFrom(const AngularWaypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.AngularWaypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngularWaypoint::IsInitialized() const {
  return true;
}

void AngularWaypoint::Swap(AngularWaypoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AngularWaypoint::InternalSwap(AngularWaypoint* other) {
  using std::swap;
  angles_.InternalSwap(&other->angles_);
  maximum_velocities_.InternalSwap(&other->maximum_velocities_);
  swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AngularWaypoint::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CartesianWaypoint::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_CartesianWaypoint_default_instance_._instance.get_mutable()->pose_ = const_cast< ::Kinova::Api::Base::Pose*>(
      ::Kinova::Api::Base::Pose::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CartesianWaypoint::kPoseFieldNumber;
const int CartesianWaypoint::kReferenceFrameFieldNumber;
const int CartesianWaypoint::kMaximumLinearVelocityFieldNumber;
const int CartesianWaypoint::kMaximumAngularVelocityFieldNumber;
const int CartesianWaypoint::kBlendingRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CartesianWaypoint::CartesianWaypoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_CartesianWaypoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.CartesianWaypoint)
}
CartesianWaypoint::CartesianWaypoint(const CartesianWaypoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::Kinova::Api::Base::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  ::memcpy(&reference_frame_, &from.reference_frame_,
    static_cast<size_t>(reinterpret_cast<char*>(&blending_radius_) -
    reinterpret_cast<char*>(&reference_frame_)) + sizeof(blending_radius_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.CartesianWaypoint)
}

void CartesianWaypoint::SharedCtor() {
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blending_radius_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(blending_radius_));
}

CartesianWaypoint::~CartesianWaypoint() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.CartesianWaypoint)
  SharedDtor();
}

void CartesianWaypoint::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void CartesianWaypoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CartesianWaypoint::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CartesianWaypoint& CartesianWaypoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_CartesianWaypoint.base);
  return *internal_default_instance();
}


void CartesianWaypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.CartesianWaypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  ::memset(&reference_frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blending_radius_) -
      reinterpret_cast<char*>(&reference_frame_)) + sizeof(blending_radius_));
  _internal_metadata_.Clear();
}

bool CartesianWaypoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.CartesianWaypoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.Pose pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.CartesianReferenceFrame reference_frame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reference_frame(static_cast< ::Kinova::Api::Common::CartesianReferenceFrame >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float maximum_linear_velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maximum_linear_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float maximum_angular_velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maximum_angular_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float blending_radius = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blending_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.CartesianWaypoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.CartesianWaypoint)
  return false;
#undef DO_
}

void CartesianWaypoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.CartesianWaypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.Pose pose = 1;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pose(), output);
  }

  // .Kinova.Api.Common.CartesianReferenceFrame reference_frame = 2;
  if (this->reference_frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reference_frame(), output);
  }

  // float maximum_linear_velocity = 3;
  if (this->maximum_linear_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->maximum_linear_velocity(), output);
  }

  // float maximum_angular_velocity = 4;
  if (this->maximum_angular_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->maximum_angular_velocity(), output);
  }

  // float blending_radius = 5;
  if (this->blending_radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->blending_radius(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.CartesianWaypoint)
}

::google::protobuf::uint8* CartesianWaypoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.CartesianWaypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.Pose pose = 1;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pose(), deterministic, target);
  }

  // .Kinova.Api.Common.CartesianReferenceFrame reference_frame = 2;
  if (this->reference_frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reference_frame(), target);
  }

  // float maximum_linear_velocity = 3;
  if (this->maximum_linear_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->maximum_linear_velocity(), target);
  }

  // float maximum_angular_velocity = 4;
  if (this->maximum_angular_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->maximum_angular_velocity(), target);
  }

  // float blending_radius = 5;
  if (this->blending_radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->blending_radius(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.CartesianWaypoint)
  return target;
}

size_t CartesianWaypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.CartesianWaypoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.Pose pose = 1;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .Kinova.Api.Common.CartesianReferenceFrame reference_frame = 2;
  if (this->reference_frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reference_frame());
  }

  // float maximum_linear_velocity = 3;
  if (this->maximum_linear_velocity() != 0) {
    total_size += 1 + 4;
  }

  // float maximum_angular_velocity = 4;
  if (this->maximum_angular_velocity() != 0) {
    total_size += 1 + 4;
  }

  // float blending_radius = 5;
  if (this->blending_radius() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CartesianWaypoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.CartesianWaypoint)
  GOOGLE_DCHECK_NE(&from, this);
  const CartesianWaypoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CartesianWaypoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.CartesianWaypoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.CartesianWaypoint)
    MergeFrom(*source);
  }
}

void CartesianWaypoint::MergeFrom(const CartesianWaypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.CartesianWaypoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    mutable_pose()->::Kinova::Api::Base::Pose::MergeFrom(from.pose());
  }
  if (from.reference_frame() != 0) {
    set_reference_frame(from.reference_frame());
  }
  if (from.maximum_linear_velocity() != 0) {
    set_maximum_linear_velocity(from.maximum_linear_velocity());
  }
  if (from.maximum_angular_velocity() != 0) {
    set_maximum_angular_velocity(from.maximum_angular_velocity());
  }
  if (from.blending_radius() != 0) {
    set_blending_radius(from.blending_radius());
  }
}

void CartesianWaypoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.CartesianWaypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CartesianWaypoint::CopyFrom(const CartesianWaypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.CartesianWaypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartesianWaypoint::IsInitialized() const {
  return true;
}

void CartesianWaypoint::Swap(CartesianWaypoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CartesianWaypoint::InternalSwap(CartesianWaypoint* other) {
  using std::swap;
  swap(pose_, other->pose_);
  swap(reference_frame_, other->reference_frame_);
  swap(maximum_linear_velocity_, other->maximum_linear_velocity_);
  swap(maximum_angular_velocity_, other->maximum_angular_velocity_);
  swap(blending_radius_, other->blending_radius_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CartesianWaypoint::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WaypointList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WaypointList::kWaypointsFieldNumber;
const int WaypointList::kDurationFieldNumber;
const int WaypointList::kUseOptimalBlendingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaypointList::WaypointList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_WaypointList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.WaypointList)
}
WaypointList::WaypointList(const WaypointList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      waypoints_(from.waypoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_optimal_blending_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(use_optimal_blending_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.WaypointList)
}

void WaypointList::SharedCtor() {
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_optimal_blending_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(use_optimal_blending_));
}

WaypointList::~WaypointList() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.WaypointList)
  SharedDtor();
}

void WaypointList::SharedDtor() {
}

void WaypointList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WaypointList::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WaypointList& WaypointList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_WaypointList.base);
  return *internal_default_instance();
}


void WaypointList::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.WaypointList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waypoints_.Clear();
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_optimal_blending_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(use_optimal_blending_));
  _internal_metadata_.Clear();
}

bool WaypointList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.WaypointList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.Base.Waypoint waypoints = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_waypoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_optimal_blending = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_optimal_blending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.WaypointList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.WaypointList)
  return false;
#undef DO_
}

void WaypointList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.WaypointList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.Waypoint waypoints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waypoints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->waypoints(static_cast<int>(i)),
      output);
  }

  // float duration = 2;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  // bool use_optimal_blending = 3;
  if (this->use_optimal_blending() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_optimal_blending(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.WaypointList)
}

::google::protobuf::uint8* WaypointList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.WaypointList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.Base.Waypoint waypoints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waypoints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->waypoints(static_cast<int>(i)), deterministic, target);
  }

  // float duration = 2;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  // bool use_optimal_blending = 3;
  if (this->use_optimal_blending() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_optimal_blending(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.WaypointList)
  return target;
}

size_t WaypointList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.WaypointList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.Waypoint waypoints = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->waypoints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->waypoints(static_cast<int>(i)));
    }
  }

  // float duration = 2;
  if (this->duration() != 0) {
    total_size += 1 + 4;
  }

  // bool use_optimal_blending = 3;
  if (this->use_optimal_blending() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaypointList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.WaypointList)
  GOOGLE_DCHECK_NE(&from, this);
  const WaypointList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WaypointList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.WaypointList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.WaypointList)
    MergeFrom(*source);
  }
}

void WaypointList::MergeFrom(const WaypointList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.WaypointList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waypoints_.MergeFrom(from.waypoints_);
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.use_optimal_blending() != 0) {
    set_use_optimal_blending(from.use_optimal_blending());
  }
}

void WaypointList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.WaypointList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaypointList::CopyFrom(const WaypointList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.WaypointList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaypointList::IsInitialized() const {
  return true;
}

void WaypointList::Swap(WaypointList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaypointList::InternalSwap(WaypointList* other) {
  using std::swap;
  CastToBase(&waypoints_)->InternalSwap(CastToBase(&other->waypoints_));
  swap(duration_, other->duration_);
  swap(use_optimal_blending_, other->use_optimal_blending_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WaypointList::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KinematicTrajectoryConstraints::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KinematicTrajectoryConstraints::kAngularVelocitiesFieldNumber;
const int KinematicTrajectoryConstraints::kLinearVelocityFieldNumber;
const int KinematicTrajectoryConstraints::kAngularVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KinematicTrajectoryConstraints::KinematicTrajectoryConstraints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_KinematicTrajectoryConstraints.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.KinematicTrajectoryConstraints)
}
KinematicTrajectoryConstraints::KinematicTrajectoryConstraints(const KinematicTrajectoryConstraints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      angular_velocities_(from.angular_velocities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&linear_velocity_, &from.linear_velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&angular_velocity_) -
    reinterpret_cast<char*>(&linear_velocity_)) + sizeof(angular_velocity_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.KinematicTrajectoryConstraints)
}

void KinematicTrajectoryConstraints::SharedCtor() {
  ::memset(&linear_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_velocity_) -
      reinterpret_cast<char*>(&linear_velocity_)) + sizeof(angular_velocity_));
}

KinematicTrajectoryConstraints::~KinematicTrajectoryConstraints() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.KinematicTrajectoryConstraints)
  SharedDtor();
}

void KinematicTrajectoryConstraints::SharedDtor() {
}

void KinematicTrajectoryConstraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KinematicTrajectoryConstraints::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KinematicTrajectoryConstraints& KinematicTrajectoryConstraints::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_KinematicTrajectoryConstraints.base);
  return *internal_default_instance();
}


void KinematicTrajectoryConstraints::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.KinematicTrajectoryConstraints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  angular_velocities_.Clear();
  ::memset(&linear_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_velocity_) -
      reinterpret_cast<char*>(&linear_velocity_)) + sizeof(angular_velocity_));
  _internal_metadata_.Clear();
}

bool KinematicTrajectoryConstraints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.KinematicTrajectoryConstraints)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float angular_velocities = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_angular_velocities())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_angular_velocities())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float linear_velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linear_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angular_velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.KinematicTrajectoryConstraints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.KinematicTrajectoryConstraints)
  return false;
#undef DO_
}

void KinematicTrajectoryConstraints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.KinematicTrajectoryConstraints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float angular_velocities = 1;
  if (this->angular_velocities_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _angular_velocities_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->angular_velocities().data(), this->angular_velocities_size(), output);
  }

  // float linear_velocity = 2;
  if (this->linear_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->linear_velocity(), output);
  }

  // float angular_velocity = 3;
  if (this->angular_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angular_velocity(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.KinematicTrajectoryConstraints)
}

::google::protobuf::uint8* KinematicTrajectoryConstraints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.KinematicTrajectoryConstraints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float angular_velocities = 1;
  if (this->angular_velocities_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _angular_velocities_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->angular_velocities_, target);
  }

  // float linear_velocity = 2;
  if (this->linear_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->linear_velocity(), target);
  }

  // float angular_velocity = 3;
  if (this->angular_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angular_velocity(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.KinematicTrajectoryConstraints)
  return target;
}

size_t KinematicTrajectoryConstraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.KinematicTrajectoryConstraints)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float angular_velocities = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->angular_velocities_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _angular_velocities_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // float linear_velocity = 2;
  if (this->linear_velocity() != 0) {
    total_size += 1 + 4;
  }

  // float angular_velocity = 3;
  if (this->angular_velocity() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KinematicTrajectoryConstraints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.KinematicTrajectoryConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  const KinematicTrajectoryConstraints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KinematicTrajectoryConstraints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.KinematicTrajectoryConstraints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.KinematicTrajectoryConstraints)
    MergeFrom(*source);
  }
}

void KinematicTrajectoryConstraints::MergeFrom(const KinematicTrajectoryConstraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.KinematicTrajectoryConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  angular_velocities_.MergeFrom(from.angular_velocities_);
  if (from.linear_velocity() != 0) {
    set_linear_velocity(from.linear_velocity());
  }
  if (from.angular_velocity() != 0) {
    set_angular_velocity(from.angular_velocity());
  }
}

void KinematicTrajectoryConstraints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.KinematicTrajectoryConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KinematicTrajectoryConstraints::CopyFrom(const KinematicTrajectoryConstraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.KinematicTrajectoryConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KinematicTrajectoryConstraints::IsInitialized() const {
  return true;
}

void KinematicTrajectoryConstraints::Swap(KinematicTrajectoryConstraints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KinematicTrajectoryConstraints::InternalSwap(KinematicTrajectoryConstraints* other) {
  using std::swap;
  angular_velocities_.InternalSwap(&other->angular_velocities_);
  swap(linear_velocity_, other->linear_velocity_);
  swap(angular_velocity_, other->angular_velocity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KinematicTrajectoryConstraints::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FirmwareBundleVersions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FirmwareBundleVersions::kMainBundleVersionFieldNumber;
const int FirmwareBundleVersions::kComponentsVersionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FirmwareBundleVersions::FirmwareBundleVersions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_FirmwareBundleVersions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.FirmwareBundleVersions)
}
FirmwareBundleVersions::FirmwareBundleVersions(const FirmwareBundleVersions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      components_versions_(from.components_versions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  main_bundle_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.main_bundle_version().size() > 0) {
    main_bundle_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.main_bundle_version_);
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.FirmwareBundleVersions)
}

void FirmwareBundleVersions::SharedCtor() {
  main_bundle_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FirmwareBundleVersions::~FirmwareBundleVersions() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.FirmwareBundleVersions)
  SharedDtor();
}

void FirmwareBundleVersions::SharedDtor() {
  main_bundle_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FirmwareBundleVersions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FirmwareBundleVersions::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FirmwareBundleVersions& FirmwareBundleVersions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_FirmwareBundleVersions.base);
  return *internal_default_instance();
}


void FirmwareBundleVersions::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.FirmwareBundleVersions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  components_versions_.Clear();
  main_bundle_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FirmwareBundleVersions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.FirmwareBundleVersions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string main_bundle_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_main_bundle_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->main_bundle_version().data(), static_cast<int>(this->main_bundle_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.FirmwareBundleVersions.main_bundle_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Kinova.Api.Base.FirmwareComponentVersion components_versions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_components_versions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.FirmwareBundleVersions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.FirmwareBundleVersions)
  return false;
#undef DO_
}

void FirmwareBundleVersions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.FirmwareBundleVersions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string main_bundle_version = 1;
  if (this->main_bundle_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->main_bundle_version().data(), static_cast<int>(this->main_bundle_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.FirmwareBundleVersions.main_bundle_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->main_bundle_version(), output);
  }

  // repeated .Kinova.Api.Base.FirmwareComponentVersion components_versions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->components_versions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->components_versions(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.FirmwareBundleVersions)
}

::google::protobuf::uint8* FirmwareBundleVersions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.FirmwareBundleVersions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string main_bundle_version = 1;
  if (this->main_bundle_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->main_bundle_version().data(), static_cast<int>(this->main_bundle_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.FirmwareBundleVersions.main_bundle_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->main_bundle_version(), target);
  }

  // repeated .Kinova.Api.Base.FirmwareComponentVersion components_versions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->components_versions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->components_versions(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.FirmwareBundleVersions)
  return target;
}

size_t FirmwareBundleVersions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.FirmwareBundleVersions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.Base.FirmwareComponentVersion components_versions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->components_versions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->components_versions(static_cast<int>(i)));
    }
  }

  // string main_bundle_version = 1;
  if (this->main_bundle_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->main_bundle_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirmwareBundleVersions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.FirmwareBundleVersions)
  GOOGLE_DCHECK_NE(&from, this);
  const FirmwareBundleVersions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FirmwareBundleVersions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.FirmwareBundleVersions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.FirmwareBundleVersions)
    MergeFrom(*source);
  }
}

void FirmwareBundleVersions::MergeFrom(const FirmwareBundleVersions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.FirmwareBundleVersions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  components_versions_.MergeFrom(from.components_versions_);
  if (from.main_bundle_version().size() > 0) {

    main_bundle_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.main_bundle_version_);
  }
}

void FirmwareBundleVersions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.FirmwareBundleVersions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirmwareBundleVersions::CopyFrom(const FirmwareBundleVersions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.FirmwareBundleVersions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirmwareBundleVersions::IsInitialized() const {
  return true;
}

void FirmwareBundleVersions::Swap(FirmwareBundleVersions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FirmwareBundleVersions::InternalSwap(FirmwareBundleVersions* other) {
  using std::swap;
  CastToBase(&components_versions_)->InternalSwap(CastToBase(&other->components_versions_));
  main_bundle_version_.Swap(&other->main_bundle_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FirmwareBundleVersions::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FirmwareComponentVersion::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FirmwareComponentVersion::kNameFieldNumber;
const int FirmwareComponentVersion::kVersionFieldNumber;
const int FirmwareComponentVersion::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FirmwareComponentVersion::FirmwareComponentVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_FirmwareComponentVersion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.FirmwareComponentVersion)
}
FirmwareComponentVersion::FirmwareComponentVersion(const FirmwareComponentVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  device_id_ = from.device_id_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.FirmwareComponentVersion)
}

void FirmwareComponentVersion::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_ = 0u;
}

FirmwareComponentVersion::~FirmwareComponentVersion() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.FirmwareComponentVersion)
  SharedDtor();
}

void FirmwareComponentVersion::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FirmwareComponentVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FirmwareComponentVersion::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FirmwareComponentVersion& FirmwareComponentVersion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_FirmwareComponentVersion.base);
  return *internal_default_instance();
}


void FirmwareComponentVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.FirmwareComponentVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_ = 0u;
  _internal_metadata_.Clear();
}

bool FirmwareComponentVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.FirmwareComponentVersion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.FirmwareComponentVersion.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Base.FirmwareComponentVersion.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 device_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.FirmwareComponentVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.FirmwareComponentVersion)
  return false;
#undef DO_
}

void FirmwareComponentVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.FirmwareComponentVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.FirmwareComponentVersion.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.FirmwareComponentVersion.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // uint32 device_id = 3;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->device_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.FirmwareComponentVersion)
}

::google::protobuf::uint8* FirmwareComponentVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.FirmwareComponentVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.FirmwareComponentVersion.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Base.FirmwareComponentVersion.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // uint32 device_id = 3;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->device_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.FirmwareComponentVersion)
  return target;
}

size_t FirmwareComponentVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.FirmwareComponentVersion)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // uint32 device_id = 3;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirmwareComponentVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.FirmwareComponentVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const FirmwareComponentVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FirmwareComponentVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.FirmwareComponentVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.FirmwareComponentVersion)
    MergeFrom(*source);
  }
}

void FirmwareComponentVersion::MergeFrom(const FirmwareComponentVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.FirmwareComponentVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
}

void FirmwareComponentVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.FirmwareComponentVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirmwareComponentVersion::CopyFrom(const FirmwareComponentVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.FirmwareComponentVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirmwareComponentVersion::IsInitialized() const {
  return true;
}

void FirmwareComponentVersion::Swap(FirmwareComponentVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FirmwareComponentVersion::InternalSwap(FirmwareComponentVersion* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(device_id_, other->device_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FirmwareComponentVersion::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IKData::InitAsDefaultInstance() {
  ::Kinova::Api::Base::_IKData_default_instance_._instance.get_mutable()->cartesian_pose_ = const_cast< ::Kinova::Api::Base::Pose*>(
      ::Kinova::Api::Base::Pose::internal_default_instance());
  ::Kinova::Api::Base::_IKData_default_instance_._instance.get_mutable()->guess_ = const_cast< ::Kinova::Api::Base::JointAngles*>(
      ::Kinova::Api::Base::JointAngles::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IKData::kCartesianPoseFieldNumber;
const int IKData::kGuessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IKData::IKData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Base_2eproto::scc_info_IKData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Base.IKData)
}
IKData::IKData(const IKData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cartesian_pose()) {
    cartesian_pose_ = new ::Kinova::Api::Base::Pose(*from.cartesian_pose_);
  } else {
    cartesian_pose_ = NULL;
  }
  if (from.has_guess()) {
    guess_ = new ::Kinova::Api::Base::JointAngles(*from.guess_);
  } else {
    guess_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Base.IKData)
}

void IKData::SharedCtor() {
  ::memset(&cartesian_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guess_) -
      reinterpret_cast<char*>(&cartesian_pose_)) + sizeof(guess_));
}

IKData::~IKData() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Base.IKData)
  SharedDtor();
}

void IKData::SharedDtor() {
  if (this != internal_default_instance()) delete cartesian_pose_;
  if (this != internal_default_instance()) delete guess_;
}

void IKData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IKData::descriptor() {
  ::protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IKData& IKData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Base_2eproto::scc_info_IKData.base);
  return *internal_default_instance();
}


void IKData::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Base.IKData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && cartesian_pose_ != NULL) {
    delete cartesian_pose_;
  }
  cartesian_pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && guess_ != NULL) {
    delete guess_;
  }
  guess_ = NULL;
  _internal_metadata_.Clear();
}

bool IKData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Base.IKData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Base.Pose cartesian_pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cartesian_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Base.JointAngles guess = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guess()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Base.IKData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Base.IKData)
  return false;
#undef DO_
}

void IKData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Base.IKData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.Pose cartesian_pose = 1;
  if (this->has_cartesian_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_cartesian_pose(), output);
  }

  // .Kinova.Api.Base.JointAngles guess = 2;
  if (this->has_guess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_guess(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Base.IKData)
}

::google::protobuf::uint8* IKData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Base.IKData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Base.Pose cartesian_pose = 1;
  if (this->has_cartesian_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_cartesian_pose(), deterministic, target);
  }

  // .Kinova.Api.Base.JointAngles guess = 2;
  if (this->has_guess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_guess(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Base.IKData)
  return target;
}

size_t IKData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Base.IKData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Base.Pose cartesian_pose = 1;
  if (this->has_cartesian_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cartesian_pose_);
  }

  // .Kinova.Api.Base.JointAngles guess = 2;
  if (this->has_guess()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guess_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IKData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Base.IKData)
  GOOGLE_DCHECK_NE(&from, this);
  const IKData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IKData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Base.IKData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Base.IKData)
    MergeFrom(*source);
  }
}

void IKData::MergeFrom(const IKData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Base.IKData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cartesian_pose()) {
    mutable_cartesian_pose()->::Kinova::Api::Base::Pose::MergeFrom(from.cartesian_pose());
  }
  if (from.has_guess()) {
    mutable_guess()->::Kinova::Api::Base::JointAngles::MergeFrom(from.guess());
  }
}

void IKData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Base.IKData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IKData::CopyFrom(const IKData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Base.IKData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IKData::IsInitialized() const {
  return true;
}

void IKData::Swap(IKData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IKData::InternalSwap(IKData* other) {
  using std::swap;
  swap(cartesian_pose_, other->cartesian_pose_);
  swap(guess_, other->guess_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IKData::GetMetadata() const {
  protobuf_Base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Base
}  // namespace Api
}  // namespace Kinova
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::GpioConfigurationList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::GpioConfigurationList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::GpioConfigurationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::GpioConfiguration* Arena::CreateMaybeMessage< ::Kinova::Api::Base::GpioConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::GpioConfiguration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::GpioPinConfiguration* Arena::CreateMaybeMessage< ::Kinova::Api::Base::GpioPinConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::GpioPinConfiguration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::FullUserProfile* Arena::CreateMaybeMessage< ::Kinova::Api::Base::FullUserProfile >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::FullUserProfile >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::UserProfile* Arena::CreateMaybeMessage< ::Kinova::Api::Base::UserProfile >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::UserProfile >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::UserProfileList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::UserProfileList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::UserProfileList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::UserList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::UserList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::UserList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::PasswordChange* Arena::CreateMaybeMessage< ::Kinova::Api::Base::PasswordChange >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::PasswordChange >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::SequenceHandle* Arena::CreateMaybeMessage< ::Kinova::Api::Base::SequenceHandle >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::SequenceHandle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::AdvancedSequenceHandle* Arena::CreateMaybeMessage< ::Kinova::Api::Base::AdvancedSequenceHandle >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::AdvancedSequenceHandle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::SequenceTaskHandle* Arena::CreateMaybeMessage< ::Kinova::Api::Base::SequenceTaskHandle >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::SequenceTaskHandle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::SequenceTask* Arena::CreateMaybeMessage< ::Kinova::Api::Base::SequenceTask >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::SequenceTask >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::SequenceTasks* Arena::CreateMaybeMessage< ::Kinova::Api::Base::SequenceTasks >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::SequenceTasks >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::SequenceTasksConfiguration* Arena::CreateMaybeMessage< ::Kinova::Api::Base::SequenceTasksConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::SequenceTasksConfiguration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::SequenceTaskConfiguration* Arena::CreateMaybeMessage< ::Kinova::Api::Base::SequenceTaskConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::SequenceTaskConfiguration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::SequenceTasksRange* Arena::CreateMaybeMessage< ::Kinova::Api::Base::SequenceTasksRange >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::SequenceTasksRange >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::SequenceTasksPair* Arena::CreateMaybeMessage< ::Kinova::Api::Base::SequenceTasksPair >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::SequenceTasksPair >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Sequence* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Sequence >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Sequence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::SequenceList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::SequenceList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::SequenceList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::AppendActionInformation* Arena::CreateMaybeMessage< ::Kinova::Api::Base::AppendActionInformation >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::AppendActionInformation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ActionHandle* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ActionHandle >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ActionHandle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::RequestedActionType* Arena::CreateMaybeMessage< ::Kinova::Api::Base::RequestedActionType >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::RequestedActionType >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Action* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Action >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Action >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Snapshot* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Snapshot >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Snapshot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::SwitchControlMapping* Arena::CreateMaybeMessage< ::Kinova::Api::Base::SwitchControlMapping >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::SwitchControlMapping >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ChangeTwist* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ChangeTwist >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ChangeTwist >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ChangeJointSpeeds* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ChangeJointSpeeds >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ChangeJointSpeeds >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ChangeWrench* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ChangeWrench >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ChangeWrench >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::EmergencyStop* Arena::CreateMaybeMessage< ::Kinova::Api::Base::EmergencyStop >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::EmergencyStop >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Faults* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Faults >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Faults >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Delay* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Delay >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Delay >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Stop* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Stop >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Stop >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ActionList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ActionList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ActionList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Timeout* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Timeout >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Timeout >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Ssid* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Ssid >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Ssid >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::CommunicationInterfaceConfiguration* Arena::CreateMaybeMessage< ::Kinova::Api::Base::CommunicationInterfaceConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::CommunicationInterfaceConfiguration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::NetworkHandle* Arena::CreateMaybeMessage< ::Kinova::Api::Base::NetworkHandle >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::NetworkHandle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::IPv4Configuration* Arena::CreateMaybeMessage< ::Kinova::Api::Base::IPv4Configuration >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::IPv4Configuration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::IPv4Information* Arena::CreateMaybeMessage< ::Kinova::Api::Base::IPv4Information >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::IPv4Information >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::FullIPv4Configuration* Arena::CreateMaybeMessage< ::Kinova::Api::Base::FullIPv4Configuration >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::FullIPv4Configuration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::WifiEnableState* Arena::CreateMaybeMessage< ::Kinova::Api::Base::WifiEnableState >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::WifiEnableState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::BluetoothEnableState* Arena::CreateMaybeMessage< ::Kinova::Api::Base::BluetoothEnableState >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::BluetoothEnableState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::RFConfiguration* Arena::CreateMaybeMessage< ::Kinova::Api::Base::RFConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::RFConfiguration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::WifiInformation* Arena::CreateMaybeMessage< ::Kinova::Api::Base::WifiInformation >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::WifiInformation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::WifiInformationList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::WifiInformationList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::WifiInformationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::WifiConfiguration* Arena::CreateMaybeMessage< ::Kinova::Api::Base::WifiConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::WifiConfiguration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::WifiConfigurationList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::WifiConfigurationList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::WifiConfigurationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ProtectionZoneHandle* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ProtectionZoneHandle >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ProtectionZoneHandle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::RotationMatrixRow* Arena::CreateMaybeMessage< ::Kinova::Api::Base::RotationMatrixRow >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::RotationMatrixRow >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::RotationMatrix* Arena::CreateMaybeMessage< ::Kinova::Api::Base::RotationMatrix >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::RotationMatrix >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Point* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Point >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ZoneShape* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ZoneShape >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ZoneShape >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ProtectionZone* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ProtectionZone >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ProtectionZone >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ProtectionZoneList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ProtectionZoneList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ProtectionZoneList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::CartesianLimitation* Arena::CreateMaybeMessage< ::Kinova::Api::Base::CartesianLimitation >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::CartesianLimitation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::TwistLimitation* Arena::CreateMaybeMessage< ::Kinova::Api::Base::TwistLimitation >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::TwistLimitation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::WrenchLimitation* Arena::CreateMaybeMessage< ::Kinova::Api::Base::WrenchLimitation >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::WrenchLimitation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::CartesianLimitationList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::CartesianLimitationList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::CartesianLimitationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::JointLimitation* Arena::CreateMaybeMessage< ::Kinova::Api::Base::JointLimitation >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::JointLimitation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::JointsLimitationsList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::JointsLimitationsList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::JointsLimitationsList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Query* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Query >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Query >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ConfigurationChangeNotification* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ConfigurationChangeNotification >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ConfigurationChangeNotification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::MappingInfoNotification* Arena::CreateMaybeMessage< ::Kinova::Api::Base::MappingInfoNotification >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::MappingInfoNotification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ControlModeInformation* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ControlModeInformation >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ControlModeInformation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ControlModeNotification* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ControlModeNotification >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ControlModeNotification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ServoingModeInformation* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ServoingModeInformation >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ServoingModeInformation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::OperatingModeInformation* Arena::CreateMaybeMessage< ::Kinova::Api::Base::OperatingModeInformation >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::OperatingModeInformation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::OperatingModeNotification* Arena::CreateMaybeMessage< ::Kinova::Api::Base::OperatingModeNotification >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::OperatingModeNotification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ServoingModeNotification* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ServoingModeNotification >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ServoingModeNotification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::SequenceInfoNotification* Arena::CreateMaybeMessage< ::Kinova::Api::Base::SequenceInfoNotification >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::SequenceInfoNotification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::SequenceInformation* Arena::CreateMaybeMessage< ::Kinova::Api::Base::SequenceInformation >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::SequenceInformation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ProtectionZoneNotification* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ProtectionZoneNotification >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ProtectionZoneNotification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ProtectionZoneInformation* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ProtectionZoneInformation >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ProtectionZoneInformation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::UserNotification* Arena::CreateMaybeMessage< ::Kinova::Api::Base::UserNotification >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::UserNotification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ControllerHandle* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ControllerHandle >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ControllerHandle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ControllerElementHandle* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ControllerElementHandle >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ControllerElementHandle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ControllerNotification* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ControllerNotification >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ControllerNotification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ControllerList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ControllerList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ControllerList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ControllerState* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ControllerState >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ControllerState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ControllerElementState* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ControllerElementState >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ControllerElementState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ActionNotification* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ActionNotification >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ActionNotification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::TrajectoryInfo* Arena::CreateMaybeMessage< ::Kinova::Api::Base::TrajectoryInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::TrajectoryInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ActionExecutionState* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ActionExecutionState >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ActionExecutionState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::RobotEventNotification* Arena::CreateMaybeMessage< ::Kinova::Api::Base::RobotEventNotification >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::RobotEventNotification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::FactoryNotification* Arena::CreateMaybeMessage< ::Kinova::Api::Base::FactoryNotification >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::FactoryNotification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::NetworkNotification* Arena::CreateMaybeMessage< ::Kinova::Api::Base::NetworkNotification >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::NetworkNotification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ConfigurationChangeNotificationList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ConfigurationChangeNotificationList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ConfigurationChangeNotificationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::MappingInfoNotificationList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::MappingInfoNotificationList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::MappingInfoNotificationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ControlModeNotificationList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ControlModeNotificationList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ControlModeNotificationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::OperatingModeNotificationList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::OperatingModeNotificationList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::OperatingModeNotificationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ServoingModeNotificationList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ServoingModeNotificationList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ServoingModeNotificationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::SequenceInfoNotificationList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::SequenceInfoNotificationList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::SequenceInfoNotificationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ProtectionZoneNotificationList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ProtectionZoneNotificationList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ProtectionZoneNotificationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::UserNotificationList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::UserNotificationList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::UserNotificationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::SafetyNotificationList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::SafetyNotificationList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::SafetyNotificationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ControllerNotificationList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ControllerNotificationList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ControllerNotificationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ActionNotificationList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ActionNotificationList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ActionNotificationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::RobotEventNotificationList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::RobotEventNotificationList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::RobotEventNotificationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::NetworkNotificationList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::NetworkNotificationList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::NetworkNotificationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::MappingHandle* Arena::CreateMaybeMessage< ::Kinova::Api::Base::MappingHandle >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::MappingHandle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::SafetyEvent* Arena::CreateMaybeMessage< ::Kinova::Api::Base::SafetyEvent >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::SafetyEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ControllerEvent* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ControllerEvent >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ControllerEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::GpioEvent* Arena::CreateMaybeMessage< ::Kinova::Api::Base::GpioEvent >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::GpioEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::MapEvent* Arena::CreateMaybeMessage< ::Kinova::Api::Base::MapEvent >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::MapEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::MapElement* Arena::CreateMaybeMessage< ::Kinova::Api::Base::MapElement >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::MapElement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ActivateMapHandle* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ActivateMapHandle >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ActivateMapHandle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Map* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Map >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Map >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::MapHandle* Arena::CreateMaybeMessage< ::Kinova::Api::Base::MapHandle >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::MapHandle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::MapList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::MapList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::MapList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::MapGroupHandle* Arena::CreateMaybeMessage< ::Kinova::Api::Base::MapGroupHandle >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::MapGroupHandle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::MapGroup* Arena::CreateMaybeMessage< ::Kinova::Api::Base::MapGroup >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::MapGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::MapGroupList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::MapGroupList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::MapGroupList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Mapping* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Mapping >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Mapping >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::MappingList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::MappingList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::MappingList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::TransformationMatrix* Arena::CreateMaybeMessage< ::Kinova::Api::Base::TransformationMatrix >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::TransformationMatrix >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::TransformationRow* Arena::CreateMaybeMessage< ::Kinova::Api::Base::TransformationRow >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::TransformationRow >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Pose* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Pose >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Pose >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Position* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Position >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Position >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Orientation* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Orientation >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Orientation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::CartesianSpeed* Arena::CreateMaybeMessage< ::Kinova::Api::Base::CartesianSpeed >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::CartesianSpeed >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::CartesianTrajectoryConstraint* Arena::CreateMaybeMessage< ::Kinova::Api::Base::CartesianTrajectoryConstraint >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::CartesianTrajectoryConstraint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::JointTrajectoryConstraint* Arena::CreateMaybeMessage< ::Kinova::Api::Base::JointTrajectoryConstraint >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::JointTrajectoryConstraint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Wrench* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Wrench >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Wrench >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Twist* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Twist >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Twist >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Admittance* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Admittance >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Admittance >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ConstrainedPose* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ConstrainedPose >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ConstrainedPose >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ConstrainedPosition* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ConstrainedPosition >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ConstrainedPosition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ConstrainedOrientation* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ConstrainedOrientation >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ConstrainedOrientation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::WrenchCommand* Arena::CreateMaybeMessage< ::Kinova::Api::Base::WrenchCommand >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::WrenchCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::TwistCommand* Arena::CreateMaybeMessage< ::Kinova::Api::Base::TwistCommand >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::TwistCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ConstrainedJointAngles* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ConstrainedJointAngles >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ConstrainedJointAngles >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ConstrainedJointAngle* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ConstrainedJointAngle >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ConstrainedJointAngle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::JointAngles* Arena::CreateMaybeMessage< ::Kinova::Api::Base::JointAngles >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::JointAngles >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::JointAngle* Arena::CreateMaybeMessage< ::Kinova::Api::Base::JointAngle >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::JointAngle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::JointSpeeds* Arena::CreateMaybeMessage< ::Kinova::Api::Base::JointSpeeds >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::JointSpeeds >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::JointSpeed* Arena::CreateMaybeMessage< ::Kinova::Api::Base::JointSpeed >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::JointSpeed >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::JointTorques* Arena::CreateMaybeMessage< ::Kinova::Api::Base::JointTorques >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::JointTorques >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::JointTorque* Arena::CreateMaybeMessage< ::Kinova::Api::Base::JointTorque >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::JointTorque >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::GripperCommand* Arena::CreateMaybeMessage< ::Kinova::Api::Base::GripperCommand >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::GripperCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::GripperRequest* Arena::CreateMaybeMessage< ::Kinova::Api::Base::GripperRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::GripperRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Gripper* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Gripper >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Gripper >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Finger* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Finger >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Finger >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::GpioCommand* Arena::CreateMaybeMessage< ::Kinova::Api::Base::GpioCommand >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::GpioCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::SystemTime* Arena::CreateMaybeMessage< ::Kinova::Api::Base::SystemTime >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::SystemTime >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ControllerConfigurationMode* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ControllerConfigurationMode >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ControllerConfigurationMode >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ControllerConfiguration* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ControllerConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ControllerConfiguration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ControllerConfigurationList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ControllerConfigurationList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ControllerConfigurationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ActuatorInformation* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ActuatorInformation >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ActuatorInformation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ArmStateInformation* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ArmStateInformation >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ArmStateInformation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::ArmStateNotification* Arena::CreateMaybeMessage< ::Kinova::Api::Base::ArmStateNotification >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::ArmStateNotification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::CapSenseConfig* Arena::CreateMaybeMessage< ::Kinova::Api::Base::CapSenseConfig >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::CapSenseConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::BridgeList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::BridgeList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::BridgeList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::BridgeResult* Arena::CreateMaybeMessage< ::Kinova::Api::Base::BridgeResult >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::BridgeResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::BridgeIdentifier* Arena::CreateMaybeMessage< ::Kinova::Api::Base::BridgeIdentifier >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::BridgeIdentifier >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::BridgeConfig* Arena::CreateMaybeMessage< ::Kinova::Api::Base::BridgeConfig >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::BridgeConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::BridgePortConfig* Arena::CreateMaybeMessage< ::Kinova::Api::Base::BridgePortConfig >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::BridgePortConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::PreComputedJointTrajectory* Arena::CreateMaybeMessage< ::Kinova::Api::Base::PreComputedJointTrajectory >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::PreComputedJointTrajectory >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::PreComputedJointTrajectoryElement* Arena::CreateMaybeMessage< ::Kinova::Api::Base::PreComputedJointTrajectoryElement >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::PreComputedJointTrajectoryElement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::TrajectoryErrorElement* Arena::CreateMaybeMessage< ::Kinova::Api::Base::TrajectoryErrorElement >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::TrajectoryErrorElement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::TrajectoryErrorReport* Arena::CreateMaybeMessage< ::Kinova::Api::Base::TrajectoryErrorReport >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::TrajectoryErrorReport >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::WaypointValidationReport* Arena::CreateMaybeMessage< ::Kinova::Api::Base::WaypointValidationReport >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::WaypointValidationReport >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::Waypoint* Arena::CreateMaybeMessage< ::Kinova::Api::Base::Waypoint >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::Waypoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::AngularWaypoint* Arena::CreateMaybeMessage< ::Kinova::Api::Base::AngularWaypoint >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::AngularWaypoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::CartesianWaypoint* Arena::CreateMaybeMessage< ::Kinova::Api::Base::CartesianWaypoint >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::CartesianWaypoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::WaypointList* Arena::CreateMaybeMessage< ::Kinova::Api::Base::WaypointList >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::WaypointList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::KinematicTrajectoryConstraints* Arena::CreateMaybeMessage< ::Kinova::Api::Base::KinematicTrajectoryConstraints >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::KinematicTrajectoryConstraints >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::FirmwareBundleVersions* Arena::CreateMaybeMessage< ::Kinova::Api::Base::FirmwareBundleVersions >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::FirmwareBundleVersions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::FirmwareComponentVersion* Arena::CreateMaybeMessage< ::Kinova::Api::Base::FirmwareComponentVersion >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::FirmwareComponentVersion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Base::IKData* Arena::CreateMaybeMessage< ::Kinova::Api::Base::IKData >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Base::IKData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
