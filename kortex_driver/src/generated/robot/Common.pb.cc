// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

#include "Common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SafetyHandle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserProfileHandle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Common_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Connection;
}  // namespace protobuf_Common_2eproto
namespace Kinova {
namespace Api {
namespace Common {
class DeviceHandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceHandle>
      _instance;
} _DeviceHandle_default_instance_;
class EmptyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Empty>
      _instance;
} _Empty_default_instance_;
class NotificationOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotificationOptions>
      _instance;
} _NotificationOptions_default_instance_;
class SafetyHandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SafetyHandle>
      _instance;
} _SafetyHandle_default_instance_;
class NotificationHandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotificationHandle>
      _instance;
} _NotificationHandle_default_instance_;
class SafetyNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SafetyNotification>
      _instance;
} _SafetyNotification_default_instance_;
class TimestampDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Timestamp>
      _instance;
} _Timestamp_default_instance_;
class UserProfileHandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserProfileHandle>
      _instance;
} _UserProfileHandle_default_instance_;
class ConnectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Connection>
      _instance;
} _Connection_default_instance_;
class UARTConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UARTConfiguration>
      _instance;
} _UARTConfiguration_default_instance_;
class UARTDeviceIdentificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UARTDeviceIdentification>
      _instance;
} _UARTDeviceIdentification_default_instance_;
class CountryCodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CountryCode>
      _instance;
} _CountryCode_default_instance_;
}  // namespace Common
}  // namespace Api
}  // namespace Kinova
namespace protobuf_Common_2eproto {
static void InitDefaultsDeviceHandle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Common::_DeviceHandle_default_instance_;
    new (ptr) ::Kinova::Api::Common::DeviceHandle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Common::DeviceHandle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeviceHandle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeviceHandle}, {}};

static void InitDefaultsEmpty() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Common::_Empty_default_instance_;
    new (ptr) ::Kinova::Api::Common::Empty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Common::Empty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Empty =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEmpty}, {}};

static void InitDefaultsNotificationOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Common::_NotificationOptions_default_instance_;
    new (ptr) ::Kinova::Api::Common::NotificationOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Common::NotificationOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NotificationOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNotificationOptions}, {}};

static void InitDefaultsSafetyHandle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Common::_SafetyHandle_default_instance_;
    new (ptr) ::Kinova::Api::Common::SafetyHandle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Common::SafetyHandle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SafetyHandle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSafetyHandle}, {}};

static void InitDefaultsNotificationHandle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Common::_NotificationHandle_default_instance_;
    new (ptr) ::Kinova::Api::Common::NotificationHandle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Common::NotificationHandle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NotificationHandle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNotificationHandle}, {}};

static void InitDefaultsSafetyNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Common::_SafetyNotification_default_instance_;
    new (ptr) ::Kinova::Api::Common::SafetyNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Common::SafetyNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_SafetyNotification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsSafetyNotification}, {
      &protobuf_Common_2eproto::scc_info_SafetyHandle.base,
      &protobuf_Common_2eproto::scc_info_Timestamp.base,
      &protobuf_Common_2eproto::scc_info_UserProfileHandle.base,
      &protobuf_Common_2eproto::scc_info_Connection.base,}};

static void InitDefaultsTimestamp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Common::_Timestamp_default_instance_;
    new (ptr) ::Kinova::Api::Common::Timestamp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Common::Timestamp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTimestamp}, {}};

static void InitDefaultsUserProfileHandle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Common::_UserProfileHandle_default_instance_;
    new (ptr) ::Kinova::Api::Common::UserProfileHandle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Common::UserProfileHandle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserProfileHandle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserProfileHandle}, {}};

static void InitDefaultsConnection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Common::_Connection_default_instance_;
    new (ptr) ::Kinova::Api::Common::Connection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Common::Connection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Connection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConnection}, {
      &protobuf_Common_2eproto::scc_info_UserProfileHandle.base,}};

static void InitDefaultsUARTConfiguration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Common::_UARTConfiguration_default_instance_;
    new (ptr) ::Kinova::Api::Common::UARTConfiguration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Common::UARTConfiguration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UARTConfiguration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUARTConfiguration}, {}};

static void InitDefaultsUARTDeviceIdentification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Common::_UARTDeviceIdentification_default_instance_;
    new (ptr) ::Kinova::Api::Common::UARTDeviceIdentification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Common::UARTDeviceIdentification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UARTDeviceIdentification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUARTDeviceIdentification}, {}};

static void InitDefaultsCountryCode() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::Common::_CountryCode_default_instance_;
    new (ptr) ::Kinova::Api::Common::CountryCode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::Common::CountryCode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CountryCode =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCountryCode}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceHandle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Empty.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotificationOptions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SafetyHandle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotificationHandle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SafetyNotification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Timestamp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserProfileHandle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Connection.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UARTConfiguration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UARTDeviceIdentification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CountryCode.base);
}

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[12];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::DeviceHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::DeviceHandle, device_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::DeviceHandle, device_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::DeviceHandle, order_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::NotificationOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::NotificationOptions, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::NotificationOptions, rate_m_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::NotificationOptions, threshold_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::SafetyHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::SafetyHandle, identifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::NotificationHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::NotificationHandle, identifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::SafetyNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::SafetyNotification, safety_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::SafetyNotification, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::SafetyNotification, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::SafetyNotification, user_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::SafetyNotification, connection_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::Timestamp, sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::Timestamp, usec_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::UserProfileHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::UserProfileHandle, identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::UserProfileHandle, permission_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::Connection, user_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::Connection, connection_information_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::Connection, connection_identifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::UARTConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::UARTConfiguration, port_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::UARTConfiguration, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::UARTConfiguration, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::UARTConfiguration, word_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::UARTConfiguration, stop_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::UARTConfiguration, parity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::UARTDeviceIdentification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::UARTDeviceIdentification, port_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::CountryCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::Common::CountryCode, identifier_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Kinova::Api::Common::DeviceHandle)},
  { 8, -1, sizeof(::Kinova::Api::Common::Empty)},
  { 13, -1, sizeof(::Kinova::Api::Common::NotificationOptions)},
  { 21, -1, sizeof(::Kinova::Api::Common::SafetyHandle)},
  { 27, -1, sizeof(::Kinova::Api::Common::NotificationHandle)},
  { 33, -1, sizeof(::Kinova::Api::Common::SafetyNotification)},
  { 43, -1, sizeof(::Kinova::Api::Common::Timestamp)},
  { 50, -1, sizeof(::Kinova::Api::Common::UserProfileHandle)},
  { 57, -1, sizeof(::Kinova::Api::Common::Connection)},
  { 65, -1, sizeof(::Kinova::Api::Common::UARTConfiguration)},
  { 76, -1, sizeof(::Kinova::Api::Common::UARTDeviceIdentification)},
  { 82, -1, sizeof(::Kinova::Api::Common::CountryCode)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Common::_DeviceHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Common::_Empty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Common::_NotificationOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Common::_SafetyHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Common::_NotificationHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Common::_SafetyNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Common::_Timestamp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Common::_UserProfileHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Common::_Connection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Common::_UARTConfiguration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Common::_UARTDeviceIdentification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::Common::_CountryCode_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Common.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014Common.proto\022\021Kinova.Api.Common\"m\n\014Dev"
      "iceHandle\0223\n\013device_type\030\001 \001(\0162\036.Kinova."
      "Api.Common.DeviceTypes\022\031\n\021device_identif"
      "ier\030\002 \001(\r\022\r\n\005order\030\003 \001(\r\"\007\n\005Empty\"u\n\023Not"
      "ificationOptions\0221\n\004type\030\001 \001(\0162#.Kinova."
      "Api.Common.NotificationType\022\022\n\nrate_m_se"
      "c\030\002 \001(\r\022\027\n\017threshold_value\030\003 \001(\002\"\"\n\014Safe"
      "tyHandle\022\022\n\nidentifier\030\001 \001(\r\"(\n\022Notifica"
      "tionHandle\022\022\n\nidentifier\030\001 \001(\r\"\240\002\n\022Safet"
      "yNotification\0226\n\rsafety_handle\030\001 \001(\0132\037.K"
      "inova.Api.Common.SafetyHandle\0223\n\005value\030\002"
      " \001(\0162$.Kinova.Api.Common.SafetyStatusVal"
      "ue\022/\n\ttimestamp\030\003 \001(\0132\034.Kinova.Api.Commo"
      "n.Timestamp\0229\n\013user_handle\030\004 \001(\0132$.Kinov"
      "a.Api.Common.UserProfileHandle\0221\n\nconnec"
      "tion\030\005 \001(\0132\035.Kinova.Api.Common.Connectio"
      "n\"&\n\tTimestamp\022\013\n\003sec\030\001 \001(\r\022\014\n\004usec\030\002 \001("
      "\r\";\n\021UserProfileHandle\022\022\n\nidentifier\030\001 \001"
      "(\r\022\022\n\npermission\030\002 \001(\007\"\206\001\n\nConnection\0229\n"
      "\013user_handle\030\001 \001(\0132$.Kinova.Api.Common.U"
      "serProfileHandle\022\036\n\026connection_informati"
      "on\030\002 \001(\t\022\035\n\025connection_identifier\030\003 \001(\r\""
      "\375\001\n\021UARTConfiguration\022\017\n\007port_id\030\001 \001(\r\022\017"
      "\n\007enabled\030\002 \001(\010\022+\n\005speed\030\003 \001(\0162\034.Kinova."
      "Api.Common.UARTSpeed\0226\n\013word_length\030\004 \001("
      "\0162!.Kinova.Api.Common.UARTWordLength\0222\n\t"
      "stop_bits\030\005 \001(\0162\037.Kinova.Api.Common.UART"
      "StopBits\022-\n\006parity\030\006 \001(\0162\035.Kinova.Api.Co"
      "mmon.UARTParity\"+\n\030UARTDeviceIdentificat"
      "ion\022\017\n\007port_id\030\001 \001(\r\"K\n\013CountryCode\022<\n\ni"
      "dentifier\030\001 \001(\0162(.Kinova.Api.Common.Coun"
      "tryCodeIdentifier*\255\001\n\013DeviceTypes\022\033\n\027UNS"
      "PECIFIED_DEVICE_TYPE\020\000\022\010\n\004BASE\020\001\022\n\n\006VISI"
      "ON\020\002\022\020\n\014BIG_ACTUATOR\020\003\022\022\n\016SMALL_ACTUATOR"
      "\020\004\022\020\n\014INTERCONNECT\020\005\022\013\n\007GRIPPER\020\006\022\023\n\017MED"
      "IUM_ACTUATOR\020\007\022\021\n\rXBIG_ACTUATOR\020\010*\200\001\n\021Sa"
      "fetyStatusValue\022\035\n\031SAFETY_STATUS_UNSPECI"
      "FIED\020\000\022\031\n\025SAFETY_STATUS_WARNING\020\001\022\027\n\023SAF"
      "ETY_STATUS_ERROR\020\002\022\030\n\024SAFETY_STATUS_NORM"
      "AL\020\003*b\n\nPermission\022\021\n\rNO_PERMISSION\020\000\022\023\n"
      "\017READ_PERMISSION\020\001\022\025\n\021UPDATE_PERMISSION\020"
      "\002\022\025\n\021DELETE_PERMISSION\020\004*\223\001\n\020Notificatio"
      "nType\022!\n\035NOTIFICATION_TYPE_UNSPECIFIED\020\000"
      "\022\037\n\033NOTIFICATION_TYPE_THRESHOLD\020\001\022\036\n\032NOT"
      "IFICATION_TYPE_FIX_RATE\020\002\022\033\n\027NOTIFICATIO"
      "N_TYPE_EVENT\020\003*\373\001\n\004Unit\022\024\n\020UNSPECIFIED_U"
      "NIT\020\000\022\013\n\007CELSIUS\020\001\022\n\n\006AMPERE\020\002\022\010\n\004VOLT\020\003"
      "\022\024\n\020METER_PER_SECOND\020\004\022\025\n\021DEGREE_PER_SEC"
      "OND\020\005\022\026\n\022METER_PER_SECOND_2\020\006\022\027\n\023DEGREE_"
      "PER_SECOND_2\020\007\022\n\n\006NEWTON\020\010\022\020\n\014NEWTON_MET"
      "ER\020\t\022\014\n\010KILOGRAM\020\n\022\n\n\006DEGREE\020\013\022\010\n\004TICK\020\014"
      "\022\032\n\026DEGREE_PER_MILLISECOND\020\r*\356\002\n\010ArmStat"
      "e\022\030\n\024ARMSTATE_UNSPECIFIED\020\000\022 \n\034ARMSTATE_"
      "BASE_INITIALIZATION\020\001\022\021\n\rARMSTATE_IDLE\020\002"
      "\022\033\n\027ARMSTATE_INITIALIZATION\020\003\022\025\n\021ARMSTAT"
      "E_IN_FAULT\020\004\022\030\n\024ARMSTATE_MAINTENANCE\020\005\022\037"
      "\n\033ARMSTATE_SERVOING_LOW_LEVEL\020\006\022\033\n\027ARMST"
      "ATE_SERVOING_READY\020\007\022&\n\"ARMSTATE_SERVOIN"
      "G_PLAYING_SEQUENCE\020\010\022)\n%ARMSTATE_SERVOIN"
      "G_MANUALLY_CONTROLLED\020\t\022\034\n\030ARMSTATE_BRAK"
      "E_RELEASING\020\n\022\026\n\021ARMSTATE_RESERVED\020\377\001*\377\002"
      "\n\tUARTSpeed\022\032\n\026UART_SPEED_UNSPECIFIED\020\000\022"
      "\023\n\017UART_SPEED_4800\020\001\022\023\n\017UART_SPEED_9600\020"
      "\002\022\024\n\020UART_SPEED_19200\020\003\022\024\n\020UART_SPEED_38"
      "400\020\004\022\024\n\020UART_SPEED_57600\020\005\022\025\n\021UART_SPEE"
      "D_115200\020\006\022\025\n\021UART_SPEED_230400\020\007\022\025\n\021UAR"
      "T_SPEED_460800\020\010\022\025\n\021UART_SPEED_921600\020\t\022"
      "\026\n\022UART_SPEED_1382400\020\n\022\026\n\022UART_SPEED_16"
      "12800\020\013\022\026\n\022UART_SPEED_1843200\020\014\022\026\n\022UART_"
      "SPEED_2073600\020\r\022\026\n\022UART_SPEED_2188800\020\016\022"
      "\026\n\022UART_SPEED_2246400\020\017*z\n\016UARTWordLengt"
      "h\022 \n\034UART_WORD_LENGTH_UNSPECIFIED\020\000\022\026\n\022U"
      "ART_WORD_LENGTH_7\020\001\022\026\n\022UART_WORD_LENGTH_"
      "8\020\002\022\026\n\022UART_WORD_LENGTH_9\020\003*\212\001\n\014UARTStop"
      "Bits\022\036\n\032UART_STOP_BITS_UNSPECIFIED\020\000\022\026\n\022"
      "UART_STOP_BITS_0_5\020\001\022\024\n\020UART_STOP_BITS_1"
      "\020\002\022\026\n\022UART_STOP_BITS_1_5\020\003\022\024\n\020UART_STOP_"
      "BITS_2\020\004*j\n\nUARTParity\022\033\n\027UART_PARITY_UN"
      "SPECIFIED\020\000\022\024\n\020UART_PARITY_NONE\020\001\022\023\n\017UAR"
      "T_PARITY_ODD\020\002\022\024\n\020UART_PARITY_EVEN\020\003*\261\001\n"
      "\027CartesianReferenceFrame\022)\n%CARTESIAN_RE"
      "FERENCE_FRAME_UNSPECIFIED\020\000\022#\n\037CARTESIAN"
      "_REFERENCE_FRAME_MIXED\020\001\022\"\n\036CARTESIAN_RE"
      "FERENCE_FRAME_TOOL\020\002\022\"\n\036CARTESIAN_REFERE"
      "NCE_FRAME_BASE\020\003*\271\020\n\025CountryCodeIdentifi"
      "er\022\034\n\030UNSPECIFIED_COUNTRY_CODE\020\000\022\033\n\027UNIT"
      "ED_ARAB_EMIRATES_AE\020\001\022\032\n\026ANTIGUA_AND_BAR"
      "BUDA_AG\020\002\022\017\n\013ANGUILLA_AI\020\003\022\016\n\nALBANIA_AL"
      "\020\004\022\025\n\021AMERICAN_SAMOA_AS\020\005\022\016\n\nAUSTRIA_AT\020"
      "\006\022\020\n\014AUSTRALIA_AU\020\007\022\014\n\010ARUBA_AW\020\010\022\021\n\rAZE"
      "RBAIJAN_AZ\020\t\022\035\n\031BOSNIA_AND_HERZEGOVINA_B"
      "A\020\n\022\021\n\rBANGLADESH_BD\020\013\022\016\n\nBELGIUM_BE\020\014\022\017"
      "\n\013BULGARIA_BG\020\r\022\016\n\nBAHRAIN_BH\020\016\022\016\n\nBERMU"
      "DA_BM\020\017\022\030\n\024BRUNEI_DARUSSALAM_BN\020\020\022\r\n\tBRA"
      "ZIL_BR\020\021\022\016\n\nBAHAMAS_BS\020\022\022\016\n\nBELARUS_BY\020\023"
      "\022\022\n\016SWITZERLAND_CH\020\024\022\r\n\tCANADA_CA\020\025\022\014\n\010C"
      "HINA_CN\020\026\022\017\n\013COLOMBIA_CO\020\027\022\021\n\rCOSTA_RICA"
      "_CR\020\030\022\r\n\tCYPRUS_CY\020\031\022\025\n\021CZECH_REPUBLIC_C"
      "Z\020\032\022\016\n\nGERMANY_DE\020\033\022\016\n\nDENMARK_DK\020\034\022\016\n\nE"
      "CUADOR_EC\020\035\022\016\n\nESTONIA_EE\020\036\022\014\n\010EGYPT_EG\020"
      "\037\022\014\n\010SPAIN_ES\020 \022\017\n\013ETHIOPIA_ET\020!\022\016\n\nFINL"
      "AND_FI\020\"\022\r\n\tFRANCE_FR\020#\022\025\n\021UNITED_KINGDO"
      "M_GB\020$\022\016\n\nGRENADA_GD\020%\022\024\n\020FRENCH_GUIANA_"
      "GF\020&\022\021\n\rGUADELOUPE_GP\020\'\022\r\n\tGREECE_GR\020(\022\020"
      "\n\014GUATEMALA_GT\020)\022\013\n\007GUAM_GU\020*\022\020\n\014HONG_KO"
      "NG_HK\020+\022\016\n\nCROATIA_HR\020,\022\016\n\nHUNGARY_HU\020-\022"
      "\014\n\010INDIA_IN\020.\022\020\n\014INDONESIA_ID\020/\022\016\n\nIRELA"
      "ND_IE\0200\022\r\n\tISRAEL_IL\0201\022\016\n\nICELAND_IS\0202\022\014"
      "\n\010ITALY_IT\0203\022\r\n\tJORDAN_JO\0204\022\014\n\010JAPAN_JP\020"
      "5\022\017\n\013CAMBODIA_KH\0206\022\030\n\024REPUBLIC_OF_KOREA_"
      "KR\0207\022\r\n\tKUWAIT_KW\0208\022\025\n\021CAYMAN_ISLANDS_KY"
      "\0209\022\016\n\nLAO_PDR_LA\020:\022\016\n\nLEBANON_LB\020;\022\024\n\020LI"
      "ECHTENSTEIN_LI\020<\022\020\n\014SRI_LANKA_LK\020=\022\016\n\nLE"
      "SOTHO_LS\020>\022\020\n\014LITHUANIA_LT\020\?\022\021\n\rLUXEMBOU"
      "RG_LU\020@\022\r\n\tLATVIA_LV\020A\022\016\n\nMOROCCO_MA\020B\022\r"
      "\n\tMONACO_MC\020C\022\016\n\nMOLDOVA_MD\020D\022\021\n\rMONTENE"
      "GRO_ME\020E\022\034\n\030REPUBLIC_OF_MACEDONIA_MK\020F\022\017"
      "\n\013MONGOLIA_MN\020G\022\021\n\rMARTINIQUE_MQ\020H\022\021\n\rMA"
      "URITANIA_MR\020I\022\014\n\010MALTA_MT\020J\022\020\n\014MAURITIUS"
      "_MU\020K\022\017\n\013MALDIVES_MV\020L\022\r\n\tMALAWI_MW\020M\022\r\n"
      "\tMEXICO_MX\020N\022\017\n\013MALAYSIA_MY\020O\022\020\n\014NICARAG"
      "UA_NI\020P\022\022\n\016NETHERLANDS_NL\020Q\022\r\n\tNORWAY_NO"
      "\020R\022\022\n\016NEW_ZEALAND_NZ\020S\022\013\n\007OMAN_OM\020T\022\r\n\tP"
      "ANAMA_PA\020U\022\013\n\007PERU_PE\020V\022\022\n\016PHILIPPINES_P"
      "H\020W\022\r\n\tPOLAND_PL\020X\022\022\n\016PUERTO_RICO_PR\020Y\022\017"
      "\n\013PORTUGAL_PT\020Z\022\017\n\013PARAGUAY_PY\020[\022\016\n\nREUN"
      "ION_RE\020\\\022\016\n\nROMANIA_RO\020]\022\r\n\tSERBIA_RS\020^\022"
      "\031\n\025RUSSIAN_FEDERATION_RU\020_\022\r\n\tSWEDEN_SE\020"
      "`\022\020\n\014SINGAPORE_SI\020a\022\017\n\013SLOVAKIA_SK\020b\022\022\n\016"
      "EL_SALVADOR_SV\020c\022\017\n\013THAILAND_TH\020d\022\016\n\nTUN"
      "ISIA_TN\020e\022\r\n\tTURKEY_TR\020f\022\032\n\026TRINIDAD_AND"
      "_TOBAGO_TT\020g\022\037\n\033TAIWAN_PROVINCE_OF_CHINA"
      "_TW\020h\022\016\n\nUKRAINE_UA\020i\022\024\n\020UNITED_STATES_U"
      "S\020j\022\"\n\036HOLY_SEE_VATICAN_CITY_STATE_VA\020k\022"
      "\'\n#BOLIVARIAN_REPUBLIC_OF_VENEZUELA_VE\020l"
      "\022\035\n\031BRITISH_VIRGIN_ISLANDS_VG\020m\022\016\n\nVIETN"
      "AM_VN\020n\022\016\n\nMAYOTTE_YT\020o\022\023\n\017SOUTH_AFRICA_"
      "ZA\020pb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5492);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Common.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Common_2eproto
namespace Kinova {
namespace Api {
namespace Common {
const ::google::protobuf::EnumDescriptor* DeviceTypes_descriptor() {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_2eproto::file_level_enum_descriptors[0];
}
bool DeviceTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SafetyStatusValue_descriptor() {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_2eproto::file_level_enum_descriptors[1];
}
bool SafetyStatusValue_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Permission_descriptor() {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_2eproto::file_level_enum_descriptors[2];
}
bool Permission_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NotificationType_descriptor() {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_2eproto::file_level_enum_descriptors[3];
}
bool NotificationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Unit_descriptor() {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_2eproto::file_level_enum_descriptors[4];
}
bool Unit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ArmState_descriptor() {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_2eproto::file_level_enum_descriptors[5];
}
bool ArmState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 255:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UARTSpeed_descriptor() {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_2eproto::file_level_enum_descriptors[6];
}
bool UARTSpeed_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UARTWordLength_descriptor() {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_2eproto::file_level_enum_descriptors[7];
}
bool UARTWordLength_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UARTStopBits_descriptor() {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_2eproto::file_level_enum_descriptors[8];
}
bool UARTStopBits_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UARTParity_descriptor() {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_2eproto::file_level_enum_descriptors[9];
}
bool UARTParity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CartesianReferenceFrame_descriptor() {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_2eproto::file_level_enum_descriptors[10];
}
bool CartesianReferenceFrame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CountryCodeIdentifier_descriptor() {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_2eproto::file_level_enum_descriptors[11];
}
bool CountryCodeIdentifier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DeviceHandle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceHandle::kDeviceTypeFieldNumber;
const int DeviceHandle::kDeviceIdentifierFieldNumber;
const int DeviceHandle::kOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceHandle::DeviceHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Common_2eproto::scc_info_DeviceHandle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Common.DeviceHandle)
}
DeviceHandle::DeviceHandle(const DeviceHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&device_type_, &from.device_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_) -
    reinterpret_cast<char*>(&device_type_)) + sizeof(order_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Common.DeviceHandle)
}

void DeviceHandle::SharedCtor() {
  ::memset(&device_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_) -
      reinterpret_cast<char*>(&device_type_)) + sizeof(order_));
}

DeviceHandle::~DeviceHandle() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Common.DeviceHandle)
  SharedDtor();
}

void DeviceHandle::SharedDtor() {
}

void DeviceHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeviceHandle::descriptor() {
  ::protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceHandle& DeviceHandle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Common_2eproto::scc_info_DeviceHandle.base);
  return *internal_default_instance();
}


void DeviceHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Common.DeviceHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&device_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_) -
      reinterpret_cast<char*>(&device_type_)) + sizeof(order_));
  _internal_metadata_.Clear();
}

bool DeviceHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Common.DeviceHandle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Common.DeviceTypes device_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_device_type(static_cast< ::Kinova::Api::Common::DeviceTypes >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 device_identifier = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 order = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Common.DeviceHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Common.DeviceHandle)
  return false;
#undef DO_
}

void DeviceHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Common.DeviceHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.DeviceTypes device_type = 1;
  if (this->device_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->device_type(), output);
  }

  // uint32 device_identifier = 2;
  if (this->device_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->device_identifier(), output);
  }

  // uint32 order = 3;
  if (this->order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->order(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Common.DeviceHandle)
}

::google::protobuf::uint8* DeviceHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Common.DeviceHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.DeviceTypes device_type = 1;
  if (this->device_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->device_type(), target);
  }

  // uint32 device_identifier = 2;
  if (this->device_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->device_identifier(), target);
  }

  // uint32 order = 3;
  if (this->order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->order(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Common.DeviceHandle)
  return target;
}

size_t DeviceHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Common.DeviceHandle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Common.DeviceTypes device_type = 1;
  if (this->device_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
  }

  // uint32 device_identifier = 2;
  if (this->device_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device_identifier());
  }

  // uint32 order = 3;
  if (this->order() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->order());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Common.DeviceHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Common.DeviceHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Common.DeviceHandle)
    MergeFrom(*source);
  }
}

void DeviceHandle::MergeFrom(const DeviceHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Common.DeviceHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_type() != 0) {
    set_device_type(from.device_type());
  }
  if (from.device_identifier() != 0) {
    set_device_identifier(from.device_identifier());
  }
  if (from.order() != 0) {
    set_order(from.order());
  }
}

void DeviceHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Common.DeviceHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceHandle::CopyFrom(const DeviceHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Common.DeviceHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceHandle::IsInitialized() const {
  return true;
}

void DeviceHandle::Swap(DeviceHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceHandle::InternalSwap(DeviceHandle* other) {
  using std::swap;
  swap(device_type_, other->device_type_);
  swap(device_identifier_, other->device_identifier_);
  swap(order_, other->order_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeviceHandle::GetMetadata() const {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Empty::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Common_2eproto::scc_info_Empty.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Common.Empty)
}
Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Common.Empty)
}

void Empty::SharedCtor() {
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Common.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
}

void Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Empty::descriptor() {
  ::protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Empty& Empty::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Common_2eproto::scc_info_Empty.base);
  return *internal_default_instance();
}


void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Common.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Common.Empty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Common.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Common.Empty)
  return false;
#undef DO_
}

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Common.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Common.Empty)
}

::google::protobuf::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Common.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Common.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Common.Empty)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Common.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Empty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Common.Empty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Common.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Common.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Common.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Common.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NotificationOptions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotificationOptions::kTypeFieldNumber;
const int NotificationOptions::kRateMSecFieldNumber;
const int NotificationOptions::kThresholdValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotificationOptions::NotificationOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Common_2eproto::scc_info_NotificationOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Common.NotificationOptions)
}
NotificationOptions::NotificationOptions(const NotificationOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&threshold_value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(threshold_value_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Common.NotificationOptions)
}

void NotificationOptions::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(threshold_value_));
}

NotificationOptions::~NotificationOptions() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Common.NotificationOptions)
  SharedDtor();
}

void NotificationOptions::SharedDtor() {
}

void NotificationOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NotificationOptions::descriptor() {
  ::protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotificationOptions& NotificationOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Common_2eproto::scc_info_NotificationOptions.base);
  return *internal_default_instance();
}


void NotificationOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Common.NotificationOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(threshold_value_));
  _internal_metadata_.Clear();
}

bool NotificationOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Common.NotificationOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Common.NotificationType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Kinova::Api::Common::NotificationType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rate_m_sec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_m_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float threshold_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Common.NotificationOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Common.NotificationOptions)
  return false;
#undef DO_
}

void NotificationOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Common.NotificationOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.NotificationType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint32 rate_m_sec = 2;
  if (this->rate_m_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rate_m_sec(), output);
  }

  // float threshold_value = 3;
  if (this->threshold_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->threshold_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Common.NotificationOptions)
}

::google::protobuf::uint8* NotificationOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Common.NotificationOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.NotificationType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint32 rate_m_sec = 2;
  if (this->rate_m_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rate_m_sec(), target);
  }

  // float threshold_value = 3;
  if (this->threshold_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->threshold_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Common.NotificationOptions)
  return target;
}

size_t NotificationOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Common.NotificationOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Common.NotificationType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 rate_m_sec = 2;
  if (this->rate_m_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rate_m_sec());
  }

  // float threshold_value = 3;
  if (this->threshold_value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotificationOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Common.NotificationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const NotificationOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotificationOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Common.NotificationOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Common.NotificationOptions)
    MergeFrom(*source);
  }
}

void NotificationOptions::MergeFrom(const NotificationOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Common.NotificationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.rate_m_sec() != 0) {
    set_rate_m_sec(from.rate_m_sec());
  }
  if (from.threshold_value() != 0) {
    set_threshold_value(from.threshold_value());
  }
}

void NotificationOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Common.NotificationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotificationOptions::CopyFrom(const NotificationOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Common.NotificationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationOptions::IsInitialized() const {
  return true;
}

void NotificationOptions::Swap(NotificationOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotificationOptions::InternalSwap(NotificationOptions* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(rate_m_sec_, other->rate_m_sec_);
  swap(threshold_value_, other->threshold_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NotificationOptions::GetMetadata() const {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SafetyHandle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SafetyHandle::kIdentifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SafetyHandle::SafetyHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Common_2eproto::scc_info_SafetyHandle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Common.SafetyHandle)
}
SafetyHandle::SafetyHandle(const SafetyHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  identifier_ = from.identifier_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Common.SafetyHandle)
}

void SafetyHandle::SharedCtor() {
  identifier_ = 0u;
}

SafetyHandle::~SafetyHandle() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Common.SafetyHandle)
  SharedDtor();
}

void SafetyHandle::SharedDtor() {
}

void SafetyHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SafetyHandle::descriptor() {
  ::protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SafetyHandle& SafetyHandle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Common_2eproto::scc_info_SafetyHandle.base);
  return *internal_default_instance();
}


void SafetyHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Common.SafetyHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifier_ = 0u;
  _internal_metadata_.Clear();
}

bool SafetyHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Common.SafetyHandle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Common.SafetyHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Common.SafetyHandle)
  return false;
#undef DO_
}

void SafetyHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Common.SafetyHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->identifier(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Common.SafetyHandle)
}

::google::protobuf::uint8* SafetyHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Common.SafetyHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->identifier(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Common.SafetyHandle)
  return target;
}

size_t SafetyHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Common.SafetyHandle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->identifier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SafetyHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Common.SafetyHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const SafetyHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SafetyHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Common.SafetyHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Common.SafetyHandle)
    MergeFrom(*source);
  }
}

void SafetyHandle::MergeFrom(const SafetyHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Common.SafetyHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.identifier() != 0) {
    set_identifier(from.identifier());
  }
}

void SafetyHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Common.SafetyHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SafetyHandle::CopyFrom(const SafetyHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Common.SafetyHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafetyHandle::IsInitialized() const {
  return true;
}

void SafetyHandle::Swap(SafetyHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SafetyHandle::InternalSwap(SafetyHandle* other) {
  using std::swap;
  swap(identifier_, other->identifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SafetyHandle::GetMetadata() const {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NotificationHandle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotificationHandle::kIdentifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotificationHandle::NotificationHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Common_2eproto::scc_info_NotificationHandle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Common.NotificationHandle)
}
NotificationHandle::NotificationHandle(const NotificationHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  identifier_ = from.identifier_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Common.NotificationHandle)
}

void NotificationHandle::SharedCtor() {
  identifier_ = 0u;
}

NotificationHandle::~NotificationHandle() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Common.NotificationHandle)
  SharedDtor();
}

void NotificationHandle::SharedDtor() {
}

void NotificationHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NotificationHandle::descriptor() {
  ::protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotificationHandle& NotificationHandle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Common_2eproto::scc_info_NotificationHandle.base);
  return *internal_default_instance();
}


void NotificationHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Common.NotificationHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifier_ = 0u;
  _internal_metadata_.Clear();
}

bool NotificationHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Common.NotificationHandle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Common.NotificationHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Common.NotificationHandle)
  return false;
#undef DO_
}

void NotificationHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Common.NotificationHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->identifier(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Common.NotificationHandle)
}

::google::protobuf::uint8* NotificationHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Common.NotificationHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->identifier(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Common.NotificationHandle)
  return target;
}

size_t NotificationHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Common.NotificationHandle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->identifier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotificationHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Common.NotificationHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const NotificationHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotificationHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Common.NotificationHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Common.NotificationHandle)
    MergeFrom(*source);
  }
}

void NotificationHandle::MergeFrom(const NotificationHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Common.NotificationHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.identifier() != 0) {
    set_identifier(from.identifier());
  }
}

void NotificationHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Common.NotificationHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotificationHandle::CopyFrom(const NotificationHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Common.NotificationHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationHandle::IsInitialized() const {
  return true;
}

void NotificationHandle::Swap(NotificationHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotificationHandle::InternalSwap(NotificationHandle* other) {
  using std::swap;
  swap(identifier_, other->identifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NotificationHandle::GetMetadata() const {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SafetyNotification::InitAsDefaultInstance() {
  ::Kinova::Api::Common::_SafetyNotification_default_instance_._instance.get_mutable()->safety_handle_ = const_cast< ::Kinova::Api::Common::SafetyHandle*>(
      ::Kinova::Api::Common::SafetyHandle::internal_default_instance());
  ::Kinova::Api::Common::_SafetyNotification_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::Kinova::Api::Common::Timestamp*>(
      ::Kinova::Api::Common::Timestamp::internal_default_instance());
  ::Kinova::Api::Common::_SafetyNotification_default_instance_._instance.get_mutable()->user_handle_ = const_cast< ::Kinova::Api::Common::UserProfileHandle*>(
      ::Kinova::Api::Common::UserProfileHandle::internal_default_instance());
  ::Kinova::Api::Common::_SafetyNotification_default_instance_._instance.get_mutable()->connection_ = const_cast< ::Kinova::Api::Common::Connection*>(
      ::Kinova::Api::Common::Connection::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SafetyNotification::kSafetyHandleFieldNumber;
const int SafetyNotification::kValueFieldNumber;
const int SafetyNotification::kTimestampFieldNumber;
const int SafetyNotification::kUserHandleFieldNumber;
const int SafetyNotification::kConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SafetyNotification::SafetyNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Common_2eproto::scc_info_SafetyNotification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Common.SafetyNotification)
}
SafetyNotification::SafetyNotification(const SafetyNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_safety_handle()) {
    safety_handle_ = new ::Kinova::Api::Common::SafetyHandle(*from.safety_handle_);
  } else {
    safety_handle_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::Kinova::Api::Common::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_user_handle()) {
    user_handle_ = new ::Kinova::Api::Common::UserProfileHandle(*from.user_handle_);
  } else {
    user_handle_ = NULL;
  }
  if (from.has_connection()) {
    connection_ = new ::Kinova::Api::Common::Connection(*from.connection_);
  } else {
    connection_ = NULL;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Common.SafetyNotification)
}

void SafetyNotification::SharedCtor() {
  ::memset(&safety_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&safety_handle_)) + sizeof(value_));
}

SafetyNotification::~SafetyNotification() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Common.SafetyNotification)
  SharedDtor();
}

void SafetyNotification::SharedDtor() {
  if (this != internal_default_instance()) delete safety_handle_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete user_handle_;
  if (this != internal_default_instance()) delete connection_;
}

void SafetyNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SafetyNotification::descriptor() {
  ::protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SafetyNotification& SafetyNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Common_2eproto::scc_info_SafetyNotification.base);
  return *internal_default_instance();
}


void SafetyNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Common.SafetyNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && safety_handle_ != NULL) {
    delete safety_handle_;
  }
  safety_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
  value_ = 0;
  _internal_metadata_.Clear();
}

bool SafetyNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Common.SafetyNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Common.SafetyHandle safety_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_safety_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.SafetyStatusValue value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value(static_cast< ::Kinova::Api::Common::SafetyStatusValue >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Timestamp timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.Connection connection = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Common.SafetyNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Common.SafetyNotification)
  return false;
#undef DO_
}

void SafetyNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Common.SafetyNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.SafetyHandle safety_handle = 1;
  if (this->has_safety_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_safety_handle(), output);
  }

  // .Kinova.Api.Common.SafetyStatusValue value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->value(), output);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_timestamp(), output);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_user_handle(), output);
  }

  // .Kinova.Api.Common.Connection connection = 5;
  if (this->has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_connection(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Common.SafetyNotification)
}

::google::protobuf::uint8* SafetyNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Common.SafetyNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.SafetyHandle safety_handle = 1;
  if (this->has_safety_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_safety_handle(), deterministic, target);
  }

  // .Kinova.Api.Common.SafetyStatusValue value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->value(), target);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_timestamp(), deterministic, target);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_user_handle(), deterministic, target);
  }

  // .Kinova.Api.Common.Connection connection = 5;
  if (this->has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_connection(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Common.SafetyNotification)
  return target;
}

size_t SafetyNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Common.SafetyNotification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Common.SafetyHandle safety_handle = 1;
  if (this->has_safety_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *safety_handle_);
  }

  // .Kinova.Api.Common.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 4;
  if (this->has_user_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_handle_);
  }

  // .Kinova.Api.Common.Connection connection = 5;
  if (this->has_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *connection_);
  }

  // .Kinova.Api.Common.SafetyStatusValue value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SafetyNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Common.SafetyNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const SafetyNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SafetyNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Common.SafetyNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Common.SafetyNotification)
    MergeFrom(*source);
  }
}

void SafetyNotification::MergeFrom(const SafetyNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Common.SafetyNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_safety_handle()) {
    mutable_safety_handle()->::Kinova::Api::Common::SafetyHandle::MergeFrom(from.safety_handle());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::Kinova::Api::Common::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_user_handle()) {
    mutable_user_handle()->::Kinova::Api::Common::UserProfileHandle::MergeFrom(from.user_handle());
  }
  if (from.has_connection()) {
    mutable_connection()->::Kinova::Api::Common::Connection::MergeFrom(from.connection());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void SafetyNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Common.SafetyNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SafetyNotification::CopyFrom(const SafetyNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Common.SafetyNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafetyNotification::IsInitialized() const {
  return true;
}

void SafetyNotification::Swap(SafetyNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SafetyNotification::InternalSwap(SafetyNotification* other) {
  using std::swap;
  swap(safety_handle_, other->safety_handle_);
  swap(timestamp_, other->timestamp_);
  swap(user_handle_, other->user_handle_);
  swap(connection_, other->connection_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SafetyNotification::GetMetadata() const {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Timestamp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Timestamp::kSecFieldNumber;
const int Timestamp::kUsecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Timestamp::Timestamp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Common_2eproto::scc_info_Timestamp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Common.Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sec_, &from.sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&usec_) -
    reinterpret_cast<char*>(&sec_)) + sizeof(usec_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Common.Timestamp)
}

void Timestamp::SharedCtor() {
  ::memset(&sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usec_) -
      reinterpret_cast<char*>(&sec_)) + sizeof(usec_));
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Common.Timestamp)
  SharedDtor();
}

void Timestamp::SharedDtor() {
}

void Timestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Timestamp::descriptor() {
  ::protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Timestamp& Timestamp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Common_2eproto::scc_info_Timestamp.base);
  return *internal_default_instance();
}


void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Common.Timestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usec_) -
      reinterpret_cast<char*>(&sec_)) + sizeof(usec_));
  _internal_metadata_.Clear();
}

bool Timestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Common.Timestamp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 usec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Common.Timestamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Common.Timestamp)
  return false;
#undef DO_
}

void Timestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Common.Timestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sec = 1;
  if (this->sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sec(), output);
  }

  // uint32 usec = 2;
  if (this->usec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usec(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Common.Timestamp)
}

::google::protobuf::uint8* Timestamp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Common.Timestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sec = 1;
  if (this->sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sec(), target);
  }

  // uint32 usec = 2;
  if (this->usec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usec(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Common.Timestamp)
  return target;
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Common.Timestamp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 sec = 1;
  if (this->sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sec());
  }

  // uint32 usec = 2;
  if (this->usec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->usec());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timestamp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Common.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  const Timestamp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Timestamp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Common.Timestamp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Common.Timestamp)
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Common.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sec() != 0) {
    set_sec(from.sec());
  }
  if (from.usec() != 0) {
    set_usec(from.usec());
  }
}

void Timestamp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Common.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Common.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::Swap(Timestamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  swap(sec_, other->sec_);
  swap(usec_, other->usec_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Timestamp::GetMetadata() const {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserProfileHandle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserProfileHandle::kIdentifierFieldNumber;
const int UserProfileHandle::kPermissionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserProfileHandle::UserProfileHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Common_2eproto::scc_info_UserProfileHandle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Common.UserProfileHandle)
}
UserProfileHandle::UserProfileHandle(const UserProfileHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&identifier_, &from.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Common.UserProfileHandle)
}

void UserProfileHandle::SharedCtor() {
  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
}

UserProfileHandle::~UserProfileHandle() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Common.UserProfileHandle)
  SharedDtor();
}

void UserProfileHandle::SharedDtor() {
}

void UserProfileHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserProfileHandle::descriptor() {
  ::protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserProfileHandle& UserProfileHandle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Common_2eproto::scc_info_UserProfileHandle.base);
  return *internal_default_instance();
}


void UserProfileHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Common.UserProfileHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(permission_));
  _internal_metadata_.Clear();
}

bool UserProfileHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Common.UserProfileHandle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 permission = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Common.UserProfileHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Common.UserProfileHandle)
  return false;
#undef DO_
}

void UserProfileHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Common.UserProfileHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->identifier(), output);
  }

  // fixed32 permission = 2;
  if (this->permission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->permission(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Common.UserProfileHandle)
}

::google::protobuf::uint8* UserProfileHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Common.UserProfileHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->identifier(), target);
  }

  // fixed32 permission = 2;
  if (this->permission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->permission(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Common.UserProfileHandle)
  return target;
}

size_t UserProfileHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Common.UserProfileHandle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->identifier());
  }

  // fixed32 permission = 2;
  if (this->permission() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserProfileHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Common.UserProfileHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const UserProfileHandle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserProfileHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Common.UserProfileHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Common.UserProfileHandle)
    MergeFrom(*source);
  }
}

void UserProfileHandle::MergeFrom(const UserProfileHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Common.UserProfileHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.identifier() != 0) {
    set_identifier(from.identifier());
  }
  if (from.permission() != 0) {
    set_permission(from.permission());
  }
}

void UserProfileHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Common.UserProfileHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserProfileHandle::CopyFrom(const UserProfileHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Common.UserProfileHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserProfileHandle::IsInitialized() const {
  return true;
}

void UserProfileHandle::Swap(UserProfileHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserProfileHandle::InternalSwap(UserProfileHandle* other) {
  using std::swap;
  swap(identifier_, other->identifier_);
  swap(permission_, other->permission_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserProfileHandle::GetMetadata() const {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Connection::InitAsDefaultInstance() {
  ::Kinova::Api::Common::_Connection_default_instance_._instance.get_mutable()->user_handle_ = const_cast< ::Kinova::Api::Common::UserProfileHandle*>(
      ::Kinova::Api::Common::UserProfileHandle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Connection::kUserHandleFieldNumber;
const int Connection::kConnectionInformationFieldNumber;
const int Connection::kConnectionIdentifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Connection::Connection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Common_2eproto::scc_info_Connection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Common.Connection)
}
Connection::Connection(const Connection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connection_information_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.connection_information().size() > 0) {
    connection_information_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_information_);
  }
  if (from.has_user_handle()) {
    user_handle_ = new ::Kinova::Api::Common::UserProfileHandle(*from.user_handle_);
  } else {
    user_handle_ = NULL;
  }
  connection_identifier_ = from.connection_identifier_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Common.Connection)
}

void Connection::SharedCtor() {
  connection_information_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connection_identifier_) -
      reinterpret_cast<char*>(&user_handle_)) + sizeof(connection_identifier_));
}

Connection::~Connection() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Common.Connection)
  SharedDtor();
}

void Connection::SharedDtor() {
  connection_information_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_handle_;
}

void Connection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Connection::descriptor() {
  ::protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Connection& Connection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Common_2eproto::scc_info_Connection.base);
  return *internal_default_instance();
}


void Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Common.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connection_information_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && user_handle_ != NULL) {
    delete user_handle_;
  }
  user_handle_ = NULL;
  connection_identifier_ = 0u;
  _internal_metadata_.Clear();
}

bool Connection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Common.Connection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Common.UserProfileHandle user_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string connection_information = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connection_information()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->connection_information().data(), static_cast<int>(this->connection_information().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Kinova.Api.Common.Connection.connection_information"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 connection_identifier = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connection_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Common.Connection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Common.Connection)
  return false;
#undef DO_
}

void Connection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Common.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.UserProfileHandle user_handle = 1;
  if (this->has_user_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_user_handle(), output);
  }

  // string connection_information = 2;
  if (this->connection_information().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connection_information().data(), static_cast<int>(this->connection_information().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Common.Connection.connection_information");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->connection_information(), output);
  }

  // uint32 connection_identifier = 3;
  if (this->connection_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->connection_identifier(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Common.Connection)
}

::google::protobuf::uint8* Connection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Common.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.UserProfileHandle user_handle = 1;
  if (this->has_user_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_user_handle(), deterministic, target);
  }

  // string connection_information = 2;
  if (this->connection_information().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connection_information().data(), static_cast<int>(this->connection_information().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Kinova.Api.Common.Connection.connection_information");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->connection_information(), target);
  }

  // uint32 connection_identifier = 3;
  if (this->connection_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->connection_identifier(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Common.Connection)
  return target;
}

size_t Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Common.Connection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string connection_information = 2;
  if (this->connection_information().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->connection_information());
  }

  // .Kinova.Api.Common.UserProfileHandle user_handle = 1;
  if (this->has_user_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_handle_);
  }

  // uint32 connection_identifier = 3;
  if (this->connection_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->connection_identifier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Connection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Common.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  const Connection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Connection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Common.Connection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Common.Connection)
    MergeFrom(*source);
  }
}

void Connection::MergeFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Common.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.connection_information().size() > 0) {

    connection_information_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_information_);
  }
  if (from.has_user_handle()) {
    mutable_user_handle()->::Kinova::Api::Common::UserProfileHandle::MergeFrom(from.user_handle());
  }
  if (from.connection_identifier() != 0) {
    set_connection_identifier(from.connection_identifier());
  }
}

void Connection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Common.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connection::CopyFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Common.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connection::IsInitialized() const {
  return true;
}

void Connection::Swap(Connection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Connection::InternalSwap(Connection* other) {
  using std::swap;
  connection_information_.Swap(&other->connection_information_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_handle_, other->user_handle_);
  swap(connection_identifier_, other->connection_identifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Connection::GetMetadata() const {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UARTConfiguration::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UARTConfiguration::kPortIdFieldNumber;
const int UARTConfiguration::kEnabledFieldNumber;
const int UARTConfiguration::kSpeedFieldNumber;
const int UARTConfiguration::kWordLengthFieldNumber;
const int UARTConfiguration::kStopBitsFieldNumber;
const int UARTConfiguration::kParityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UARTConfiguration::UARTConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Common_2eproto::scc_info_UARTConfiguration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Common.UARTConfiguration)
}
UARTConfiguration::UARTConfiguration(const UARTConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&port_id_, &from.port_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&parity_) -
    reinterpret_cast<char*>(&port_id_)) + sizeof(parity_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Common.UARTConfiguration)
}

void UARTConfiguration::SharedCtor() {
  ::memset(&port_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parity_) -
      reinterpret_cast<char*>(&port_id_)) + sizeof(parity_));
}

UARTConfiguration::~UARTConfiguration() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Common.UARTConfiguration)
  SharedDtor();
}

void UARTConfiguration::SharedDtor() {
}

void UARTConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UARTConfiguration::descriptor() {
  ::protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UARTConfiguration& UARTConfiguration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Common_2eproto::scc_info_UARTConfiguration.base);
  return *internal_default_instance();
}


void UARTConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Common.UARTConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&port_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parity_) -
      reinterpret_cast<char*>(&port_id_)) + sizeof(parity_));
  _internal_metadata_.Clear();
}

bool UARTConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Common.UARTConfiguration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 port_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.UARTSpeed speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_speed(static_cast< ::Kinova::Api::Common::UARTSpeed >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.UARTWordLength word_length = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_word_length(static_cast< ::Kinova::Api::Common::UARTWordLength >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.UARTStopBits stop_bits = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stop_bits(static_cast< ::Kinova::Api::Common::UARTStopBits >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kinova.Api.Common.UARTParity parity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_parity(static_cast< ::Kinova::Api::Common::UARTParity >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Common.UARTConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Common.UARTConfiguration)
  return false;
#undef DO_
}

void UARTConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Common.UARTConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port_id = 1;
  if (this->port_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port_id(), output);
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  // .Kinova.Api.Common.UARTSpeed speed = 3;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->speed(), output);
  }

  // .Kinova.Api.Common.UARTWordLength word_length = 4;
  if (this->word_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->word_length(), output);
  }

  // .Kinova.Api.Common.UARTStopBits stop_bits = 5;
  if (this->stop_bits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->stop_bits(), output);
  }

  // .Kinova.Api.Common.UARTParity parity = 6;
  if (this->parity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->parity(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Common.UARTConfiguration)
}

::google::protobuf::uint8* UARTConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Common.UARTConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port_id = 1;
  if (this->port_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port_id(), target);
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }

  // .Kinova.Api.Common.UARTSpeed speed = 3;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->speed(), target);
  }

  // .Kinova.Api.Common.UARTWordLength word_length = 4;
  if (this->word_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->word_length(), target);
  }

  // .Kinova.Api.Common.UARTStopBits stop_bits = 5;
  if (this->stop_bits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->stop_bits(), target);
  }

  // .Kinova.Api.Common.UARTParity parity = 6;
  if (this->parity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->parity(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Common.UARTConfiguration)
  return target;
}

size_t UARTConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Common.UARTConfiguration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 port_id = 1;
  if (this->port_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port_id());
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // .Kinova.Api.Common.UARTSpeed speed = 3;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->speed());
  }

  // .Kinova.Api.Common.UARTWordLength word_length = 4;
  if (this->word_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->word_length());
  }

  // .Kinova.Api.Common.UARTStopBits stop_bits = 5;
  if (this->stop_bits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stop_bits());
  }

  // .Kinova.Api.Common.UARTParity parity = 6;
  if (this->parity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->parity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UARTConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Common.UARTConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const UARTConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UARTConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Common.UARTConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Common.UARTConfiguration)
    MergeFrom(*source);
  }
}

void UARTConfiguration::MergeFrom(const UARTConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Common.UARTConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.port_id() != 0) {
    set_port_id(from.port_id());
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.word_length() != 0) {
    set_word_length(from.word_length());
  }
  if (from.stop_bits() != 0) {
    set_stop_bits(from.stop_bits());
  }
  if (from.parity() != 0) {
    set_parity(from.parity());
  }
}

void UARTConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Common.UARTConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UARTConfiguration::CopyFrom(const UARTConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Common.UARTConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UARTConfiguration::IsInitialized() const {
  return true;
}

void UARTConfiguration::Swap(UARTConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UARTConfiguration::InternalSwap(UARTConfiguration* other) {
  using std::swap;
  swap(port_id_, other->port_id_);
  swap(enabled_, other->enabled_);
  swap(speed_, other->speed_);
  swap(word_length_, other->word_length_);
  swap(stop_bits_, other->stop_bits_);
  swap(parity_, other->parity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UARTConfiguration::GetMetadata() const {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UARTDeviceIdentification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UARTDeviceIdentification::kPortIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UARTDeviceIdentification::UARTDeviceIdentification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Common_2eproto::scc_info_UARTDeviceIdentification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Common.UARTDeviceIdentification)
}
UARTDeviceIdentification::UARTDeviceIdentification(const UARTDeviceIdentification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  port_id_ = from.port_id_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Common.UARTDeviceIdentification)
}

void UARTDeviceIdentification::SharedCtor() {
  port_id_ = 0u;
}

UARTDeviceIdentification::~UARTDeviceIdentification() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Common.UARTDeviceIdentification)
  SharedDtor();
}

void UARTDeviceIdentification::SharedDtor() {
}

void UARTDeviceIdentification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UARTDeviceIdentification::descriptor() {
  ::protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UARTDeviceIdentification& UARTDeviceIdentification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Common_2eproto::scc_info_UARTDeviceIdentification.base);
  return *internal_default_instance();
}


void UARTDeviceIdentification::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Common.UARTDeviceIdentification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  port_id_ = 0u;
  _internal_metadata_.Clear();
}

bool UARTDeviceIdentification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Common.UARTDeviceIdentification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 port_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Common.UARTDeviceIdentification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Common.UARTDeviceIdentification)
  return false;
#undef DO_
}

void UARTDeviceIdentification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Common.UARTDeviceIdentification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port_id = 1;
  if (this->port_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Common.UARTDeviceIdentification)
}

::google::protobuf::uint8* UARTDeviceIdentification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Common.UARTDeviceIdentification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port_id = 1;
  if (this->port_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Common.UARTDeviceIdentification)
  return target;
}

size_t UARTDeviceIdentification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Common.UARTDeviceIdentification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 port_id = 1;
  if (this->port_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UARTDeviceIdentification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Common.UARTDeviceIdentification)
  GOOGLE_DCHECK_NE(&from, this);
  const UARTDeviceIdentification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UARTDeviceIdentification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Common.UARTDeviceIdentification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Common.UARTDeviceIdentification)
    MergeFrom(*source);
  }
}

void UARTDeviceIdentification::MergeFrom(const UARTDeviceIdentification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Common.UARTDeviceIdentification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.port_id() != 0) {
    set_port_id(from.port_id());
  }
}

void UARTDeviceIdentification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Common.UARTDeviceIdentification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UARTDeviceIdentification::CopyFrom(const UARTDeviceIdentification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Common.UARTDeviceIdentification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UARTDeviceIdentification::IsInitialized() const {
  return true;
}

void UARTDeviceIdentification::Swap(UARTDeviceIdentification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UARTDeviceIdentification::InternalSwap(UARTDeviceIdentification* other) {
  using std::swap;
  swap(port_id_, other->port_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UARTDeviceIdentification::GetMetadata() const {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CountryCode::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CountryCode::kIdentifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CountryCode::CountryCode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Common_2eproto::scc_info_CountryCode.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.Common.CountryCode)
}
CountryCode::CountryCode(const CountryCode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  identifier_ = from.identifier_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.Common.CountryCode)
}

void CountryCode::SharedCtor() {
  identifier_ = 0;
}

CountryCode::~CountryCode() {
  // @@protoc_insertion_point(destructor:Kinova.Api.Common.CountryCode)
  SharedDtor();
}

void CountryCode::SharedDtor() {
}

void CountryCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CountryCode::descriptor() {
  ::protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CountryCode& CountryCode::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Common_2eproto::scc_info_CountryCode.base);
  return *internal_default_instance();
}


void CountryCode::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.Common.CountryCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifier_ = 0;
  _internal_metadata_.Clear();
}

bool CountryCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.Common.CountryCode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.Common.CountryCodeIdentifier identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_identifier(static_cast< ::Kinova::Api::Common::CountryCodeIdentifier >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.Common.CountryCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.Common.CountryCode)
  return false;
#undef DO_
}

void CountryCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.Common.CountryCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.CountryCodeIdentifier identifier = 1;
  if (this->identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->identifier(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.Common.CountryCode)
}

::google::protobuf::uint8* CountryCode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.Common.CountryCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.Common.CountryCodeIdentifier identifier = 1;
  if (this->identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->identifier(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.Common.CountryCode)
  return target;
}

size_t CountryCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.Common.CountryCode)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.Common.CountryCodeIdentifier identifier = 1;
  if (this->identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->identifier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CountryCode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.Common.CountryCode)
  GOOGLE_DCHECK_NE(&from, this);
  const CountryCode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CountryCode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.Common.CountryCode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.Common.CountryCode)
    MergeFrom(*source);
  }
}

void CountryCode::MergeFrom(const CountryCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.Common.CountryCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.identifier() != 0) {
    set_identifier(from.identifier());
  }
}

void CountryCode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.Common.CountryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryCode::CopyFrom(const CountryCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.Common.CountryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryCode::IsInitialized() const {
  return true;
}

void CountryCode::Swap(CountryCode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CountryCode::InternalSwap(CountryCode* other) {
  using std::swap;
  swap(identifier_, other->identifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CountryCode::GetMetadata() const {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Common
}  // namespace Api
}  // namespace Kinova
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Common::DeviceHandle* Arena::CreateMaybeMessage< ::Kinova::Api::Common::DeviceHandle >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Common::DeviceHandle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Common::Empty* Arena::CreateMaybeMessage< ::Kinova::Api::Common::Empty >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Common::Empty >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Common::NotificationOptions* Arena::CreateMaybeMessage< ::Kinova::Api::Common::NotificationOptions >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Common::NotificationOptions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Common::SafetyHandle* Arena::CreateMaybeMessage< ::Kinova::Api::Common::SafetyHandle >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Common::SafetyHandle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Common::NotificationHandle* Arena::CreateMaybeMessage< ::Kinova::Api::Common::NotificationHandle >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Common::NotificationHandle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Common::SafetyNotification* Arena::CreateMaybeMessage< ::Kinova::Api::Common::SafetyNotification >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Common::SafetyNotification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Common::Timestamp* Arena::CreateMaybeMessage< ::Kinova::Api::Common::Timestamp >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Common::Timestamp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Common::UserProfileHandle* Arena::CreateMaybeMessage< ::Kinova::Api::Common::UserProfileHandle >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Common::UserProfileHandle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Common::Connection* Arena::CreateMaybeMessage< ::Kinova::Api::Common::Connection >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Common::Connection >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Common::UARTConfiguration* Arena::CreateMaybeMessage< ::Kinova::Api::Common::UARTConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Common::UARTConfiguration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Common::UARTDeviceIdentification* Arena::CreateMaybeMessage< ::Kinova::Api::Common::UARTDeviceIdentification >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Common::UARTDeviceIdentification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::Common::CountryCode* Arena::CreateMaybeMessage< ::Kinova::Api::Common::CountryCode >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::Common::CountryCode >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
