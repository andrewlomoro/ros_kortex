// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActuatorConfig.proto

#include "ActuatorConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace Kinova {
namespace Api {
namespace ActuatorConfig {
class AxisPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AxisPosition>
      _instance;
} _AxisPosition_default_instance_;
class AxisOffsetsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AxisOffsets>
      _instance;
} _AxisOffsets_default_instance_;
class TorqueCalibrationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TorqueCalibration>
      _instance;
} _TorqueCalibration_default_instance_;
class TorqueOffsetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TorqueOffset>
      _instance;
} _TorqueOffset_default_instance_;
class ControlModeInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlModeInformation>
      _instance;
} _ControlModeInformation_default_instance_;
class ControlLoopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlLoop>
      _instance;
} _ControlLoop_default_instance_;
class LoopSelectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoopSelection>
      _instance;
} _LoopSelection_default_instance_;
class VectorDriveParametersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VectorDriveParameters>
      _instance;
} _VectorDriveParameters_default_instance_;
class EncoderDerivativeParametersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EncoderDerivativeParameters>
      _instance;
} _EncoderDerivativeParameters_default_instance_;
class ControlLoopParametersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlLoopParameters>
      _instance;
} _ControlLoopParameters_default_instance_;
class FrequencyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrequencyResponse>
      _instance;
} _FrequencyResponse_default_instance_;
class StepResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StepResponse>
      _instance;
} _StepResponse_default_instance_;
class RampResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RampResponse>
      _instance;
} _RampResponse_default_instance_;
class CustomDataSelectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomDataSelection>
      _instance;
} _CustomDataSelection_default_instance_;
class CommandModeInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommandModeInformation>
      _instance;
} _CommandModeInformation_default_instance_;
class ServoingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Servoing>
      _instance;
} _Servoing_default_instance_;
class PositionCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PositionCommand>
      _instance;
} _PositionCommand_default_instance_;
class CoggingFeedforwardModeInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CoggingFeedforwardModeInformation>
      _instance;
} _CoggingFeedforwardModeInformation_default_instance_;
}  // namespace ActuatorConfig
}  // namespace Api
}  // namespace Kinova
namespace protobuf_ActuatorConfig_2eproto {
static void InitDefaultsAxisPosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorConfig::_AxisPosition_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorConfig::AxisPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorConfig::AxisPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AxisPosition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAxisPosition}, {}};

static void InitDefaultsAxisOffsets() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorConfig::_AxisOffsets_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorConfig::AxisOffsets();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorConfig::AxisOffsets::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AxisOffsets =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAxisOffsets}, {}};

static void InitDefaultsTorqueCalibration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorConfig::_TorqueCalibration_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorConfig::TorqueCalibration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorConfig::TorqueCalibration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TorqueCalibration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTorqueCalibration}, {}};

static void InitDefaultsTorqueOffset() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorConfig::_TorqueOffset_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorConfig::TorqueOffset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorConfig::TorqueOffset::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TorqueOffset =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTorqueOffset}, {}};

static void InitDefaultsControlModeInformation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorConfig::_ControlModeInformation_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorConfig::ControlModeInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorConfig::ControlModeInformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControlModeInformation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsControlModeInformation}, {}};

static void InitDefaultsControlLoop() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorConfig::_ControlLoop_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorConfig::ControlLoop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorConfig::ControlLoop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControlLoop =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsControlLoop}, {}};

static void InitDefaultsLoopSelection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorConfig::_LoopSelection_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorConfig::LoopSelection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorConfig::LoopSelection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LoopSelection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLoopSelection}, {}};

static void InitDefaultsVectorDriveParameters() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorConfig::_VectorDriveParameters_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorConfig::VectorDriveParameters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorConfig::VectorDriveParameters::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VectorDriveParameters =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVectorDriveParameters}, {}};

static void InitDefaultsEncoderDerivativeParameters() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorConfig::_EncoderDerivativeParameters_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorConfig::EncoderDerivativeParameters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorConfig::EncoderDerivativeParameters::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EncoderDerivativeParameters =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEncoderDerivativeParameters}, {}};

static void InitDefaultsControlLoopParameters() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorConfig::_ControlLoopParameters_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorConfig::ControlLoopParameters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorConfig::ControlLoopParameters::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControlLoopParameters =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsControlLoopParameters}, {}};

static void InitDefaultsFrequencyResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorConfig::_FrequencyResponse_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorConfig::FrequencyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorConfig::FrequencyResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FrequencyResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFrequencyResponse}, {}};

static void InitDefaultsStepResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorConfig::_StepResponse_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorConfig::StepResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorConfig::StepResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StepResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStepResponse}, {}};

static void InitDefaultsRampResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorConfig::_RampResponse_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorConfig::RampResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorConfig::RampResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RampResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRampResponse}, {}};

static void InitDefaultsCustomDataSelection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorConfig::_CustomDataSelection_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorConfig::CustomDataSelection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorConfig::CustomDataSelection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CustomDataSelection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCustomDataSelection}, {}};

static void InitDefaultsCommandModeInformation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorConfig::_CommandModeInformation_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorConfig::CommandModeInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorConfig::CommandModeInformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CommandModeInformation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommandModeInformation}, {}};

static void InitDefaultsServoing() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorConfig::_Servoing_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorConfig::Servoing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorConfig::Servoing::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Servoing =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServoing}, {}};

static void InitDefaultsPositionCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorConfig::_PositionCommand_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorConfig::PositionCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorConfig::PositionCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PositionCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPositionCommand}, {}};

static void InitDefaultsCoggingFeedforwardModeInformation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kinova::Api::ActuatorConfig::_CoggingFeedforwardModeInformation_default_instance_;
    new (ptr) ::Kinova::Api::ActuatorConfig::CoggingFeedforwardModeInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kinova::Api::ActuatorConfig::CoggingFeedforwardModeInformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CoggingFeedforwardModeInformation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCoggingFeedforwardModeInformation}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AxisPosition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AxisOffsets.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TorqueCalibration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TorqueOffset.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControlModeInformation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControlLoop.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoopSelection.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VectorDriveParameters.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EncoderDerivativeParameters.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControlLoopParameters.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FrequencyResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StepResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RampResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CustomDataSelection.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommandModeInformation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Servoing.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PositionCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CoggingFeedforwardModeInformation.base);
}

::google::protobuf::Metadata file_level_metadata[18];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::AxisPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::AxisPosition, position_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::AxisOffsets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::AxisOffsets, absolute_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::AxisOffsets, relative_offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::TorqueCalibration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::TorqueCalibration, global_gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::TorqueCalibration, global_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::TorqueCalibration, gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::TorqueCalibration, offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::TorqueOffset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::TorqueOffset, torque_offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::ControlModeInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::ControlModeInformation, control_mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::ControlLoop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::ControlLoop, control_loop_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::LoopSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::LoopSelection, loop_selection_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::VectorDriveParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::VectorDriveParameters, kpq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::VectorDriveParameters, kiq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::VectorDriveParameters, kpd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::VectorDriveParameters, kid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::EncoderDerivativeParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::EncoderDerivativeParameters, max_window_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::EncoderDerivativeParameters, min_angle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::ControlLoopParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::ControlLoopParameters, loop_selection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::ControlLoopParameters, error_saturation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::ControlLoopParameters, output_saturation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::ControlLoopParameters, kaz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::ControlLoopParameters, kbz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::ControlLoopParameters, error_dead_band_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::FrequencyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::FrequencyResponse, loop_selection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::FrequencyResponse, min_frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::FrequencyResponse, max_frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::FrequencyResponse, amplitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::FrequencyResponse, duration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::StepResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::StepResponse, loop_selection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::StepResponse, amplitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::StepResponse, step_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::StepResponse, duration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::RampResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::RampResponse, loop_selection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::RampResponse, slope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::RampResponse, ramp_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::RampResponse, duration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::CustomDataSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::CustomDataSelection, channel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::CommandModeInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::CommandModeInformation, command_mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::Servoing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::Servoing, enabled_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::PositionCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::PositionCommand, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::PositionCommand, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::PositionCommand, acceleration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::CoggingFeedforwardModeInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kinova::Api::ActuatorConfig::CoggingFeedforwardModeInformation, cogging_feedforward_mode_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Kinova::Api::ActuatorConfig::AxisPosition)},
  { 6, -1, sizeof(::Kinova::Api::ActuatorConfig::AxisOffsets)},
  { 13, -1, sizeof(::Kinova::Api::ActuatorConfig::TorqueCalibration)},
  { 22, -1, sizeof(::Kinova::Api::ActuatorConfig::TorqueOffset)},
  { 28, -1, sizeof(::Kinova::Api::ActuatorConfig::ControlModeInformation)},
  { 34, -1, sizeof(::Kinova::Api::ActuatorConfig::ControlLoop)},
  { 40, -1, sizeof(::Kinova::Api::ActuatorConfig::LoopSelection)},
  { 46, -1, sizeof(::Kinova::Api::ActuatorConfig::VectorDriveParameters)},
  { 55, -1, sizeof(::Kinova::Api::ActuatorConfig::EncoderDerivativeParameters)},
  { 62, -1, sizeof(::Kinova::Api::ActuatorConfig::ControlLoopParameters)},
  { 73, -1, sizeof(::Kinova::Api::ActuatorConfig::FrequencyResponse)},
  { 83, -1, sizeof(::Kinova::Api::ActuatorConfig::StepResponse)},
  { 92, -1, sizeof(::Kinova::Api::ActuatorConfig::RampResponse)},
  { 101, -1, sizeof(::Kinova::Api::ActuatorConfig::CustomDataSelection)},
  { 107, -1, sizeof(::Kinova::Api::ActuatorConfig::CommandModeInformation)},
  { 113, -1, sizeof(::Kinova::Api::ActuatorConfig::Servoing)},
  { 119, -1, sizeof(::Kinova::Api::ActuatorConfig::PositionCommand)},
  { 127, -1, sizeof(::Kinova::Api::ActuatorConfig::CoggingFeedforwardModeInformation)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorConfig::_AxisPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorConfig::_AxisOffsets_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorConfig::_TorqueCalibration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorConfig::_TorqueOffset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorConfig::_ControlModeInformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorConfig::_ControlLoop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorConfig::_LoopSelection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorConfig::_VectorDriveParameters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorConfig::_EncoderDerivativeParameters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorConfig::_ControlLoopParameters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorConfig::_FrequencyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorConfig::_StepResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorConfig::_RampResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorConfig::_CustomDataSelection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorConfig::_CommandModeInformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorConfig::_Servoing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorConfig::_PositionCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Kinova::Api::ActuatorConfig::_CoggingFeedforwardModeInformation_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ActuatorConfig.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024ActuatorConfig.proto\022\031Kinova.Api.Actua"
      "torConfig\032\014Common.proto\" \n\014AxisPosition\022"
      "\020\n\010position\030\001 \001(\002\"\?\n\013AxisOffsets\022\027\n\017abso"
      "lute_offset\030\001 \001(\002\022\027\n\017relative_offset\030\002 \001"
      "(\002\"]\n\021TorqueCalibration\022\023\n\013global_gain\030\001"
      " \001(\002\022\025\n\rglobal_offset\030\002 \001(\002\022\014\n\004gain\030\003 \003("
      "\002\022\016\n\006offset\030\004 \003(\002\"%\n\014TorqueOffset\022\025\n\rtor"
      "que_offset\030\001 \001(\002\"V\n\026ControlModeInformati"
      "on\022<\n\014control_mode\030\001 \001(\0162&.Kinova.Api.Ac"
      "tuatorConfig.ControlMode\"#\n\013ControlLoop\022"
      "\024\n\014control_loop\030\001 \001(\007\"X\n\rLoopSelection\022G"
      "\n\016loop_selection\030\001 \001(\0162/.Kinova.Api.Actu"
      "atorConfig.ControlLoopSelection\"K\n\025Vecto"
      "rDriveParameters\022\013\n\003kpq\030\001 \001(\002\022\013\n\003kiq\030\002 \001"
      "(\002\022\013\n\003kpd\030\003 \001(\002\022\013\n\003kid\030\004 \001(\002\"J\n\033EncoderD"
      "erivativeParameters\022\030\n\020max_window_width\030"
      "\001 \001(\r\022\021\n\tmin_angle\030\002 \001(\002\"\310\001\n\025ControlLoop"
      "Parameters\022G\n\016loop_selection\030\001 \001(\0162/.Kin"
      "ova.Api.ActuatorConfig.ControlLoopSelect"
      "ion\022\030\n\020error_saturation\030\002 \001(\002\022\031\n\021output_"
      "saturation\030\003 \001(\002\022\013\n\003kAz\030\004 \003(\002\022\013\n\003kBz\030\005 \003"
      "(\002\022\027\n\017error_dead_band\030\006 \001(\002\"\257\001\n\021Frequenc"
      "yResponse\022G\n\016loop_selection\030\001 \001(\0162/.Kino"
      "va.Api.ActuatorConfig.ControlLoopSelecti"
      "on\022\025\n\rmin_frequency\030\002 \001(\002\022\025\n\rmax_frequen"
      "cy\030\003 \001(\002\022\021\n\tamplitude\030\004 \001(\002\022\020\n\010duration\030"
      "\005 \001(\002\"\220\001\n\014StepResponse\022G\n\016loop_selection"
      "\030\001 \001(\0162/.Kinova.Api.ActuatorConfig.Contr"
      "olLoopSelection\022\021\n\tamplitude\030\002 \001(\002\022\022\n\nst"
      "ep_delay\030\003 \001(\002\022\020\n\010duration\030\004 \001(\002\"\214\001\n\014Ram"
      "pResponse\022G\n\016loop_selection\030\001 \001(\0162/.Kino"
      "va.Api.ActuatorConfig.ControlLoopSelecti"
      "on\022\r\n\005slope\030\002 \001(\002\022\022\n\nramp_delay\030\003 \001(\002\022\020\n"
      "\010duration\030\004 \001(\002\"R\n\023CustomDataSelection\022;"
      "\n\007channel\030\001 \003(\0162*.Kinova.Api.ActuatorCon"
      "fig.CustomDataIndex\"V\n\026CommandModeInform"
      "ation\022<\n\014command_mode\030\001 \001(\0162&.Kinova.Api"
      ".ActuatorConfig.CommandMode\"\033\n\010Servoing\022"
      "\017\n\007enabled\030\001 \001(\010\"K\n\017PositionCommand\022\020\n\010p"
      "osition\030\001 \001(\002\022\020\n\010velocity\030\002 \001(\002\022\024\n\014accel"
      "eration\030\003 \001(\002\"x\n!CoggingFeedforwardModeI"
      "nformation\022S\n\030cogging_feedforward_mode\030\001"
      " \001(\01621.Kinova.Api.ActuatorConfig.Cogging"
      "FeedforwardMode*5\n\016ServiceVersion\022\016\n\nRES"
      "ERVED_0\020\000\022\023\n\017CURRENT_VERSION\020\001*7\n\017Safety"
      "LimitType\022\021\n\rMAXIMAL_LIMIT\020\000\022\021\n\rMINIMAL_"
      "LIMIT\020\001*r\n\013ControlMode\022\010\n\004NONE\020\000\022\014\n\010POSI"
      "TION\020\001\022\014\n\010VELOCITY\020\002\022\n\n\006TORQUE\020\003\022\013\n\007CURR"
      "ENT\020\004\022\n\n\006CUSTOM\020\005\022\030\n\024TORQUE_HIGH_VELOCIT"
      "Y\020\006*\265\001\n\013CommandMode\022\n\n\006CYCLIC\020\000\022\026\n\022ASYNC"
      "_CYCLIC_FLAGS\020\001\022\t\n\005ASYNC\020\002\022%\n!CYCLIC_JIT"
      "TERCOMPENSATED_POSITION\020\003\022%\n!CYCLIC_JITT"
      "ERCOMPENSATED_VELOCITY\020\004\022)\n%CYCLIC_JITTE"
      "RCOMPENSATED_ACCELERATION\020\005*\271\001\n\024ControlL"
      "oopSelection\022\014\n\010RESERVED\020\000\022\022\n\016JOINT_POSI"
      "TION\020\001\022\022\n\016MOTOR_POSITION\020\002\022\022\n\016JOINT_VELO"
      "CITY\020\004\022\022\n\016MOTOR_VELOCITY\020\010\022\020\n\014JOINT_TORQ"
      "UE\020\020\022\021\n\rMOTOR_CURRENT\020 \022\036\n\032JOINT_TORQUE_"
      "HIGH_VELOCITY\020@*c\n\026CoggingFeedforwardMod"
      "e\022\023\n\017FEEDFORWARD_OFF\020\000\022\030\n\024FEEDFORWARD_AD"
      "APTIVE\020\001\022\032\n\026FEEDFORWARD_CALIBRATED\020\002*\206\007\n"
      "\025SafetyIdentifierBankA\0221\n-UNSPECIFIED_AC"
      "TUATOR_SAFETY_IDENTIFIER_BANK_A\020\000\022\023\n\017FOL"
      "LOWING_ERROR\020\001\022\024\n\020MAXIMUM_VELOCITY\020\002\022\024\n\020"
      "JOINT_LIMIT_HIGH\020\004\022\023\n\017JOINT_LIMIT_LOW\020\010\022"
      "\031\n\025STRAIN_GAUGE_MISMATCH\020\020\022\022\n\016MAXIMUM_TO"
      "RQUE\020 \022 \n\034UNRELIABLE_ABSOLUTE_POSITION\020@"
      "\022\026\n\021MAGNETIC_POSITION\020\200\001\022\022\n\rHALL_POSITIO"
      "N\020\200\002\022\022\n\rHALL_SEQUENCE\020\200\004\022 \n\033INPUT_ENCODE"
      "R_HALL_MISMATCH\020\200\010\022!\n\034INPUT_ENCODER_INDE"
      "X_MISMATCH\020\200\020\022$\n\037INPUT_ENCODER_MAGNETIC_"
      "MISMATCH\020\200 \022\032\n\025MAXIMUM_MOTOR_CURRENT\020\200@\022"
      "\034\n\026MOTOR_CURRENT_MISMATCH\020\200\200\001\022\025\n\017MAXIMUM"
      "_VOLTAGE\020\200\200\002\022\025\n\017MINIMUM_VOLTAGE\020\200\200\004\022\037\n\031M"
      "AXIMUM_MOTOR_TEMPERATURE\020\200\200\010\022\036\n\030MAXIMUM_"
      "CORE_TEMPERATURE\020\200\200\020\022#\n\035NON_VOLATILE_MEM"
      "ORY_CORRUPTED\020\200\200 \022\030\n\022MOTOR_DRIVER_FAULT\020"
      "\200\200@\022\036\n\027EMERGENCY_LINE_ASSERTED\020\200\200\200\001\022\036\n\027C"
      "OMMUNICATION_TICK_LOST\020\200\200\200\002\022\031\n\022WATCHDOG_"
      "TRIGGERED\020\200\200\200\004\022#\n\034UNRELIABLE_CAPACITIVE_"
      "SENSOR\020\200\200\200\010\022\034\n\025UNEXPECTED_GEAR_RATIO\020\200\200\200"
      "\020\022\035\n\026HALL_MAGNETIC_MISMATCH\020\200\200\200 \022\030\n\021BRAK"
      "E_DRIVE_FAULT\020\200\200\200@\022)\n!BRAKE_RELEASE_MOTI"
      "ON_OUT_OF_RANGE\020\200\200\200\200\001*\314\027\n\017CustomDataInde"
      "x\022\033\n\027NO_CUSTOM_DATA_SELECTED\020\000\022\024\n\020UINT32"
      "_TEST_RAMP\020\001\022\034\n\030UINT32_MOTOR_ENCODER_RAW"
      "\020\002\022\034\n\030UINT32_JOINT_ENCODER_RAW\020\003\022\035\n\031FLOA"
      "T_TEMPERATURE_PHASE_0\020\004\022\035\n\031FLOAT_TEMPERA"
      "TURE_PHASE_1\020\005\022\035\n\031FLOAT_TEMPERATURE_PHAS"
      "E_2\020\006\022\035\n\031INT32_TORQUE_SENSOR_RAW_0\020\007\022\035\n\031"
      "INT32_TORQUE_SENSOR_RAW_1\020\010\022\035\n\031INT32_TOR"
      "QUE_SENSOR_RAW_2\020\t\022\035\n\031INT32_TORQUE_SENSO"
      "R_RAW_3\020\n\022\031\n\025FLOAT_TORQUE_SENSOR_0\020\013\022\031\n\025"
      "FLOAT_TORQUE_SENSOR_1\020\014\022\031\n\025FLOAT_TORQUE_"
      "SENSOR_2\020\r\022\031\n\025FLOAT_TORQUE_SENSOR_3\020\016\0222\n"
      ".UINT32_MOTOR_ENCODER_RAW_LATCH_ON_INDEX"
      "_RISING\020\017\0222\n.UINT32_JOINT_ENCODER_RAW_LA"
      "TCH_ON_INDEX_RISING\020\020\022\'\n#UINT32_ABSOLUTE"
      "_POSITION_SENSOR_RAW\020\021\022\"\n\036FLOAT_ABSOLUTE"
      "_POSITION_SENSOR\020\022\022*\n&FLOAT_CONTROL_POSI"
      "TION_JOINT_REQUESTED\020\023\022\024\n\020UINT32_JIG_FLA"
      "GS\020\024\022\035\n\031UINT32_TICK_MOTOR_CONTROL\020\025\022\035\n\031U"
      "INT32_TICK_JOINT_CONTROL\020\026\022#\n\037UINT32_IND"
      "EX_TICK_MOTOR_CONTROL\020\027\022#\n\037UINT32_INDEX_"
      "TICK_JOINT_CONTROL\020\030\022\030\n\024FLOAT_ACCELERATI"
      "ON_X\020\031\022\030\n\024FLOAT_ACCELERATION_Y\020\032\022\030\n\024FLOA"
      "T_ACCELERATION_Z\020\033\022\030\n\024FLOAT_ANGULAR_RATE"
      "_X\020\034\022\030\n\024FLOAT_ANGULAR_RATE_Y\020\035\022\030\n\024FLOAT_"
      "ANGULAR_RATE_Z\020\036\022\034\n\030FLOAT_POSITION_MOTOR"
      "_CMD\020\037\022\034\n\030FLOAT_VELOCITY_MOTOR_CMD\020 \022\030\n\024"
      "FLOAT_POSITION_MOTOR\020!\022\030\n\024FLOAT_VELOCITY"
      "_MOTOR\020\"\022 \n\034UINT32_COMMUNICATIONS_JITTER"
      "\020#\022\030\n\024FLOAT_TORQUE_AVERAGE\020$\022\027\n\023FLOAT_CU"
      "RRENT_MOTOR\020%\022\031\n\025FLOAT_VOLTAGE_DIGITAL\020&"
      "\022#\n\037FLOAT_TEMPERATURE_MOTOR_CELSIUS\020\'\022\"\n"
      "\036FLOAT_TEMPERATURE_CORE_CELSIUS\020(\022\022\n\016UIN"
      "T32_FAULT_A\020)\022\022\n\016UINT32_FAULT_B\020*\022\024\n\020UIN"
      "T32_WARNING_A\020+\022\024\n\020UINT32_WARNING_B\020,\022\035\n"
      "\031FLOAT_POSITION_FROM_HALLS\020-\022\031\n\025FLOAT_PH"
      "ASE_CURRENT_0\020.\022\031\n\025FLOAT_PHASE_CURRENT_1"
      "\020/\022\031\n\025FLOAT_PHASE_CURRENT_2\0200\022\025\n\021FLOAT_P"
      "HASE_PWM_0\0201\022\025\n\021FLOAT_PHASE_PWM_1\0202\022\025\n\021F"
      "LOAT_PHASE_PWM_2\0203\022 \n\034FLOAT_MOTOR_ELECTR"
      "ICAL_ANGLE\0204\022\033\n\027FLOAT_CURRENT_MOTOR_CMD\020"
      "5\022\032\n\026FLOAT_TORQUE_JOINT_CMD\0206\022\034\n\030FLOAT_P"
      "OSITION_UNWRAPPED\0207\022\030\n\024UINT32_HALL_SENSO"
      "R_0\0208\022\030\n\024UINT32_HALL_SENSOR_1\0209\022\030\n\024UINT3"
      "2_HALL_SENSOR_2\020:\022\036\n\032INT32_HALL_SENSOR_S"
      "CALED_0\020;\022\036\n\032INT32_HALL_SENSOR_SCALED_1\020"
      "<\022\036\n\032INT32_HALL_SENSOR_SCALED_2\020=\022!\n\035FLO"
      "AT_COGGING_COEFFICIENT_A_0\020>\022!\n\035FLOAT_CO"
      "GGING_COEFFICIENT_A_1\020\?\022!\n\035FLOAT_COGGING"
      "_COEFFICIENT_A_2\020@\022!\n\035FLOAT_COGGING_COEF"
      "FICIENT_A_3\020A\022!\n\035FLOAT_COGGING_COEFFICIE"
      "NT_A_4\020B\022!\n\035FLOAT_COGGING_COEFFICIENT_A_"
      "5\020C\022!\n\035FLOAT_COGGING_COEFFICIENT_A_6\020D\022!"
      "\n\035FLOAT_COGGING_COEFFICIENT_A_7\020E\022!\n\035FLO"
      "AT_COGGING_COEFFICIENT_A_8\020F\022!\n\035FLOAT_CO"
      "GGING_COEFFICIENT_A_9\020G\022\"\n\036FLOAT_COGGING"
      "_COEFFICIENT_A_10\020H\022\"\n\036FLOAT_COGGING_COE"
      "FFICIENT_A_11\020I\022\"\n\036FLOAT_COGGING_COEFFIC"
      "IENT_A_12\020J\022\"\n\036FLOAT_COGGING_COEFFICIENT"
      "_A_13\020K\022\"\n\036FLOAT_COGGING_COEFFICIENT_A_1"
      "4\020L\022\"\n\036FLOAT_COGGING_COEFFICIENT_A_15\020M\022"
      "!\n\035FLOAT_COGGING_COEFFICIENT_B_0\020N\022!\n\035FL"
      "OAT_COGGING_COEFFICIENT_B_1\020O\022!\n\035FLOAT_C"
      "OGGING_COEFFICIENT_B_2\020P\022!\n\035FLOAT_COGGIN"
      "G_COEFFICIENT_B_3\020Q\022!\n\035FLOAT_COGGING_COE"
      "FFICIENT_B_4\020R\022!\n\035FLOAT_COGGING_COEFFICI"
      "ENT_B_5\020S\022!\n\035FLOAT_COGGING_COEFFICIENT_B"
      "_6\020T\022!\n\035FLOAT_COGGING_COEFFICIENT_B_7\020U\022"
      "!\n\035FLOAT_COGGING_COEFFICIENT_B_8\020V\022!\n\035FL"
      "OAT_COGGING_COEFFICIENT_B_9\020W\022\"\n\036FLOAT_C"
      "OGGING_COEFFICIENT_B_10\020X\022\"\n\036FLOAT_COGGI"
      "NG_COEFFICIENT_B_11\020Y\022\"\n\036FLOAT_COGGING_C"
      "OEFFICIENT_B_12\020Z\022\"\n\036FLOAT_COGGING_COEFF"
      "ICIENT_B_13\020[\022\"\n\036FLOAT_COGGING_COEFFICIE"
      "NT_B_14\020\\\022\"\n\036FLOAT_COGGING_COEFFICIENT_B"
      "_15\020]\022%\n!FLOAT_CURRENT_COGGING_FEEDFORWA"
      "RD\020^2\307\027\n\016ActuatorConfig\022R\n\016GetAxisOffset"
      "s\022\030.Kinova.Api.Common.Empty\032&.Kinova.Api"
      ".ActuatorConfig.AxisOffsets\022S\n\016SetAxisOf"
      "fsets\022\'.Kinova.Api.ActuatorConfig.AxisPo"
      "sition\032\030.Kinova.Api.Common.Empty\022_\n\025Read"
      "TorqueCalibration\022\030.Kinova.Api.Common.Em"
      "pty\032,.Kinova.Api.ActuatorConfig.TorqueCa"
      "libration\022`\n\026WriteTorqueCalibration\022,.Ki"
      "nova.Api.ActuatorConfig.TorqueCalibratio"
      "n\032\030.Kinova.Api.Common.Empty\022T\n\017SetTorque"
      "Offset\022\'.Kinova.Api.ActuatorConfig.Torqu"
      "eOffset\032\030.Kinova.Api.Common.Empty\022]\n\016Get"
      "ControlMode\022\030.Kinova.Api.Common.Empty\0321."
      "Kinova.Api.ActuatorConfig.ControlModeInf"
      "ormation\022]\n\016SetControlMode\0221.Kinova.Api."
      "ActuatorConfig.ControlModeInformation\032\030."
      "Kinova.Api.Common.Empty\022[\n\027GetActivatedC"
      "ontrolLoop\022\030.Kinova.Api.Common.Empty\032&.K"
      "inova.Api.ActuatorConfig.ControlLoop\022[\n\027"
      "SetActivatedControlLoop\022&.Kinova.Api.Act"
      "uatorConfig.ControlLoop\032\030.Kinova.Api.Com"
      "mon.Empty\022f\n\030GetVectorDriveParameters\022\030."
      "Kinova.Api.Common.Empty\0320.Kinova.Api.Act"
      "uatorConfig.VectorDriveParameters\022f\n\030Set"
      "VectorDriveParameters\0220.Kinova.Api.Actua"
      "torConfig.VectorDriveParameters\032\030.Kinova"
      ".Api.Common.Empty\022r\n\036GetEncoderDerivativ"
      "eParameters\022\030.Kinova.Api.Common.Empty\0326."
      "Kinova.Api.ActuatorConfig.EncoderDerivat"
      "iveParameters\022r\n\036SetEncoderDerivativePar"
      "ameters\0226.Kinova.Api.ActuatorConfig.Enco"
      "derDerivativeParameters\032\030.Kinova.Api.Com"
      "mon.Empty\022v\n\030GetControlLoopParameters\022(."
      "Kinova.Api.ActuatorConfig.LoopSelection\032"
      "0.Kinova.Api.ActuatorConfig.ControlLoopP"
      "arameters\022f\n\030SetControlLoopParameters\0220."
      "Kinova.Api.ActuatorConfig.ControlLoopPar"
      "ameters\032\030.Kinova.Api.Common.Empty\022`\n\026Sta"
      "rtFrequencyResponse\022,.Kinova.Api.Actuato"
      "rConfig.FrequencyResponse\032\030.Kinova.Api.C"
      "ommon.Empty\022K\n\025StopFrequencyResponse\022\030.K"
      "inova.Api.Common.Empty\032\030.Kinova.Api.Comm"
      "on.Empty\022V\n\021StartStepResponse\022\'.Kinova.A"
      "pi.ActuatorConfig.StepResponse\032\030.Kinova."
      "Api.Common.Empty\022F\n\020StopStepResponse\022\030.K"
      "inova.Api.Common.Empty\032\030.Kinova.Api.Comm"
      "on.Empty\022V\n\021StartRampResponse\022\'.Kinova.A"
      "pi.ActuatorConfig.RampResponse\032\030.Kinova."
      "Api.Common.Empty\022F\n\020StopRampResponse\022\030.K"
      "inova.Api.Common.Empty\032\030.Kinova.Api.Comm"
      "on.Empty\022\\\n\020SelectCustomData\022..Kinova.Ap"
      "i.ActuatorConfig.CustomDataSelection\032\030.K"
      "inova.Api.Common.Empty\022a\n\025GetSelectedCus"
      "tomData\022\030.Kinova.Api.Common.Empty\032..Kino"
      "va.Api.ActuatorConfig.CustomDataSelectio"
      "n\022]\n\016SetCommandMode\0221.Kinova.Api.Actuato"
      "rConfig.CommandModeInformation\032\030.Kinova."
      "Api.Common.Empty\022A\n\013ClearFaults\022\030.Kinova"
      ".Api.Common.Empty\032\030.Kinova.Api.Common.Em"
      "pty\022L\n\013SetServoing\022#.Kinova.Api.Actuator"
      "Config.Servoing\032\030.Kinova.Api.Common.Empt"
      "y\022V\n\016MoveToPosition\022*.Kinova.Api.Actuato"
      "rConfig.PositionCommand\032\030.Kinova.Api.Com"
      "mon.Empty\022]\n\016GetCommandMode\022\030.Kinova.Api"
      ".Common.Empty\0321.Kinova.Api.ActuatorConfi"
      "g.CommandModeInformation\022L\n\013GetServoing\022"
      "\030.Kinova.Api.Common.Empty\032#.Kinova.Api.A"
      "ctuatorConfig.Servoing\022T\n\017GetTorqueOffse"
      "t\022\030.Kinova.Api.Common.Empty\032\'.Kinova.Api"
      ".ActuatorConfig.TorqueOffset\022s\n\031SetCoggi"
      "ngFeedforwardMode\022<.Kinova.Api.ActuatorC"
      "onfig.CoggingFeedforwardModeInformation\032"
      "\030.Kinova.Api.Common.Empty\022s\n\031GetCoggingF"
      "eedforwardMode\022\030.Kinova.Api.Common.Empty"
      "\032<.Kinova.Api.ActuatorConfig.CoggingFeed"
      "forwardModeInformationP\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 9392);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ActuatorConfig.proto", &protobuf_RegisterTypes);
  ::protobuf_Common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ActuatorConfig_2eproto
namespace Kinova {
namespace Api {
namespace ActuatorConfig {
const ::google::protobuf::EnumDescriptor* ServiceVersion_descriptor() {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ActuatorConfig_2eproto::file_level_enum_descriptors[0];
}
bool ServiceVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SafetyLimitType_descriptor() {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ActuatorConfig_2eproto::file_level_enum_descriptors[1];
}
bool SafetyLimitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ControlMode_descriptor() {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ActuatorConfig_2eproto::file_level_enum_descriptors[2];
}
bool ControlMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CommandMode_descriptor() {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ActuatorConfig_2eproto::file_level_enum_descriptors[3];
}
bool CommandMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ControlLoopSelection_descriptor() {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ActuatorConfig_2eproto::file_level_enum_descriptors[4];
}
bool ControlLoopSelection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CoggingFeedforwardMode_descriptor() {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ActuatorConfig_2eproto::file_level_enum_descriptors[5];
}
bool CoggingFeedforwardMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SafetyIdentifierBankA_descriptor() {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ActuatorConfig_2eproto::file_level_enum_descriptors[6];
}
bool SafetyIdentifierBankA_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
    case 134217728:
    case 268435456:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CustomDataIndex_descriptor() {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ActuatorConfig_2eproto::file_level_enum_descriptors[7];
}
bool CustomDataIndex_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AxisPosition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AxisPosition::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AxisPosition::AxisPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorConfig_2eproto::scc_info_AxisPosition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorConfig.AxisPosition)
}
AxisPosition::AxisPosition(const AxisPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  position_ = from.position_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorConfig.AxisPosition)
}

void AxisPosition::SharedCtor() {
  position_ = 0;
}

AxisPosition::~AxisPosition() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorConfig.AxisPosition)
  SharedDtor();
}

void AxisPosition::SharedDtor() {
}

void AxisPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AxisPosition::descriptor() {
  ::protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AxisPosition& AxisPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorConfig_2eproto::scc_info_AxisPosition.base);
  return *internal_default_instance();
}


void AxisPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorConfig.AxisPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_ = 0;
  _internal_metadata_.Clear();
}

bool AxisPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorConfig.AxisPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorConfig.AxisPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorConfig.AxisPosition)
  return false;
#undef DO_
}

void AxisPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorConfig.AxisPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float position = 1;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->position(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorConfig.AxisPosition)
}

::google::protobuf::uint8* AxisPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorConfig.AxisPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float position = 1;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->position(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorConfig.AxisPosition)
  return target;
}

size_t AxisPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorConfig.AxisPosition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float position = 1;
  if (this->position() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AxisPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorConfig.AxisPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const AxisPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AxisPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorConfig.AxisPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorConfig.AxisPosition)
    MergeFrom(*source);
  }
}

void AxisPosition::MergeFrom(const AxisPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorConfig.AxisPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.position() != 0) {
    set_position(from.position());
  }
}

void AxisPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorConfig.AxisPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AxisPosition::CopyFrom(const AxisPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorConfig.AxisPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AxisPosition::IsInitialized() const {
  return true;
}

void AxisPosition::Swap(AxisPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AxisPosition::InternalSwap(AxisPosition* other) {
  using std::swap;
  swap(position_, other->position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AxisPosition::GetMetadata() const {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AxisOffsets::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AxisOffsets::kAbsoluteOffsetFieldNumber;
const int AxisOffsets::kRelativeOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AxisOffsets::AxisOffsets()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorConfig_2eproto::scc_info_AxisOffsets.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorConfig.AxisOffsets)
}
AxisOffsets::AxisOffsets(const AxisOffsets& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&absolute_offset_, &from.absolute_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&relative_offset_) -
    reinterpret_cast<char*>(&absolute_offset_)) + sizeof(relative_offset_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorConfig.AxisOffsets)
}

void AxisOffsets::SharedCtor() {
  ::memset(&absolute_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_offset_) -
      reinterpret_cast<char*>(&absolute_offset_)) + sizeof(relative_offset_));
}

AxisOffsets::~AxisOffsets() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorConfig.AxisOffsets)
  SharedDtor();
}

void AxisOffsets::SharedDtor() {
}

void AxisOffsets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AxisOffsets::descriptor() {
  ::protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AxisOffsets& AxisOffsets::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorConfig_2eproto::scc_info_AxisOffsets.base);
  return *internal_default_instance();
}


void AxisOffsets::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorConfig.AxisOffsets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&absolute_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_offset_) -
      reinterpret_cast<char*>(&absolute_offset_)) + sizeof(relative_offset_));
  _internal_metadata_.Clear();
}

bool AxisOffsets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorConfig.AxisOffsets)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float absolute_offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &absolute_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relative_offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorConfig.AxisOffsets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorConfig.AxisOffsets)
  return false;
#undef DO_
}

void AxisOffsets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorConfig.AxisOffsets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float absolute_offset = 1;
  if (this->absolute_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->absolute_offset(), output);
  }

  // float relative_offset = 2;
  if (this->relative_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->relative_offset(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorConfig.AxisOffsets)
}

::google::protobuf::uint8* AxisOffsets::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorConfig.AxisOffsets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float absolute_offset = 1;
  if (this->absolute_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->absolute_offset(), target);
  }

  // float relative_offset = 2;
  if (this->relative_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->relative_offset(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorConfig.AxisOffsets)
  return target;
}

size_t AxisOffsets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorConfig.AxisOffsets)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float absolute_offset = 1;
  if (this->absolute_offset() != 0) {
    total_size += 1 + 4;
  }

  // float relative_offset = 2;
  if (this->relative_offset() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AxisOffsets::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorConfig.AxisOffsets)
  GOOGLE_DCHECK_NE(&from, this);
  const AxisOffsets* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AxisOffsets>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorConfig.AxisOffsets)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorConfig.AxisOffsets)
    MergeFrom(*source);
  }
}

void AxisOffsets::MergeFrom(const AxisOffsets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorConfig.AxisOffsets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.absolute_offset() != 0) {
    set_absolute_offset(from.absolute_offset());
  }
  if (from.relative_offset() != 0) {
    set_relative_offset(from.relative_offset());
  }
}

void AxisOffsets::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorConfig.AxisOffsets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AxisOffsets::CopyFrom(const AxisOffsets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorConfig.AxisOffsets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AxisOffsets::IsInitialized() const {
  return true;
}

void AxisOffsets::Swap(AxisOffsets* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AxisOffsets::InternalSwap(AxisOffsets* other) {
  using std::swap;
  swap(absolute_offset_, other->absolute_offset_);
  swap(relative_offset_, other->relative_offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AxisOffsets::GetMetadata() const {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TorqueCalibration::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TorqueCalibration::kGlobalGainFieldNumber;
const int TorqueCalibration::kGlobalOffsetFieldNumber;
const int TorqueCalibration::kGainFieldNumber;
const int TorqueCalibration::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TorqueCalibration::TorqueCalibration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorConfig_2eproto::scc_info_TorqueCalibration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorConfig.TorqueCalibration)
}
TorqueCalibration::TorqueCalibration(const TorqueCalibration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      gain_(from.gain_),
      offset_(from.offset_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&global_gain_, &from.global_gain_,
    static_cast<size_t>(reinterpret_cast<char*>(&global_offset_) -
    reinterpret_cast<char*>(&global_gain_)) + sizeof(global_offset_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorConfig.TorqueCalibration)
}

void TorqueCalibration::SharedCtor() {
  ::memset(&global_gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&global_offset_) -
      reinterpret_cast<char*>(&global_gain_)) + sizeof(global_offset_));
}

TorqueCalibration::~TorqueCalibration() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorConfig.TorqueCalibration)
  SharedDtor();
}

void TorqueCalibration::SharedDtor() {
}

void TorqueCalibration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TorqueCalibration::descriptor() {
  ::protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TorqueCalibration& TorqueCalibration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorConfig_2eproto::scc_info_TorqueCalibration.base);
  return *internal_default_instance();
}


void TorqueCalibration::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorConfig.TorqueCalibration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gain_.Clear();
  offset_.Clear();
  ::memset(&global_gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&global_offset_) -
      reinterpret_cast<char*>(&global_gain_)) + sizeof(global_offset_));
  _internal_metadata_.Clear();
}

bool TorqueCalibration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorConfig.TorqueCalibration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float global_gain = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &global_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float global_offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &global_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float gain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_gain())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_gain())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_offset())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_offset())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorConfig.TorqueCalibration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorConfig.TorqueCalibration)
  return false;
#undef DO_
}

void TorqueCalibration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorConfig.TorqueCalibration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float global_gain = 1;
  if (this->global_gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->global_gain(), output);
  }

  // float global_offset = 2;
  if (this->global_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->global_offset(), output);
  }

  // repeated float gain = 3;
  if (this->gain_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _gain_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->gain().data(), this->gain_size(), output);
  }

  // repeated float offset = 4;
  if (this->offset_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _offset_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->offset().data(), this->offset_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorConfig.TorqueCalibration)
}

::google::protobuf::uint8* TorqueCalibration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorConfig.TorqueCalibration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float global_gain = 1;
  if (this->global_gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->global_gain(), target);
  }

  // float global_offset = 2;
  if (this->global_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->global_offset(), target);
  }

  // repeated float gain = 3;
  if (this->gain_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _gain_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->gain_, target);
  }

  // repeated float offset = 4;
  if (this->offset_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _offset_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->offset_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorConfig.TorqueCalibration)
  return target;
}

size_t TorqueCalibration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorConfig.TorqueCalibration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float gain = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->gain_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _gain_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float offset = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->offset_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _offset_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // float global_gain = 1;
  if (this->global_gain() != 0) {
    total_size += 1 + 4;
  }

  // float global_offset = 2;
  if (this->global_offset() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TorqueCalibration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorConfig.TorqueCalibration)
  GOOGLE_DCHECK_NE(&from, this);
  const TorqueCalibration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TorqueCalibration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorConfig.TorqueCalibration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorConfig.TorqueCalibration)
    MergeFrom(*source);
  }
}

void TorqueCalibration::MergeFrom(const TorqueCalibration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorConfig.TorqueCalibration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gain_.MergeFrom(from.gain_);
  offset_.MergeFrom(from.offset_);
  if (from.global_gain() != 0) {
    set_global_gain(from.global_gain());
  }
  if (from.global_offset() != 0) {
    set_global_offset(from.global_offset());
  }
}

void TorqueCalibration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorConfig.TorqueCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TorqueCalibration::CopyFrom(const TorqueCalibration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorConfig.TorqueCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TorqueCalibration::IsInitialized() const {
  return true;
}

void TorqueCalibration::Swap(TorqueCalibration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TorqueCalibration::InternalSwap(TorqueCalibration* other) {
  using std::swap;
  gain_.InternalSwap(&other->gain_);
  offset_.InternalSwap(&other->offset_);
  swap(global_gain_, other->global_gain_);
  swap(global_offset_, other->global_offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TorqueCalibration::GetMetadata() const {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TorqueOffset::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TorqueOffset::kTorqueOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TorqueOffset::TorqueOffset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorConfig_2eproto::scc_info_TorqueOffset.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorConfig.TorqueOffset)
}
TorqueOffset::TorqueOffset(const TorqueOffset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  torque_offset_ = from.torque_offset_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorConfig.TorqueOffset)
}

void TorqueOffset::SharedCtor() {
  torque_offset_ = 0;
}

TorqueOffset::~TorqueOffset() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorConfig.TorqueOffset)
  SharedDtor();
}

void TorqueOffset::SharedDtor() {
}

void TorqueOffset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TorqueOffset::descriptor() {
  ::protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TorqueOffset& TorqueOffset::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorConfig_2eproto::scc_info_TorqueOffset.base);
  return *internal_default_instance();
}


void TorqueOffset::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorConfig.TorqueOffset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  torque_offset_ = 0;
  _internal_metadata_.Clear();
}

bool TorqueOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorConfig.TorqueOffset)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float torque_offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &torque_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorConfig.TorqueOffset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorConfig.TorqueOffset)
  return false;
#undef DO_
}

void TorqueOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorConfig.TorqueOffset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float torque_offset = 1;
  if (this->torque_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->torque_offset(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorConfig.TorqueOffset)
}

::google::protobuf::uint8* TorqueOffset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorConfig.TorqueOffset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float torque_offset = 1;
  if (this->torque_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->torque_offset(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorConfig.TorqueOffset)
  return target;
}

size_t TorqueOffset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorConfig.TorqueOffset)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float torque_offset = 1;
  if (this->torque_offset() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TorqueOffset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorConfig.TorqueOffset)
  GOOGLE_DCHECK_NE(&from, this);
  const TorqueOffset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TorqueOffset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorConfig.TorqueOffset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorConfig.TorqueOffset)
    MergeFrom(*source);
  }
}

void TorqueOffset::MergeFrom(const TorqueOffset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorConfig.TorqueOffset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.torque_offset() != 0) {
    set_torque_offset(from.torque_offset());
  }
}

void TorqueOffset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorConfig.TorqueOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TorqueOffset::CopyFrom(const TorqueOffset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorConfig.TorqueOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TorqueOffset::IsInitialized() const {
  return true;
}

void TorqueOffset::Swap(TorqueOffset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TorqueOffset::InternalSwap(TorqueOffset* other) {
  using std::swap;
  swap(torque_offset_, other->torque_offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TorqueOffset::GetMetadata() const {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControlModeInformation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlModeInformation::kControlModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlModeInformation::ControlModeInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorConfig_2eproto::scc_info_ControlModeInformation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorConfig.ControlModeInformation)
}
ControlModeInformation::ControlModeInformation(const ControlModeInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  control_mode_ = from.control_mode_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorConfig.ControlModeInformation)
}

void ControlModeInformation::SharedCtor() {
  control_mode_ = 0;
}

ControlModeInformation::~ControlModeInformation() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorConfig.ControlModeInformation)
  SharedDtor();
}

void ControlModeInformation::SharedDtor() {
}

void ControlModeInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControlModeInformation::descriptor() {
  ::protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControlModeInformation& ControlModeInformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorConfig_2eproto::scc_info_ControlModeInformation.base);
  return *internal_default_instance();
}


void ControlModeInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorConfig.ControlModeInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  control_mode_ = 0;
  _internal_metadata_.Clear();
}

bool ControlModeInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorConfig.ControlModeInformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.ActuatorConfig.ControlMode control_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_control_mode(static_cast< ::Kinova::Api::ActuatorConfig::ControlMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorConfig.ControlModeInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorConfig.ControlModeInformation)
  return false;
#undef DO_
}

void ControlModeInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorConfig.ControlModeInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorConfig.ControlMode control_mode = 1;
  if (this->control_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->control_mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorConfig.ControlModeInformation)
}

::google::protobuf::uint8* ControlModeInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorConfig.ControlModeInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorConfig.ControlMode control_mode = 1;
  if (this->control_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->control_mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorConfig.ControlModeInformation)
  return target;
}

size_t ControlModeInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorConfig.ControlModeInformation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.ActuatorConfig.ControlMode control_mode = 1;
  if (this->control_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->control_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlModeInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorConfig.ControlModeInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlModeInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlModeInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorConfig.ControlModeInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorConfig.ControlModeInformation)
    MergeFrom(*source);
  }
}

void ControlModeInformation::MergeFrom(const ControlModeInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorConfig.ControlModeInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.control_mode() != 0) {
    set_control_mode(from.control_mode());
  }
}

void ControlModeInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorConfig.ControlModeInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlModeInformation::CopyFrom(const ControlModeInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorConfig.ControlModeInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlModeInformation::IsInitialized() const {
  return true;
}

void ControlModeInformation::Swap(ControlModeInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlModeInformation::InternalSwap(ControlModeInformation* other) {
  using std::swap;
  swap(control_mode_, other->control_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControlModeInformation::GetMetadata() const {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControlLoop::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlLoop::kControlLoopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlLoop::ControlLoop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorConfig_2eproto::scc_info_ControlLoop.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorConfig.ControlLoop)
}
ControlLoop::ControlLoop(const ControlLoop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  control_loop_ = from.control_loop_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorConfig.ControlLoop)
}

void ControlLoop::SharedCtor() {
  control_loop_ = 0u;
}

ControlLoop::~ControlLoop() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorConfig.ControlLoop)
  SharedDtor();
}

void ControlLoop::SharedDtor() {
}

void ControlLoop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControlLoop::descriptor() {
  ::protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControlLoop& ControlLoop::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorConfig_2eproto::scc_info_ControlLoop.base);
  return *internal_default_instance();
}


void ControlLoop::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorConfig.ControlLoop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  control_loop_ = 0u;
  _internal_metadata_.Clear();
}

bool ControlLoop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorConfig.ControlLoop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 control_loop = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &control_loop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorConfig.ControlLoop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorConfig.ControlLoop)
  return false;
#undef DO_
}

void ControlLoop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorConfig.ControlLoop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 control_loop = 1;
  if (this->control_loop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->control_loop(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorConfig.ControlLoop)
}

::google::protobuf::uint8* ControlLoop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorConfig.ControlLoop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 control_loop = 1;
  if (this->control_loop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->control_loop(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorConfig.ControlLoop)
  return target;
}

size_t ControlLoop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorConfig.ControlLoop)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // fixed32 control_loop = 1;
  if (this->control_loop() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlLoop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorConfig.ControlLoop)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlLoop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlLoop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorConfig.ControlLoop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorConfig.ControlLoop)
    MergeFrom(*source);
  }
}

void ControlLoop::MergeFrom(const ControlLoop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorConfig.ControlLoop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.control_loop() != 0) {
    set_control_loop(from.control_loop());
  }
}

void ControlLoop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorConfig.ControlLoop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlLoop::CopyFrom(const ControlLoop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorConfig.ControlLoop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlLoop::IsInitialized() const {
  return true;
}

void ControlLoop::Swap(ControlLoop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlLoop::InternalSwap(ControlLoop* other) {
  using std::swap;
  swap(control_loop_, other->control_loop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControlLoop::GetMetadata() const {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoopSelection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoopSelection::kLoopSelectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoopSelection::LoopSelection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorConfig_2eproto::scc_info_LoopSelection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorConfig.LoopSelection)
}
LoopSelection::LoopSelection(const LoopSelection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  loop_selection_ = from.loop_selection_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorConfig.LoopSelection)
}

void LoopSelection::SharedCtor() {
  loop_selection_ = 0;
}

LoopSelection::~LoopSelection() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorConfig.LoopSelection)
  SharedDtor();
}

void LoopSelection::SharedDtor() {
}

void LoopSelection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LoopSelection::descriptor() {
  ::protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoopSelection& LoopSelection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorConfig_2eproto::scc_info_LoopSelection.base);
  return *internal_default_instance();
}


void LoopSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorConfig.LoopSelection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loop_selection_ = 0;
  _internal_metadata_.Clear();
}

bool LoopSelection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorConfig.LoopSelection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.ActuatorConfig.ControlLoopSelection loop_selection = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_loop_selection(static_cast< ::Kinova::Api::ActuatorConfig::ControlLoopSelection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorConfig.LoopSelection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorConfig.LoopSelection)
  return false;
#undef DO_
}

void LoopSelection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorConfig.LoopSelection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorConfig.ControlLoopSelection loop_selection = 1;
  if (this->loop_selection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->loop_selection(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorConfig.LoopSelection)
}

::google::protobuf::uint8* LoopSelection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorConfig.LoopSelection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorConfig.ControlLoopSelection loop_selection = 1;
  if (this->loop_selection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->loop_selection(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorConfig.LoopSelection)
  return target;
}

size_t LoopSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorConfig.LoopSelection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.ActuatorConfig.ControlLoopSelection loop_selection = 1;
  if (this->loop_selection() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->loop_selection());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoopSelection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorConfig.LoopSelection)
  GOOGLE_DCHECK_NE(&from, this);
  const LoopSelection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoopSelection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorConfig.LoopSelection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorConfig.LoopSelection)
    MergeFrom(*source);
  }
}

void LoopSelection::MergeFrom(const LoopSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorConfig.LoopSelection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.loop_selection() != 0) {
    set_loop_selection(from.loop_selection());
  }
}

void LoopSelection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorConfig.LoopSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoopSelection::CopyFrom(const LoopSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorConfig.LoopSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoopSelection::IsInitialized() const {
  return true;
}

void LoopSelection::Swap(LoopSelection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoopSelection::InternalSwap(LoopSelection* other) {
  using std::swap;
  swap(loop_selection_, other->loop_selection_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LoopSelection::GetMetadata() const {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VectorDriveParameters::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VectorDriveParameters::kKpqFieldNumber;
const int VectorDriveParameters::kKiqFieldNumber;
const int VectorDriveParameters::kKpdFieldNumber;
const int VectorDriveParameters::kKidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VectorDriveParameters::VectorDriveParameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorConfig_2eproto::scc_info_VectorDriveParameters.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorConfig.VectorDriveParameters)
}
VectorDriveParameters::VectorDriveParameters(const VectorDriveParameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kpq_, &from.kpq_,
    static_cast<size_t>(reinterpret_cast<char*>(&kid_) -
    reinterpret_cast<char*>(&kpq_)) + sizeof(kid_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorConfig.VectorDriveParameters)
}

void VectorDriveParameters::SharedCtor() {
  ::memset(&kpq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kid_) -
      reinterpret_cast<char*>(&kpq_)) + sizeof(kid_));
}

VectorDriveParameters::~VectorDriveParameters() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorConfig.VectorDriveParameters)
  SharedDtor();
}

void VectorDriveParameters::SharedDtor() {
}

void VectorDriveParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VectorDriveParameters::descriptor() {
  ::protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VectorDriveParameters& VectorDriveParameters::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorConfig_2eproto::scc_info_VectorDriveParameters.base);
  return *internal_default_instance();
}


void VectorDriveParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorConfig.VectorDriveParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&kpq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kid_) -
      reinterpret_cast<char*>(&kpq_)) + sizeof(kid_));
  _internal_metadata_.Clear();
}

bool VectorDriveParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorConfig.VectorDriveParameters)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float kpq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kpq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float kiq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kiq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float kpd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kpd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float kid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorConfig.VectorDriveParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorConfig.VectorDriveParameters)
  return false;
#undef DO_
}

void VectorDriveParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorConfig.VectorDriveParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float kpq = 1;
  if (this->kpq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->kpq(), output);
  }

  // float kiq = 2;
  if (this->kiq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->kiq(), output);
  }

  // float kpd = 3;
  if (this->kpd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->kpd(), output);
  }

  // float kid = 4;
  if (this->kid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->kid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorConfig.VectorDriveParameters)
}

::google::protobuf::uint8* VectorDriveParameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorConfig.VectorDriveParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float kpq = 1;
  if (this->kpq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->kpq(), target);
  }

  // float kiq = 2;
  if (this->kiq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->kiq(), target);
  }

  // float kpd = 3;
  if (this->kpd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->kpd(), target);
  }

  // float kid = 4;
  if (this->kid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->kid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorConfig.VectorDriveParameters)
  return target;
}

size_t VectorDriveParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorConfig.VectorDriveParameters)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float kpq = 1;
  if (this->kpq() != 0) {
    total_size += 1 + 4;
  }

  // float kiq = 2;
  if (this->kiq() != 0) {
    total_size += 1 + 4;
  }

  // float kpd = 3;
  if (this->kpd() != 0) {
    total_size += 1 + 4;
  }

  // float kid = 4;
  if (this->kid() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorDriveParameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorConfig.VectorDriveParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorDriveParameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VectorDriveParameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorConfig.VectorDriveParameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorConfig.VectorDriveParameters)
    MergeFrom(*source);
  }
}

void VectorDriveParameters::MergeFrom(const VectorDriveParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorConfig.VectorDriveParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kpq() != 0) {
    set_kpq(from.kpq());
  }
  if (from.kiq() != 0) {
    set_kiq(from.kiq());
  }
  if (from.kpd() != 0) {
    set_kpd(from.kpd());
  }
  if (from.kid() != 0) {
    set_kid(from.kid());
  }
}

void VectorDriveParameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorConfig.VectorDriveParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorDriveParameters::CopyFrom(const VectorDriveParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorConfig.VectorDriveParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorDriveParameters::IsInitialized() const {
  return true;
}

void VectorDriveParameters::Swap(VectorDriveParameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VectorDriveParameters::InternalSwap(VectorDriveParameters* other) {
  using std::swap;
  swap(kpq_, other->kpq_);
  swap(kiq_, other->kiq_);
  swap(kpd_, other->kpd_);
  swap(kid_, other->kid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VectorDriveParameters::GetMetadata() const {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EncoderDerivativeParameters::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncoderDerivativeParameters::kMaxWindowWidthFieldNumber;
const int EncoderDerivativeParameters::kMinAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncoderDerivativeParameters::EncoderDerivativeParameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorConfig_2eproto::scc_info_EncoderDerivativeParameters.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorConfig.EncoderDerivativeParameters)
}
EncoderDerivativeParameters::EncoderDerivativeParameters(const EncoderDerivativeParameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_window_width_, &from.max_window_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_angle_) -
    reinterpret_cast<char*>(&max_window_width_)) + sizeof(min_angle_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorConfig.EncoderDerivativeParameters)
}

void EncoderDerivativeParameters::SharedCtor() {
  ::memset(&max_window_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_angle_) -
      reinterpret_cast<char*>(&max_window_width_)) + sizeof(min_angle_));
}

EncoderDerivativeParameters::~EncoderDerivativeParameters() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorConfig.EncoderDerivativeParameters)
  SharedDtor();
}

void EncoderDerivativeParameters::SharedDtor() {
}

void EncoderDerivativeParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EncoderDerivativeParameters::descriptor() {
  ::protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EncoderDerivativeParameters& EncoderDerivativeParameters::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorConfig_2eproto::scc_info_EncoderDerivativeParameters.base);
  return *internal_default_instance();
}


void EncoderDerivativeParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorConfig.EncoderDerivativeParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_window_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_angle_) -
      reinterpret_cast<char*>(&max_window_width_)) + sizeof(min_angle_));
  _internal_metadata_.Clear();
}

bool EncoderDerivativeParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorConfig.EncoderDerivativeParameters)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 max_window_width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_window_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_angle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorConfig.EncoderDerivativeParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorConfig.EncoderDerivativeParameters)
  return false;
#undef DO_
}

void EncoderDerivativeParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorConfig.EncoderDerivativeParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_window_width = 1;
  if (this->max_window_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_window_width(), output);
  }

  // float min_angle = 2;
  if (this->min_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_angle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorConfig.EncoderDerivativeParameters)
}

::google::protobuf::uint8* EncoderDerivativeParameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorConfig.EncoderDerivativeParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_window_width = 1;
  if (this->max_window_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_window_width(), target);
  }

  // float min_angle = 2;
  if (this->min_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_angle(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorConfig.EncoderDerivativeParameters)
  return target;
}

size_t EncoderDerivativeParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorConfig.EncoderDerivativeParameters)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 max_window_width = 1;
  if (this->max_window_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_window_width());
  }

  // float min_angle = 2;
  if (this->min_angle() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncoderDerivativeParameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorConfig.EncoderDerivativeParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const EncoderDerivativeParameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EncoderDerivativeParameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorConfig.EncoderDerivativeParameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorConfig.EncoderDerivativeParameters)
    MergeFrom(*source);
  }
}

void EncoderDerivativeParameters::MergeFrom(const EncoderDerivativeParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorConfig.EncoderDerivativeParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_window_width() != 0) {
    set_max_window_width(from.max_window_width());
  }
  if (from.min_angle() != 0) {
    set_min_angle(from.min_angle());
  }
}

void EncoderDerivativeParameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorConfig.EncoderDerivativeParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncoderDerivativeParameters::CopyFrom(const EncoderDerivativeParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorConfig.EncoderDerivativeParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncoderDerivativeParameters::IsInitialized() const {
  return true;
}

void EncoderDerivativeParameters::Swap(EncoderDerivativeParameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncoderDerivativeParameters::InternalSwap(EncoderDerivativeParameters* other) {
  using std::swap;
  swap(max_window_width_, other->max_window_width_);
  swap(min_angle_, other->min_angle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EncoderDerivativeParameters::GetMetadata() const {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControlLoopParameters::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlLoopParameters::kLoopSelectionFieldNumber;
const int ControlLoopParameters::kErrorSaturationFieldNumber;
const int ControlLoopParameters::kOutputSaturationFieldNumber;
const int ControlLoopParameters::kKAzFieldNumber;
const int ControlLoopParameters::kKBzFieldNumber;
const int ControlLoopParameters::kErrorDeadBandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlLoopParameters::ControlLoopParameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorConfig_2eproto::scc_info_ControlLoopParameters.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorConfig.ControlLoopParameters)
}
ControlLoopParameters::ControlLoopParameters(const ControlLoopParameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      kaz_(from.kaz_),
      kbz_(from.kbz_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&loop_selection_, &from.loop_selection_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_dead_band_) -
    reinterpret_cast<char*>(&loop_selection_)) + sizeof(error_dead_band_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorConfig.ControlLoopParameters)
}

void ControlLoopParameters::SharedCtor() {
  ::memset(&loop_selection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_dead_band_) -
      reinterpret_cast<char*>(&loop_selection_)) + sizeof(error_dead_band_));
}

ControlLoopParameters::~ControlLoopParameters() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorConfig.ControlLoopParameters)
  SharedDtor();
}

void ControlLoopParameters::SharedDtor() {
}

void ControlLoopParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControlLoopParameters::descriptor() {
  ::protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControlLoopParameters& ControlLoopParameters::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorConfig_2eproto::scc_info_ControlLoopParameters.base);
  return *internal_default_instance();
}


void ControlLoopParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorConfig.ControlLoopParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kaz_.Clear();
  kbz_.Clear();
  ::memset(&loop_selection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_dead_band_) -
      reinterpret_cast<char*>(&loop_selection_)) + sizeof(error_dead_band_));
  _internal_metadata_.Clear();
}

bool ControlLoopParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorConfig.ControlLoopParameters)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.ActuatorConfig.ControlLoopSelection loop_selection = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_loop_selection(static_cast< ::Kinova::Api::ActuatorConfig::ControlLoopSelection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float error_saturation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &error_saturation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float output_saturation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &output_saturation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float kAz = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kaz())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_kaz())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float kBz = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kbz())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_kbz())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float error_dead_band = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &error_dead_band_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorConfig.ControlLoopParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorConfig.ControlLoopParameters)
  return false;
#undef DO_
}

void ControlLoopParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorConfig.ControlLoopParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorConfig.ControlLoopSelection loop_selection = 1;
  if (this->loop_selection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->loop_selection(), output);
  }

  // float error_saturation = 2;
  if (this->error_saturation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->error_saturation(), output);
  }

  // float output_saturation = 3;
  if (this->output_saturation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->output_saturation(), output);
  }

  // repeated float kAz = 4;
  if (this->kaz_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _kaz_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->kaz().data(), this->kaz_size(), output);
  }

  // repeated float kBz = 5;
  if (this->kbz_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _kbz_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->kbz().data(), this->kbz_size(), output);
  }

  // float error_dead_band = 6;
  if (this->error_dead_band() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->error_dead_band(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorConfig.ControlLoopParameters)
}

::google::protobuf::uint8* ControlLoopParameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorConfig.ControlLoopParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorConfig.ControlLoopSelection loop_selection = 1;
  if (this->loop_selection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->loop_selection(), target);
  }

  // float error_saturation = 2;
  if (this->error_saturation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->error_saturation(), target);
  }

  // float output_saturation = 3;
  if (this->output_saturation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->output_saturation(), target);
  }

  // repeated float kAz = 4;
  if (this->kaz_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _kaz_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->kaz_, target);
  }

  // repeated float kBz = 5;
  if (this->kbz_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _kbz_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->kbz_, target);
  }

  // float error_dead_band = 6;
  if (this->error_dead_band() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->error_dead_band(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorConfig.ControlLoopParameters)
  return target;
}

size_t ControlLoopParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorConfig.ControlLoopParameters)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float kAz = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->kaz_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _kaz_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float kBz = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->kbz_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _kbz_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .Kinova.Api.ActuatorConfig.ControlLoopSelection loop_selection = 1;
  if (this->loop_selection() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->loop_selection());
  }

  // float error_saturation = 2;
  if (this->error_saturation() != 0) {
    total_size += 1 + 4;
  }

  // float output_saturation = 3;
  if (this->output_saturation() != 0) {
    total_size += 1 + 4;
  }

  // float error_dead_band = 6;
  if (this->error_dead_band() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlLoopParameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorConfig.ControlLoopParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlLoopParameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlLoopParameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorConfig.ControlLoopParameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorConfig.ControlLoopParameters)
    MergeFrom(*source);
  }
}

void ControlLoopParameters::MergeFrom(const ControlLoopParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorConfig.ControlLoopParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kaz_.MergeFrom(from.kaz_);
  kbz_.MergeFrom(from.kbz_);
  if (from.loop_selection() != 0) {
    set_loop_selection(from.loop_selection());
  }
  if (from.error_saturation() != 0) {
    set_error_saturation(from.error_saturation());
  }
  if (from.output_saturation() != 0) {
    set_output_saturation(from.output_saturation());
  }
  if (from.error_dead_band() != 0) {
    set_error_dead_band(from.error_dead_band());
  }
}

void ControlLoopParameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorConfig.ControlLoopParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlLoopParameters::CopyFrom(const ControlLoopParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorConfig.ControlLoopParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlLoopParameters::IsInitialized() const {
  return true;
}

void ControlLoopParameters::Swap(ControlLoopParameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlLoopParameters::InternalSwap(ControlLoopParameters* other) {
  using std::swap;
  kaz_.InternalSwap(&other->kaz_);
  kbz_.InternalSwap(&other->kbz_);
  swap(loop_selection_, other->loop_selection_);
  swap(error_saturation_, other->error_saturation_);
  swap(output_saturation_, other->output_saturation_);
  swap(error_dead_band_, other->error_dead_band_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControlLoopParameters::GetMetadata() const {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FrequencyResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrequencyResponse::kLoopSelectionFieldNumber;
const int FrequencyResponse::kMinFrequencyFieldNumber;
const int FrequencyResponse::kMaxFrequencyFieldNumber;
const int FrequencyResponse::kAmplitudeFieldNumber;
const int FrequencyResponse::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrequencyResponse::FrequencyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorConfig_2eproto::scc_info_FrequencyResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorConfig.FrequencyResponse)
}
FrequencyResponse::FrequencyResponse(const FrequencyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&loop_selection_, &from.loop_selection_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&loop_selection_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorConfig.FrequencyResponse)
}

void FrequencyResponse::SharedCtor() {
  ::memset(&loop_selection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&loop_selection_)) + sizeof(duration_));
}

FrequencyResponse::~FrequencyResponse() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorConfig.FrequencyResponse)
  SharedDtor();
}

void FrequencyResponse::SharedDtor() {
}

void FrequencyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FrequencyResponse::descriptor() {
  ::protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrequencyResponse& FrequencyResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorConfig_2eproto::scc_info_FrequencyResponse.base);
  return *internal_default_instance();
}


void FrequencyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorConfig.FrequencyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&loop_selection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&loop_selection_)) + sizeof(duration_));
  _internal_metadata_.Clear();
}

bool FrequencyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorConfig.FrequencyResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.ActuatorConfig.ControlLoopSelection loop_selection = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_loop_selection(static_cast< ::Kinova::Api::ActuatorConfig::ControlLoopSelection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_frequency = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_frequency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float amplitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amplitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float duration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorConfig.FrequencyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorConfig.FrequencyResponse)
  return false;
#undef DO_
}

void FrequencyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorConfig.FrequencyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorConfig.ControlLoopSelection loop_selection = 1;
  if (this->loop_selection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->loop_selection(), output);
  }

  // float min_frequency = 2;
  if (this->min_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_frequency(), output);
  }

  // float max_frequency = 3;
  if (this->max_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_frequency(), output);
  }

  // float amplitude = 4;
  if (this->amplitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->amplitude(), output);
  }

  // float duration = 5;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorConfig.FrequencyResponse)
}

::google::protobuf::uint8* FrequencyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorConfig.FrequencyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorConfig.ControlLoopSelection loop_selection = 1;
  if (this->loop_selection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->loop_selection(), target);
  }

  // float min_frequency = 2;
  if (this->min_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_frequency(), target);
  }

  // float max_frequency = 3;
  if (this->max_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_frequency(), target);
  }

  // float amplitude = 4;
  if (this->amplitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->amplitude(), target);
  }

  // float duration = 5;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->duration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorConfig.FrequencyResponse)
  return target;
}

size_t FrequencyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorConfig.FrequencyResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.ActuatorConfig.ControlLoopSelection loop_selection = 1;
  if (this->loop_selection() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->loop_selection());
  }

  // float min_frequency = 2;
  if (this->min_frequency() != 0) {
    total_size += 1 + 4;
  }

  // float max_frequency = 3;
  if (this->max_frequency() != 0) {
    total_size += 1 + 4;
  }

  // float amplitude = 4;
  if (this->amplitude() != 0) {
    total_size += 1 + 4;
  }

  // float duration = 5;
  if (this->duration() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrequencyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorConfig.FrequencyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FrequencyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrequencyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorConfig.FrequencyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorConfig.FrequencyResponse)
    MergeFrom(*source);
  }
}

void FrequencyResponse::MergeFrom(const FrequencyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorConfig.FrequencyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.loop_selection() != 0) {
    set_loop_selection(from.loop_selection());
  }
  if (from.min_frequency() != 0) {
    set_min_frequency(from.min_frequency());
  }
  if (from.max_frequency() != 0) {
    set_max_frequency(from.max_frequency());
  }
  if (from.amplitude() != 0) {
    set_amplitude(from.amplitude());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void FrequencyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorConfig.FrequencyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrequencyResponse::CopyFrom(const FrequencyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorConfig.FrequencyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrequencyResponse::IsInitialized() const {
  return true;
}

void FrequencyResponse::Swap(FrequencyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrequencyResponse::InternalSwap(FrequencyResponse* other) {
  using std::swap;
  swap(loop_selection_, other->loop_selection_);
  swap(min_frequency_, other->min_frequency_);
  swap(max_frequency_, other->max_frequency_);
  swap(amplitude_, other->amplitude_);
  swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FrequencyResponse::GetMetadata() const {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StepResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StepResponse::kLoopSelectionFieldNumber;
const int StepResponse::kAmplitudeFieldNumber;
const int StepResponse::kStepDelayFieldNumber;
const int StepResponse::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StepResponse::StepResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorConfig_2eproto::scc_info_StepResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorConfig.StepResponse)
}
StepResponse::StepResponse(const StepResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&loop_selection_, &from.loop_selection_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&loop_selection_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorConfig.StepResponse)
}

void StepResponse::SharedCtor() {
  ::memset(&loop_selection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&loop_selection_)) + sizeof(duration_));
}

StepResponse::~StepResponse() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorConfig.StepResponse)
  SharedDtor();
}

void StepResponse::SharedDtor() {
}

void StepResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StepResponse::descriptor() {
  ::protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StepResponse& StepResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorConfig_2eproto::scc_info_StepResponse.base);
  return *internal_default_instance();
}


void StepResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorConfig.StepResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&loop_selection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&loop_selection_)) + sizeof(duration_));
  _internal_metadata_.Clear();
}

bool StepResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorConfig.StepResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.ActuatorConfig.ControlLoopSelection loop_selection = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_loop_selection(static_cast< ::Kinova::Api::ActuatorConfig::ControlLoopSelection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float amplitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amplitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float step_delay = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorConfig.StepResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorConfig.StepResponse)
  return false;
#undef DO_
}

void StepResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorConfig.StepResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorConfig.ControlLoopSelection loop_selection = 1;
  if (this->loop_selection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->loop_selection(), output);
  }

  // float amplitude = 2;
  if (this->amplitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->amplitude(), output);
  }

  // float step_delay = 3;
  if (this->step_delay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->step_delay(), output);
  }

  // float duration = 4;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorConfig.StepResponse)
}

::google::protobuf::uint8* StepResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorConfig.StepResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorConfig.ControlLoopSelection loop_selection = 1;
  if (this->loop_selection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->loop_selection(), target);
  }

  // float amplitude = 2;
  if (this->amplitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->amplitude(), target);
  }

  // float step_delay = 3;
  if (this->step_delay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->step_delay(), target);
  }

  // float duration = 4;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorConfig.StepResponse)
  return target;
}

size_t StepResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorConfig.StepResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.ActuatorConfig.ControlLoopSelection loop_selection = 1;
  if (this->loop_selection() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->loop_selection());
  }

  // float amplitude = 2;
  if (this->amplitude() != 0) {
    total_size += 1 + 4;
  }

  // float step_delay = 3;
  if (this->step_delay() != 0) {
    total_size += 1 + 4;
  }

  // float duration = 4;
  if (this->duration() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StepResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorConfig.StepResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StepResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StepResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorConfig.StepResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorConfig.StepResponse)
    MergeFrom(*source);
  }
}

void StepResponse::MergeFrom(const StepResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorConfig.StepResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.loop_selection() != 0) {
    set_loop_selection(from.loop_selection());
  }
  if (from.amplitude() != 0) {
    set_amplitude(from.amplitude());
  }
  if (from.step_delay() != 0) {
    set_step_delay(from.step_delay());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void StepResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorConfig.StepResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepResponse::CopyFrom(const StepResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorConfig.StepResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepResponse::IsInitialized() const {
  return true;
}

void StepResponse::Swap(StepResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StepResponse::InternalSwap(StepResponse* other) {
  using std::swap;
  swap(loop_selection_, other->loop_selection_);
  swap(amplitude_, other->amplitude_);
  swap(step_delay_, other->step_delay_);
  swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StepResponse::GetMetadata() const {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RampResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RampResponse::kLoopSelectionFieldNumber;
const int RampResponse::kSlopeFieldNumber;
const int RampResponse::kRampDelayFieldNumber;
const int RampResponse::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RampResponse::RampResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorConfig_2eproto::scc_info_RampResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorConfig.RampResponse)
}
RampResponse::RampResponse(const RampResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&loop_selection_, &from.loop_selection_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&loop_selection_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorConfig.RampResponse)
}

void RampResponse::SharedCtor() {
  ::memset(&loop_selection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&loop_selection_)) + sizeof(duration_));
}

RampResponse::~RampResponse() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorConfig.RampResponse)
  SharedDtor();
}

void RampResponse::SharedDtor() {
}

void RampResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RampResponse::descriptor() {
  ::protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RampResponse& RampResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorConfig_2eproto::scc_info_RampResponse.base);
  return *internal_default_instance();
}


void RampResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorConfig.RampResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&loop_selection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&loop_selection_)) + sizeof(duration_));
  _internal_metadata_.Clear();
}

bool RampResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorConfig.RampResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.ActuatorConfig.ControlLoopSelection loop_selection = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_loop_selection(static_cast< ::Kinova::Api::ActuatorConfig::ControlLoopSelection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float slope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ramp_delay = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ramp_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorConfig.RampResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorConfig.RampResponse)
  return false;
#undef DO_
}

void RampResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorConfig.RampResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorConfig.ControlLoopSelection loop_selection = 1;
  if (this->loop_selection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->loop_selection(), output);
  }

  // float slope = 2;
  if (this->slope() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->slope(), output);
  }

  // float ramp_delay = 3;
  if (this->ramp_delay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ramp_delay(), output);
  }

  // float duration = 4;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorConfig.RampResponse)
}

::google::protobuf::uint8* RampResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorConfig.RampResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorConfig.ControlLoopSelection loop_selection = 1;
  if (this->loop_selection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->loop_selection(), target);
  }

  // float slope = 2;
  if (this->slope() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->slope(), target);
  }

  // float ramp_delay = 3;
  if (this->ramp_delay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->ramp_delay(), target);
  }

  // float duration = 4;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorConfig.RampResponse)
  return target;
}

size_t RampResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorConfig.RampResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.ActuatorConfig.ControlLoopSelection loop_selection = 1;
  if (this->loop_selection() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->loop_selection());
  }

  // float slope = 2;
  if (this->slope() != 0) {
    total_size += 1 + 4;
  }

  // float ramp_delay = 3;
  if (this->ramp_delay() != 0) {
    total_size += 1 + 4;
  }

  // float duration = 4;
  if (this->duration() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RampResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorConfig.RampResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RampResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RampResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorConfig.RampResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorConfig.RampResponse)
    MergeFrom(*source);
  }
}

void RampResponse::MergeFrom(const RampResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorConfig.RampResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.loop_selection() != 0) {
    set_loop_selection(from.loop_selection());
  }
  if (from.slope() != 0) {
    set_slope(from.slope());
  }
  if (from.ramp_delay() != 0) {
    set_ramp_delay(from.ramp_delay());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void RampResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorConfig.RampResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RampResponse::CopyFrom(const RampResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorConfig.RampResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RampResponse::IsInitialized() const {
  return true;
}

void RampResponse::Swap(RampResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RampResponse::InternalSwap(RampResponse* other) {
  using std::swap;
  swap(loop_selection_, other->loop_selection_);
  swap(slope_, other->slope_);
  swap(ramp_delay_, other->ramp_delay_);
  swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RampResponse::GetMetadata() const {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CustomDataSelection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomDataSelection::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomDataSelection::CustomDataSelection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorConfig_2eproto::scc_info_CustomDataSelection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorConfig.CustomDataSelection)
}
CustomDataSelection::CustomDataSelection(const CustomDataSelection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      channel_(from.channel_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorConfig.CustomDataSelection)
}

void CustomDataSelection::SharedCtor() {
}

CustomDataSelection::~CustomDataSelection() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorConfig.CustomDataSelection)
  SharedDtor();
}

void CustomDataSelection::SharedDtor() {
}

void CustomDataSelection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CustomDataSelection::descriptor() {
  ::protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomDataSelection& CustomDataSelection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorConfig_2eproto::scc_info_CustomDataSelection.base);
  return *internal_default_instance();
}


void CustomDataSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorConfig.CustomDataSelection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.Clear();
  _internal_metadata_.Clear();
}

bool CustomDataSelection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorConfig.CustomDataSelection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kinova.Api.ActuatorConfig.CustomDataIndex channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_channel(static_cast< ::Kinova::Api::ActuatorConfig::CustomDataIndex >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_channel(static_cast< ::Kinova::Api::ActuatorConfig::CustomDataIndex >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorConfig.CustomDataSelection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorConfig.CustomDataSelection)
  return false;
#undef DO_
}

void CustomDataSelection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorConfig.CustomDataSelection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.ActuatorConfig.CustomDataIndex channel = 1;
  if (this->channel_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_channel_cached_byte_size_));
  }
  for (int i = 0, n = this->channel_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->channel(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorConfig.CustomDataSelection)
}

::google::protobuf::uint8* CustomDataSelection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorConfig.CustomDataSelection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Kinova.Api.ActuatorConfig.CustomDataIndex channel = 1;
  if (this->channel_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _channel_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->channel_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorConfig.CustomDataSelection)
  return target;
}

size_t CustomDataSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorConfig.CustomDataSelection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Kinova.Api.ActuatorConfig.CustomDataIndex channel = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->channel_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->channel(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _channel_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomDataSelection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorConfig.CustomDataSelection)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomDataSelection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomDataSelection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorConfig.CustomDataSelection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorConfig.CustomDataSelection)
    MergeFrom(*source);
  }
}

void CustomDataSelection::MergeFrom(const CustomDataSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorConfig.CustomDataSelection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_.MergeFrom(from.channel_);
}

void CustomDataSelection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorConfig.CustomDataSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomDataSelection::CopyFrom(const CustomDataSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorConfig.CustomDataSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomDataSelection::IsInitialized() const {
  return true;
}

void CustomDataSelection::Swap(CustomDataSelection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomDataSelection::InternalSwap(CustomDataSelection* other) {
  using std::swap;
  channel_.InternalSwap(&other->channel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CustomDataSelection::GetMetadata() const {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommandModeInformation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommandModeInformation::kCommandModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommandModeInformation::CommandModeInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorConfig_2eproto::scc_info_CommandModeInformation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorConfig.CommandModeInformation)
}
CommandModeInformation::CommandModeInformation(const CommandModeInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  command_mode_ = from.command_mode_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorConfig.CommandModeInformation)
}

void CommandModeInformation::SharedCtor() {
  command_mode_ = 0;
}

CommandModeInformation::~CommandModeInformation() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorConfig.CommandModeInformation)
  SharedDtor();
}

void CommandModeInformation::SharedDtor() {
}

void CommandModeInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommandModeInformation::descriptor() {
  ::protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommandModeInformation& CommandModeInformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorConfig_2eproto::scc_info_CommandModeInformation.base);
  return *internal_default_instance();
}


void CommandModeInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorConfig.CommandModeInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_mode_ = 0;
  _internal_metadata_.Clear();
}

bool CommandModeInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorConfig.CommandModeInformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.ActuatorConfig.CommandMode command_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_command_mode(static_cast< ::Kinova::Api::ActuatorConfig::CommandMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorConfig.CommandModeInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorConfig.CommandModeInformation)
  return false;
#undef DO_
}

void CommandModeInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorConfig.CommandModeInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorConfig.CommandMode command_mode = 1;
  if (this->command_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command_mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorConfig.CommandModeInformation)
}

::google::protobuf::uint8* CommandModeInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorConfig.CommandModeInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorConfig.CommandMode command_mode = 1;
  if (this->command_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command_mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorConfig.CommandModeInformation)
  return target;
}

size_t CommandModeInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorConfig.CommandModeInformation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.ActuatorConfig.CommandMode command_mode = 1;
  if (this->command_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandModeInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorConfig.CommandModeInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandModeInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommandModeInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorConfig.CommandModeInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorConfig.CommandModeInformation)
    MergeFrom(*source);
  }
}

void CommandModeInformation::MergeFrom(const CommandModeInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorConfig.CommandModeInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.command_mode() != 0) {
    set_command_mode(from.command_mode());
  }
}

void CommandModeInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorConfig.CommandModeInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandModeInformation::CopyFrom(const CommandModeInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorConfig.CommandModeInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandModeInformation::IsInitialized() const {
  return true;
}

void CommandModeInformation::Swap(CommandModeInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommandModeInformation::InternalSwap(CommandModeInformation* other) {
  using std::swap;
  swap(command_mode_, other->command_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommandModeInformation::GetMetadata() const {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Servoing::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Servoing::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Servoing::Servoing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorConfig_2eproto::scc_info_Servoing.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorConfig.Servoing)
}
Servoing::Servoing(const Servoing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorConfig.Servoing)
}

void Servoing::SharedCtor() {
  enabled_ = false;
}

Servoing::~Servoing() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorConfig.Servoing)
  SharedDtor();
}

void Servoing::SharedDtor() {
}

void Servoing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Servoing::descriptor() {
  ::protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Servoing& Servoing::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorConfig_2eproto::scc_info_Servoing.base);
  return *internal_default_instance();
}


void Servoing::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorConfig.Servoing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _internal_metadata_.Clear();
}

bool Servoing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorConfig.Servoing)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorConfig.Servoing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorConfig.Servoing)
  return false;
#undef DO_
}

void Servoing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorConfig.Servoing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorConfig.Servoing)
}

::google::protobuf::uint8* Servoing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorConfig.Servoing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorConfig.Servoing)
  return target;
}

size_t Servoing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorConfig.Servoing)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Servoing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorConfig.Servoing)
  GOOGLE_DCHECK_NE(&from, this);
  const Servoing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Servoing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorConfig.Servoing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorConfig.Servoing)
    MergeFrom(*source);
  }
}

void Servoing::MergeFrom(const Servoing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorConfig.Servoing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
}

void Servoing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorConfig.Servoing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Servoing::CopyFrom(const Servoing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorConfig.Servoing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Servoing::IsInitialized() const {
  return true;
}

void Servoing::Swap(Servoing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Servoing::InternalSwap(Servoing* other) {
  using std::swap;
  swap(enabled_, other->enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Servoing::GetMetadata() const {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PositionCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionCommand::kPositionFieldNumber;
const int PositionCommand::kVelocityFieldNumber;
const int PositionCommand::kAccelerationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionCommand::PositionCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorConfig_2eproto::scc_info_PositionCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorConfig.PositionCommand)
}
PositionCommand::PositionCommand(const PositionCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceleration_) -
    reinterpret_cast<char*>(&position_)) + sizeof(acceleration_));
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorConfig.PositionCommand)
}

void PositionCommand::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceleration_) -
      reinterpret_cast<char*>(&position_)) + sizeof(acceleration_));
}

PositionCommand::~PositionCommand() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorConfig.PositionCommand)
  SharedDtor();
}

void PositionCommand::SharedDtor() {
}

void PositionCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PositionCommand::descriptor() {
  ::protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PositionCommand& PositionCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorConfig_2eproto::scc_info_PositionCommand.base);
  return *internal_default_instance();
}


void PositionCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorConfig.PositionCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceleration_) -
      reinterpret_cast<char*>(&position_)) + sizeof(acceleration_));
  _internal_metadata_.Clear();
}

bool PositionCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorConfig.PositionCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acceleration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorConfig.PositionCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorConfig.PositionCommand)
  return false;
#undef DO_
}

void PositionCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorConfig.PositionCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float position = 1;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->position(), output);
  }

  // float velocity = 2;
  if (this->velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->velocity(), output);
  }

  // float acceleration = 3;
  if (this->acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->acceleration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorConfig.PositionCommand)
}

::google::protobuf::uint8* PositionCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorConfig.PositionCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float position = 1;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->position(), target);
  }

  // float velocity = 2;
  if (this->velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->velocity(), target);
  }

  // float acceleration = 3;
  if (this->acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->acceleration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorConfig.PositionCommand)
  return target;
}

size_t PositionCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorConfig.PositionCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float position = 1;
  if (this->position() != 0) {
    total_size += 1 + 4;
  }

  // float velocity = 2;
  if (this->velocity() != 0) {
    total_size += 1 + 4;
  }

  // float acceleration = 3;
  if (this->acceleration() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorConfig.PositionCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PositionCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorConfig.PositionCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorConfig.PositionCommand)
    MergeFrom(*source);
  }
}

void PositionCommand::MergeFrom(const PositionCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorConfig.PositionCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.velocity() != 0) {
    set_velocity(from.velocity());
  }
  if (from.acceleration() != 0) {
    set_acceleration(from.acceleration());
  }
}

void PositionCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorConfig.PositionCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionCommand::CopyFrom(const PositionCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorConfig.PositionCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionCommand::IsInitialized() const {
  return true;
}

void PositionCommand::Swap(PositionCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PositionCommand::InternalSwap(PositionCommand* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PositionCommand::GetMetadata() const {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CoggingFeedforwardModeInformation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoggingFeedforwardModeInformation::kCoggingFeedforwardModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoggingFeedforwardModeInformation::CoggingFeedforwardModeInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ActuatorConfig_2eproto::scc_info_CoggingFeedforwardModeInformation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kinova.Api.ActuatorConfig.CoggingFeedforwardModeInformation)
}
CoggingFeedforwardModeInformation::CoggingFeedforwardModeInformation(const CoggingFeedforwardModeInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cogging_feedforward_mode_ = from.cogging_feedforward_mode_;
  // @@protoc_insertion_point(copy_constructor:Kinova.Api.ActuatorConfig.CoggingFeedforwardModeInformation)
}

void CoggingFeedforwardModeInformation::SharedCtor() {
  cogging_feedforward_mode_ = 0;
}

CoggingFeedforwardModeInformation::~CoggingFeedforwardModeInformation() {
  // @@protoc_insertion_point(destructor:Kinova.Api.ActuatorConfig.CoggingFeedforwardModeInformation)
  SharedDtor();
}

void CoggingFeedforwardModeInformation::SharedDtor() {
}

void CoggingFeedforwardModeInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CoggingFeedforwardModeInformation::descriptor() {
  ::protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CoggingFeedforwardModeInformation& CoggingFeedforwardModeInformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ActuatorConfig_2eproto::scc_info_CoggingFeedforwardModeInformation.base);
  return *internal_default_instance();
}


void CoggingFeedforwardModeInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:Kinova.Api.ActuatorConfig.CoggingFeedforwardModeInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cogging_feedforward_mode_ = 0;
  _internal_metadata_.Clear();
}

bool CoggingFeedforwardModeInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kinova.Api.ActuatorConfig.CoggingFeedforwardModeInformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Kinova.Api.ActuatorConfig.CoggingFeedforwardMode cogging_feedforward_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cogging_feedforward_mode(static_cast< ::Kinova::Api::ActuatorConfig::CoggingFeedforwardMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kinova.Api.ActuatorConfig.CoggingFeedforwardModeInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kinova.Api.ActuatorConfig.CoggingFeedforwardModeInformation)
  return false;
#undef DO_
}

void CoggingFeedforwardModeInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kinova.Api.ActuatorConfig.CoggingFeedforwardModeInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorConfig.CoggingFeedforwardMode cogging_feedforward_mode = 1;
  if (this->cogging_feedforward_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cogging_feedforward_mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kinova.Api.ActuatorConfig.CoggingFeedforwardModeInformation)
}

::google::protobuf::uint8* CoggingFeedforwardModeInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kinova.Api.ActuatorConfig.CoggingFeedforwardModeInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kinova.Api.ActuatorConfig.CoggingFeedforwardMode cogging_feedforward_mode = 1;
  if (this->cogging_feedforward_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cogging_feedforward_mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kinova.Api.ActuatorConfig.CoggingFeedforwardModeInformation)
  return target;
}

size_t CoggingFeedforwardModeInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kinova.Api.ActuatorConfig.CoggingFeedforwardModeInformation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kinova.Api.ActuatorConfig.CoggingFeedforwardMode cogging_feedforward_mode = 1;
  if (this->cogging_feedforward_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cogging_feedforward_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoggingFeedforwardModeInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kinova.Api.ActuatorConfig.CoggingFeedforwardModeInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const CoggingFeedforwardModeInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CoggingFeedforwardModeInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kinova.Api.ActuatorConfig.CoggingFeedforwardModeInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kinova.Api.ActuatorConfig.CoggingFeedforwardModeInformation)
    MergeFrom(*source);
  }
}

void CoggingFeedforwardModeInformation::MergeFrom(const CoggingFeedforwardModeInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kinova.Api.ActuatorConfig.CoggingFeedforwardModeInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cogging_feedforward_mode() != 0) {
    set_cogging_feedforward_mode(from.cogging_feedforward_mode());
  }
}

void CoggingFeedforwardModeInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kinova.Api.ActuatorConfig.CoggingFeedforwardModeInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoggingFeedforwardModeInformation::CopyFrom(const CoggingFeedforwardModeInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kinova.Api.ActuatorConfig.CoggingFeedforwardModeInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoggingFeedforwardModeInformation::IsInitialized() const {
  return true;
}

void CoggingFeedforwardModeInformation::Swap(CoggingFeedforwardModeInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoggingFeedforwardModeInformation::InternalSwap(CoggingFeedforwardModeInformation* other) {
  using std::swap;
  swap(cogging_feedforward_mode_, other->cogging_feedforward_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CoggingFeedforwardModeInformation::GetMetadata() const {
  protobuf_ActuatorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ActuatorConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ActuatorConfig
}  // namespace Api
}  // namespace Kinova
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorConfig::AxisPosition* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorConfig::AxisPosition >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorConfig::AxisPosition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorConfig::AxisOffsets* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorConfig::AxisOffsets >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorConfig::AxisOffsets >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorConfig::TorqueCalibration* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorConfig::TorqueCalibration >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorConfig::TorqueCalibration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorConfig::TorqueOffset* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorConfig::TorqueOffset >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorConfig::TorqueOffset >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorConfig::ControlModeInformation* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorConfig::ControlModeInformation >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorConfig::ControlModeInformation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorConfig::ControlLoop* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorConfig::ControlLoop >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorConfig::ControlLoop >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorConfig::LoopSelection* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorConfig::LoopSelection >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorConfig::LoopSelection >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorConfig::VectorDriveParameters* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorConfig::VectorDriveParameters >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorConfig::VectorDriveParameters >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorConfig::EncoderDerivativeParameters* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorConfig::EncoderDerivativeParameters >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorConfig::EncoderDerivativeParameters >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorConfig::ControlLoopParameters* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorConfig::ControlLoopParameters >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorConfig::ControlLoopParameters >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorConfig::FrequencyResponse* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorConfig::FrequencyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorConfig::FrequencyResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorConfig::StepResponse* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorConfig::StepResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorConfig::StepResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorConfig::RampResponse* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorConfig::RampResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorConfig::RampResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorConfig::CustomDataSelection* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorConfig::CustomDataSelection >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorConfig::CustomDataSelection >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorConfig::CommandModeInformation* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorConfig::CommandModeInformation >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorConfig::CommandModeInformation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorConfig::Servoing* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorConfig::Servoing >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorConfig::Servoing >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorConfig::PositionCommand* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorConfig::PositionCommand >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorConfig::PositionCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kinova::Api::ActuatorConfig::CoggingFeedforwardModeInformation* Arena::CreateMaybeMessage< ::Kinova::Api::ActuatorConfig::CoggingFeedforwardModeInformation >(Arena* arena) {
  return Arena::CreateInternal< ::Kinova::Api::ActuatorConfig::CoggingFeedforwardModeInformation >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
